
can2usb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00001f3c  00001fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ee  008001a0  008001a0  00002070  2**0
                  ALLOC
  3 .comment      0000006d  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00002120  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000073f6  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016d4  00000000  00000000  000097fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012cb  00000000  00000000  0000aed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000834  00000000  00000000  0000c1a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c29  00000000  00000000  0000c9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f01  00000000  00000000  0000e5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  000114fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__vector_1>
       8:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_2>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__vector_16>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__vector_18>
      4c:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__vector_19>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	47 04       	cpc	r4, r7
      ba:	b0 0b       	sbc	r27, r16

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	ec e3       	ldi	r30, 0x3C	; 60
      d0:	ff e1       	ldi	r31, 0x1F	; 31
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	a0 3a       	cpi	r26, 0xA0	; 160
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	22 e0       	ldi	r18, 0x02	; 2
      e0:	a0 ea       	ldi	r26, 0xA0	; 160
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	ae 38       	cpi	r26, 0x8E	; 142
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
      ee:	10 e0       	ldi	r17, 0x00	; 0
      f0:	ce e5       	ldi	r28, 0x5E	; 94
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
      f6:	21 97       	sbiw	r28, 0x01	; 1
      f8:	fe 01       	movw	r30, r28
      fa:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__tablejump2__>
      fe:	cc 35       	cpi	r28, 0x5C	; 92
     100:	d1 07       	cpc	r29, r17
     102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
     104:	0e 94 4a 0c 	call	0x1894	; 0x1894 <main>
     108:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <_ZN11CAN_MCP25153endEv>:
     110:	0c 94 33 05 	jmp	0xa66	; 0xa66 <_ZN8SPIClass3endEv>

00000114 <_ZN8SPIClass8transferEh>:
     114:	8e bd       	out	0x2e, r24	; 46
     116:	00 00       	nop
     118:	0d b4       	in	r0, 0x2d	; 45
     11a:	07 fe       	sbrs	r0, 7
     11c:	fd cf       	rjmp	.-6      	; 0x118 <_ZN8SPIClass8transferEh+0x4>
     11e:	8e b5       	in	r24, 0x2e	; 46
     120:	08 95       	ret

00000122 <_ZN11CAN_MCP25155_initEv>:
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	ec 01       	movw	r28, r24
     128:	61 e0       	ldi	r22, 0x01	; 1
     12a:	8a 81       	ldd	r24, Y+2	; 0x02
     12c:	0e 94 9a 09 	call	0x1334	; 0x1334 <pinMode>
     130:	61 e0       	ldi	r22, 0x01	; 1
     132:	8a 81       	ldd	r24, Y+2	; 0x02
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <digitalWrite>

0000013c <_ZN11CAN_MCP2515C1Ev>:
     13c:	28 e1       	ldi	r18, 0x18	; 24
     13e:	31 e0       	ldi	r19, 0x01	; 1
     140:	fc 01       	movw	r30, r24
     142:	31 83       	std	Z+1, r19	; 0x01
     144:	20 83       	st	Z, r18
     146:	2a e0       	ldi	r18, 0x0A	; 10
     148:	22 83       	std	Z+2, r18	; 0x02
     14a:	0c 94 91 00 	jmp	0x122	; 0x122 <_ZN11CAN_MCP25155_initEv>

0000014e <_ZN11CAN_MCP2515C1Eh>:
     14e:	28 e1       	ldi	r18, 0x18	; 24
     150:	31 e0       	ldi	r19, 0x01	; 1
     152:	fc 01       	movw	r30, r24
     154:	31 83       	std	Z+1, r19	; 0x01
     156:	20 83       	st	Z, r18
     158:	62 83       	std	Z+2, r22	; 0x02
     15a:	0c 94 91 00 	jmp	0x122	; 0x122 <_ZN11CAN_MCP25155_initEv>

0000015e <_ZN11CAN_MCP25155resetEv>:
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	ec 01       	movw	r28, r24
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	8a 81       	ldd	r24, Y+2	; 0x02
     168:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     16c:	80 ec       	ldi	r24, 0xC0	; 192
     16e:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     172:	61 e0       	ldi	r22, 0x01	; 1
     174:	8a 81       	ldd	r24, Y+2	; 0x02
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <digitalWrite>

0000017e <_ZN11CAN_MCP251512writeAddressEhh>:
     17e:	ef 92       	push	r14
     180:	ff 92       	push	r15
     182:	1f 93       	push	r17
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	1f 92       	push	r1
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	7c 01       	movw	r14, r24
     190:	16 2f       	mov	r17, r22
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	fc 01       	movw	r30, r24
     196:	82 81       	ldd	r24, Z+2	; 0x02
     198:	49 83       	std	Y+1, r20	; 0x01
     19a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     19e:	82 e0       	ldi	r24, 0x02	; 2
     1a0:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     1a4:	81 2f       	mov	r24, r17
     1a6:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     1aa:	49 81       	ldd	r20, Y+1	; 0x01
     1ac:	84 2f       	mov	r24, r20
     1ae:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     1b2:	61 e0       	ldi	r22, 0x01	; 1
     1b4:	f7 01       	movw	r30, r14
     1b6:	82 81       	ldd	r24, Z+2	; 0x02
     1b8:	0f 90       	pop	r0
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	1f 91       	pop	r17
     1c0:	ff 90       	pop	r15
     1c2:	ef 90       	pop	r14
     1c4:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <digitalWrite>

000001c8 <_ZN11CAN_MCP251513modifyAddressEhhh>:
     1c8:	ef 92       	push	r14
     1ca:	ff 92       	push	r15
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	00 d0       	rcall	.+0      	; 0x1d4 <_ZN11CAN_MCP251513modifyAddressEhhh+0xc>
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
     1d8:	7c 01       	movw	r14, r24
     1da:	16 2f       	mov	r17, r22
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	fc 01       	movw	r30, r24
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	2a 83       	std	Y+2, r18	; 0x02
     1e4:	49 83       	std	Y+1, r20	; 0x01
     1e6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     1ea:	85 e0       	ldi	r24, 0x05	; 5
     1ec:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     1f0:	81 2f       	mov	r24, r17
     1f2:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     1f6:	49 81       	ldd	r20, Y+1	; 0x01
     1f8:	84 2f       	mov	r24, r20
     1fa:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     1fe:	2a 81       	ldd	r18, Y+2	; 0x02
     200:	82 2f       	mov	r24, r18
     202:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	f7 01       	movw	r30, r14
     20a:	82 81       	ldd	r24, Z+2	; 0x02
     20c:	0f 90       	pop	r0
     20e:	0f 90       	pop	r0
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	1f 91       	pop	r17
     216:	ff 90       	pop	r15
     218:	ef 90       	pop	r14
     21a:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <digitalWrite>

0000021e <_ZN11CAN_MCP251510readStatusEv>:
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	ec 01       	movw	r28, r24
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	8a 81       	ldd	r24, Y+2	; 0x02
     22a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     22e:	80 ea       	ldi	r24, 0xA0	; 160
     230:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     23a:	18 2f       	mov	r17, r24
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	8a 81       	ldd	r24, Y+2	; 0x02
     240:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     244:	81 2f       	mov	r24, r17
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	1f 91       	pop	r17
     24c:	08 95       	ret

0000024e <_ZN11CAN_MCP25159availableEv>:
     24e:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN11CAN_MCP251510readStatusEv>
     252:	83 70       	andi	r24, 0x03	; 3
     254:	08 95       	ret

00000256 <_ZN11CAN_MCP25154readEv>:
     256:	4f 92       	push	r4
     258:	5f 92       	push	r5
     25a:	6f 92       	push	r6
     25c:	7f 92       	push	r7
     25e:	8f 92       	push	r8
     260:	9f 92       	push	r9
     262:	af 92       	push	r10
     264:	bf 92       	push	r11
     266:	df 92       	push	r13
     268:	ef 92       	push	r14
     26a:	ff 92       	push	r15
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	ec 01       	movw	r28, r24
     276:	4b 01       	movw	r8, r22
     278:	cb 01       	movw	r24, r22
     27a:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN11CAN_MCP251510readStatusEv>
     27e:	80 fd       	sbrc	r24, 0
     280:	05 c0       	rjmp	.+10     	; 0x28c <_ZN11CAN_MCP25154readEv+0x36>
     282:	81 fd       	sbrc	r24, 1
     284:	05 c0       	rjmp	.+10     	; 0x290 <_ZN11CAN_MCP25154readEv+0x3a>
     286:	88 85       	ldd	r24, Y+8	; 0x08
     288:	8e 7f       	andi	r24, 0xFE	; 254
     28a:	a2 c0       	rjmp	.+324    	; 0x3d0 <_ZN11CAN_MCP25154readEv+0x17a>
     28c:	10 e9       	ldi	r17, 0x90	; 144
     28e:	01 c0       	rjmp	.+2      	; 0x292 <_ZN11CAN_MCP25154readEv+0x3c>
     290:	14 e9       	ldi	r17, 0x94	; 148
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	f4 01       	movw	r30, r8
     296:	82 81       	ldd	r24, Z+2	; 0x02
     298:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     29c:	81 2f       	mov	r24, r17
     29e:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     2a2:	8f ef       	ldi	r24, 0xFF	; 255
     2a4:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     2a8:	d8 2e       	mov	r13, r24
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     2b0:	e8 2e       	mov	r14, r24
     2b2:	8f ef       	ldi	r24, 0xFF	; 255
     2b4:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     2b8:	08 2f       	mov	r16, r24
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     2c0:	18 2f       	mov	r17, r24
     2c2:	8f ef       	ldi	r24, 0xFF	; 255
     2c4:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     2c8:	f8 2e       	mov	r15, r24
     2ca:	28 2f       	mov	r18, r24
     2cc:	2f 70       	andi	r18, 0x0F	; 15
     2ce:	92 2f       	mov	r25, r18
     2d0:	92 95       	swap	r25
     2d2:	90 7f       	andi	r25, 0xF0	; 240
     2d4:	8d 85       	ldd	r24, Y+13	; 0x0d
     2d6:	8f 70       	andi	r24, 0x0F	; 15
     2d8:	89 2b       	or	r24, r25
     2da:	8d 87       	std	Y+13, r24	; 0x0d
     2dc:	3e 01       	movw	r6, r28
     2de:	f0 e1       	ldi	r31, 0x10	; 16
     2e0:	6f 0e       	add	r6, r31
     2e2:	71 1c       	adc	r7, r1
     2e4:	41 2c       	mov	r4, r1
     2e6:	51 2c       	mov	r5, r1
     2e8:	a2 2e       	mov	r10, r18
     2ea:	b1 2c       	mov	r11, r1
     2ec:	4a 14       	cp	r4, r10
     2ee:	5b 04       	cpc	r5, r11
     2f0:	54 f4       	brge	.+20     	; 0x306 <_ZN11CAN_MCP25154readEv+0xb0>
     2f2:	8f ef       	ldi	r24, 0xFF	; 255
     2f4:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     2f8:	f3 01       	movw	r30, r6
     2fa:	81 93       	st	Z+, r24
     2fc:	3f 01       	movw	r6, r30
     2fe:	ff ef       	ldi	r31, 0xFF	; 255
     300:	4f 1a       	sub	r4, r31
     302:	5f 0a       	sbc	r5, r31
     304:	f3 cf       	rjmp	.-26     	; 0x2ec <_ZN11CAN_MCP25154readEv+0x96>
     306:	61 e0       	ldi	r22, 0x01	; 1
     308:	f4 01       	movw	r30, r8
     30a:	82 81       	ldd	r24, Z+2	; 0x02
     30c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     310:	2e 2d       	mov	r18, r14
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	c9 01       	movw	r24, r18
     316:	43 e0       	ldi	r20, 0x03	; 3
     318:	95 95       	asr	r25
     31a:	87 95       	ror	r24
     31c:	4a 95       	dec	r20
     31e:	e1 f7       	brne	.-8      	; 0x318 <_ZN11CAN_MCP25154readEv+0xc2>
     320:	e8 85       	ldd	r30, Y+8	; 0x08
     322:	80 fb       	bst	r24, 0
     324:	e2 f9       	bld	r30, 2
     326:	e8 87       	std	Y+8, r30	; 0x08
     328:	fb 81       	ldd	r31, Y+3	; 0x03
     32a:	e2 ff       	sbrs	r30, 2
     32c:	32 c0       	rjmp	.+100    	; 0x392 <_ZN11CAN_MCP25154readEv+0x13c>
     32e:	4d 2d       	mov	r20, r13
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	a5 e1       	ldi	r26, 0x15	; 21
     338:	44 0f       	add	r20, r20
     33a:	55 1f       	adc	r21, r21
     33c:	66 1f       	adc	r22, r22
     33e:	77 1f       	adc	r23, r23
     340:	aa 95       	dec	r26
     342:	d1 f7       	brne	.-12     	; 0x338 <_ZN11CAN_MCP25154readEv+0xe2>
     344:	50 2b       	or	r21, r16
     346:	41 2b       	or	r20, r17
     348:	0e 2d       	mov	r16, r14
     34a:	00 7e       	andi	r16, 0xE0	; 224
     34c:	10 e0       	ldi	r17, 0x00	; 0
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	bd e0       	ldi	r27, 0x0D	; 13
     354:	00 0f       	add	r16, r16
     356:	11 1f       	adc	r17, r17
     358:	22 1f       	adc	r18, r18
     35a:	33 1f       	adc	r19, r19
     35c:	ba 95       	dec	r27
     35e:	d1 f7       	brne	.-12     	; 0x354 <_ZN11CAN_MCP25154readEv+0xfe>
     360:	40 2b       	or	r20, r16
     362:	51 2b       	or	r21, r17
     364:	62 2b       	or	r22, r18
     366:	73 2b       	or	r23, r19
     368:	8e 2d       	mov	r24, r14
     36a:	83 70       	andi	r24, 0x03	; 3
     36c:	68 2b       	or	r22, r24
     36e:	48 83       	st	Y, r20
     370:	59 83       	std	Y+1, r21	; 0x01
     372:	6a 83       	std	Y+2, r22	; 0x02
     374:	87 2f       	mov	r24, r23
     376:	8f 71       	andi	r24, 0x1F	; 31
     378:	f0 7e       	andi	r31, 0xE0	; 224
     37a:	f8 2b       	or	r31, r24
     37c:	fb 83       	std	Y+3, r31	; 0x03
     37e:	8f 2d       	mov	r24, r15
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	16 e0       	ldi	r17, 0x06	; 6
     384:	95 95       	asr	r25
     386:	87 95       	ror	r24
     388:	1a 95       	dec	r17
     38a:	e1 f7       	brne	.-8      	; 0x384 <_ZN11CAN_MCP25154readEv+0x12e>
     38c:	80 fb       	bst	r24, 0
     38e:	e1 f9       	bld	r30, 1
     390:	1c c0       	rjmp	.+56     	; 0x3ca <_ZN11CAN_MCP25154readEv+0x174>
     392:	48 e0       	ldi	r20, 0x08	; 8
     394:	d4 9e       	mul	r13, r20
     396:	c0 01       	movw	r24, r0
     398:	11 24       	eor	r1, r1
     39a:	09 2e       	mov	r0, r25
     39c:	00 0c       	add	r0, r0
     39e:	aa 0b       	sbc	r26, r26
     3a0:	bb 0b       	sbc	r27, r27
     3a2:	e2 94       	swap	r14
     3a4:	e6 94       	lsr	r14
     3a6:	47 e0       	ldi	r20, 0x07	; 7
     3a8:	e4 22       	and	r14, r20
     3aa:	8e 29       	or	r24, r14
     3ac:	88 83       	st	Y, r24
     3ae:	99 83       	std	Y+1, r25	; 0x01
     3b0:	aa 83       	std	Y+2, r26	; 0x02
     3b2:	8b 2f       	mov	r24, r27
     3b4:	8f 71       	andi	r24, 0x1F	; 31
     3b6:	f0 7e       	andi	r31, 0xE0	; 224
     3b8:	f8 2b       	or	r31, r24
     3ba:	fb 83       	std	Y+3, r31	; 0x03
     3bc:	54 e0       	ldi	r21, 0x04	; 4
     3be:	35 95       	asr	r19
     3c0:	27 95       	ror	r18
     3c2:	5a 95       	dec	r21
     3c4:	e1 f7       	brne	.-8      	; 0x3be <_ZN11CAN_MCP25154readEv+0x168>
     3c6:	20 fb       	bst	r18, 0
     3c8:	e1 f9       	bld	r30, 1
     3ca:	e8 87       	std	Y+8, r30	; 0x08
     3cc:	88 85       	ldd	r24, Y+8	; 0x08
     3ce:	81 60       	ori	r24, 0x01	; 1
     3d0:	88 87       	std	Y+8, r24	; 0x08
     3d2:	ce 01       	movw	r24, r28
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	df 90       	pop	r13
     3e2:	bf 90       	pop	r11
     3e4:	af 90       	pop	r10
     3e6:	9f 90       	pop	r9
     3e8:	8f 90       	pop	r8
     3ea:	7f 90       	pop	r7
     3ec:	6f 90       	pop	r6
     3ee:	5f 90       	pop	r5
     3f0:	4f 90       	pop	r4
     3f2:	08 95       	ret

000003f4 <_ZN11CAN_MCP25155writeERK9CAN_Frame>:
     3f4:	6f 92       	push	r6
     3f6:	7f 92       	push	r7
     3f8:	9f 92       	push	r9
     3fa:	af 92       	push	r10
     3fc:	bf 92       	push	r11
     3fe:	cf 92       	push	r12
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	00 d0       	rcall	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	3c 01       	movw	r6, r24
     416:	8b 01       	movw	r16, r22
     418:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN11CAN_MCP251510readStatusEv>
     41c:	82 ff       	sbrs	r24, 2
     41e:	09 c0       	rjmp	.+18     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     420:	84 ff       	sbrs	r24, 4
     422:	0c c0       	rjmp	.+24     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     424:	86 fd       	sbrc	r24, 6
     426:	9c c0       	rjmp	.+312    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
     428:	24 e8       	ldi	r18, 0x84	; 132
     42a:	b2 2e       	mov	r11, r18
     42c:	34 e4       	ldi	r19, 0x44	; 68
     42e:	93 2e       	mov	r9, r19
     430:	09 c0       	rjmp	.+18     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     432:	81 e8       	ldi	r24, 0x81	; 129
     434:	b8 2e       	mov	r11, r24
     436:	90 e4       	ldi	r25, 0x40	; 64
     438:	99 2e       	mov	r9, r25
     43a:	04 c0       	rjmp	.+8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     43c:	a2 e8       	ldi	r26, 0x82	; 130
     43e:	ba 2e       	mov	r11, r26
     440:	b2 e4       	ldi	r27, 0x42	; 66
     442:	9b 2e       	mov	r9, r27
     444:	f8 01       	movw	r30, r16
     446:	35 85       	ldd	r19, Z+13	; 0x0d
     448:	32 95       	swap	r19
     44a:	3f 70       	andi	r19, 0x0F	; 15
     44c:	20 85       	ldd	r18, Z+8	; 0x08
     44e:	93 81       	ldd	r25, Z+3	; 0x03
     450:	82 2f       	mov	r24, r18
     452:	82 70       	andi	r24, 0x02	; 2
     454:	22 ff       	sbrs	r18, 2
     456:	24 c0       	rjmp	.+72     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     458:	20 81       	ld	r18, Z
     45a:	c2 2e       	mov	r12, r18
     45c:	d1 80       	ldd	r13, Z+1	; 0x01
     45e:	e2 80       	ldd	r14, Z+2	; 0x02
     460:	9f 71       	andi	r25, 0x1F	; 31
     462:	f9 2e       	mov	r15, r25
     464:	b7 01       	movw	r22, r14
     466:	a6 01       	movw	r20, r12
     468:	e5 e1       	ldi	r30, 0x15	; 21
     46a:	76 95       	lsr	r23
     46c:	67 95       	ror	r22
     46e:	57 95       	ror	r21
     470:	47 95       	ror	r20
     472:	ea 95       	dec	r30
     474:	d1 f7       	brne	.-12     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     476:	a4 2e       	mov	r10, r20
     478:	b7 01       	movw	r22, r14
     47a:	a6 01       	movw	r20, r12
     47c:	fd e0       	ldi	r31, 0x0D	; 13
     47e:	76 95       	lsr	r23
     480:	67 95       	ror	r22
     482:	57 95       	ror	r21
     484:	47 95       	ror	r20
     486:	fa 95       	dec	r31
     488:	d1 f7       	brne	.-12     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     48a:	40 7e       	andi	r20, 0xE0	; 224
     48c:	9e 2d       	mov	r25, r14
     48e:	93 70       	andi	r25, 0x03	; 3
     490:	49 2b       	or	r20, r25
     492:	48 60       	ori	r20, 0x08	; 8
     494:	ed 2c       	mov	r14, r13
     496:	f2 2e       	mov	r15, r18
     498:	88 23       	and	r24, r24
     49a:	c9 f0       	breq	.+50     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     49c:	30 64       	ori	r19, 0x40	; 64
     49e:	17 c0       	rjmp	.+46     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4a0:	f8 01       	movw	r30, r16
     4a2:	40 81       	ld	r20, Z
     4a4:	51 81       	ldd	r21, Z+1	; 0x01
     4a6:	62 81       	ldd	r22, Z+2	; 0x02
     4a8:	79 2f       	mov	r23, r25
     4aa:	7f 71       	andi	r23, 0x1F	; 31
     4ac:	6a 01       	movw	r12, r20
     4ae:	7b 01       	movw	r14, r22
     4b0:	93 e0       	ldi	r25, 0x03	; 3
     4b2:	f6 94       	lsr	r15
     4b4:	e7 94       	ror	r14
     4b6:	d7 94       	ror	r13
     4b8:	c7 94       	ror	r12
     4ba:	9a 95       	dec	r25
     4bc:	d1 f7       	brne	.-12     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4be:	ac 2c       	mov	r10, r12
     4c0:	42 95       	swap	r20
     4c2:	44 0f       	add	r20, r20
     4c4:	40 7e       	andi	r20, 0xE0	; 224
     4c6:	81 11       	cpse	r24, r1
     4c8:	40 61       	ori	r20, 0x10	; 16
     4ca:	f1 2c       	mov	r15, r1
     4cc:	e1 2c       	mov	r14, r1
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	f3 01       	movw	r30, r6
     4d2:	82 81       	ldd	r24, Z+2	; 0x02
     4d4:	3a 83       	std	Y+2, r19	; 0x02
     4d6:	49 83       	std	Y+1, r20	; 0x01
     4d8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     4dc:	89 2d       	mov	r24, r9
     4de:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     4e2:	8a 2d       	mov	r24, r10
     4e4:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     4e8:	49 81       	ldd	r20, Y+1	; 0x01
     4ea:	84 2f       	mov	r24, r20
     4ec:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     4f0:	8e 2d       	mov	r24, r14
     4f2:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     4f6:	8f 2d       	mov	r24, r15
     4f8:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     4fc:	3a 81       	ldd	r19, Y+2	; 0x02
     4fe:	83 2f       	mov	r24, r19
     500:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     504:	68 01       	movw	r12, r16
     506:	f0 e1       	ldi	r31, 0x10	; 16
     508:	cf 0e       	add	r12, r31
     50a:	d1 1c       	adc	r13, r1
     50c:	e1 2c       	mov	r14, r1
     50e:	f1 2c       	mov	r15, r1
     510:	f8 01       	movw	r30, r16
     512:	85 85       	ldd	r24, Z+13	; 0x0d
     514:	82 95       	swap	r24
     516:	8f 70       	andi	r24, 0x0F	; 15
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	e8 16       	cp	r14, r24
     51c:	f9 06       	cpc	r15, r25
     51e:	4c f4       	brge	.+18     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     520:	f6 01       	movw	r30, r12
     522:	81 91       	ld	r24, Z+
     524:	6f 01       	movw	r12, r30
     526:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     52a:	ff ef       	ldi	r31, 0xFF	; 255
     52c:	ef 1a       	sub	r14, r31
     52e:	ff 0a       	sbc	r15, r31
     530:	ef cf       	rjmp	.-34     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     532:	61 e0       	ldi	r22, 0x01	; 1
     534:	f3 01       	movw	r30, r6
     536:	82 81       	ldd	r24, Z+2	; 0x02
     538:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	f3 01       	movw	r30, r6
     540:	82 81       	ldd	r24, Z+2	; 0x02
     542:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     546:	8b 2d       	mov	r24, r11
     548:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	f3 01       	movw	r30, r6
     550:	82 81       	ldd	r24, Z+2	; 0x02
     552:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     556:	f8 01       	movw	r30, r16
     558:	85 85       	ldd	r24, Z+13	; 0x0d
     55a:	82 95       	swap	r24
     55c:	8f 70       	andi	r24, 0x0F	; 15
     55e:	01 c0       	rjmp	.+2      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	bf 90       	pop	r11
     578:	af 90       	pop	r10
     57a:	9f 90       	pop	r9
     57c:	7f 90       	pop	r7
     57e:	6f 90       	pop	r6
     580:	08 95       	ret

00000582 <_ZN11CAN_MCP25157setModeEh>:
     582:	26 2f       	mov	r18, r22
     584:	40 ee       	ldi	r20, 0xE0	; 224
     586:	6f e0       	ldi	r22, 0x0F	; 15
     588:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_ZN11CAN_MCP251513modifyAddressEhhh>

0000058c <_ZN11CAN_MCP251510setBitrateEm>:
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ec 01       	movw	r28, r24
     592:	41 e0       	ldi	r20, 0x01	; 1
     594:	6a e2       	ldi	r22, 0x2A	; 42
     596:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN11CAN_MCP251512writeAddressEhh>
     59a:	48 eb       	ldi	r20, 0xB8	; 184
     59c:	69 e2       	ldi	r22, 0x29	; 41
     59e:	ce 01       	movw	r24, r28
     5a0:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN11CAN_MCP251512writeAddressEhh>
     5a4:	45 e0       	ldi	r20, 0x05	; 5
     5a6:	68 e2       	ldi	r22, 0x28	; 40
     5a8:	ce 01       	movw	r24, r28
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_ZN11CAN_MCP251512writeAddressEhh>

000005b2 <_ZN11CAN_MCP251512clearFiltersEv>:
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
     5b8:	20 e6       	ldi	r18, 0x60	; 96
     5ba:	40 e6       	ldi	r20, 0x60	; 96
     5bc:	60 e6       	ldi	r22, 0x60	; 96
     5be:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_ZN11CAN_MCP251513modifyAddressEhhh>
     5c2:	20 e6       	ldi	r18, 0x60	; 96
     5c4:	40 e6       	ldi	r20, 0x60	; 96
     5c6:	60 e7       	ldi	r22, 0x70	; 112
     5c8:	ce 01       	movw	r24, r28
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_ZN11CAN_MCP251513modifyAddressEhhh>

000005d2 <_ZN11CAN_MCP251514clearRxBuffersEv>:
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	ec 01       	movw	r28, r24
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	8a 81       	ldd	r24, Y+2	; 0x02
     5de:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     5e2:	82 e0       	ldi	r24, 0x02	; 2
     5e4:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     5e8:	81 e6       	ldi	r24, 0x61	; 97
     5ea:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     5ee:	1d e0       	ldi	r17, 0x0D	; 13
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     5f6:	11 50       	subi	r17, 0x01	; 1
     5f8:	d9 f7       	brne	.-10     	; 0x5f0 <_ZN11CAN_MCP251514clearRxBuffersEv+0x1e>
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	8a 81       	ldd	r24, Y+2	; 0x02
     5fe:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	8a 81       	ldd	r24, Y+2	; 0x02
     606:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     610:	81 e7       	ldi	r24, 0x71	; 113
     612:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     616:	1d e0       	ldi	r17, 0x0D	; 13
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     61e:	11 50       	subi	r17, 0x01	; 1
     620:	d9 f7       	brne	.-10     	; 0x618 <_ZN11CAN_MCP251514clearRxBuffersEv+0x46>
     622:	61 e0       	ldi	r22, 0x01	; 1
     624:	8a 81       	ldd	r24, Y+2	; 0x02
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <digitalWrite>

00000630 <_ZN11CAN_MCP251514clearTxBuffersEv>:
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	ec 01       	movw	r28, r24
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	8a 81       	ldd	r24, Y+2	; 0x02
     63c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     646:	81 e3       	ldi	r24, 0x31	; 49
     648:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     64c:	1d e0       	ldi	r17, 0x0D	; 13
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     654:	11 50       	subi	r17, 0x01	; 1
     656:	d9 f7       	brne	.-10     	; 0x64e <_ZN11CAN_MCP251514clearTxBuffersEv+0x1e>
     658:	61 e0       	ldi	r22, 0x01	; 1
     65a:	8a 81       	ldd	r24, Y+2	; 0x02
     65c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	8a 81       	ldd	r24, Y+2	; 0x02
     664:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     66e:	81 e4       	ldi	r24, 0x41	; 65
     670:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     674:	1d e0       	ldi	r17, 0x0D	; 13
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     67c:	11 50       	subi	r17, 0x01	; 1
     67e:	d9 f7       	brne	.-10     	; 0x676 <_ZN11CAN_MCP251514clearTxBuffersEv+0x46>
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	8a 81       	ldd	r24, Y+2	; 0x02
     684:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	8a 81       	ldd	r24, Y+2	; 0x02
     68c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     696:	81 e5       	ldi	r24, 0x51	; 81
     698:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     69c:	1d e0       	ldi	r17, 0x0D	; 13
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     6a4:	11 50       	subi	r17, 0x01	; 1
     6a6:	d9 f7       	brne	.-10     	; 0x69e <_ZN11CAN_MCP251514clearTxBuffersEv+0x6e>
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	8a 81       	ldd	r24, Y+2	; 0x02
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	1f 91       	pop	r17
     6b2:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <digitalWrite>

000006b6 <_ZN11CAN_MCP25155flushEv>:
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	ec 01       	movw	r28, r24
     6bc:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN11CAN_MCP251514clearRxBuffersEv>
     6c0:	ce 01       	movw	r24, r28
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	0c 94 18 03 	jmp	0x630	; 0x630 <_ZN11CAN_MCP251514clearTxBuffersEv>

000006ca <_ZN11CAN_MCP251516enableInterruptsEh>:
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	ec 01       	movw	r28, r24
     6d2:	16 2f       	mov	r17, r22
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	8a 81       	ldd	r24, Y+2	; 0x02
     6d8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     6e2:	8b e2       	ldi	r24, 0x2B	; 43
     6e4:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     6e8:	81 2f       	mov	r24, r17
     6ea:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN8SPIClass8transferEh>
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	8a 81       	ldd	r24, Y+2	; 0x02
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <digitalWrite>

000006fc <_ZN11CAN_MCP25155beginEmh>:
     6fc:	cf 92       	push	r12
     6fe:	df 92       	push	r13
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	1f 92       	push	r1
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	8c 01       	movw	r16, r24
     714:	6a 01       	movw	r12, r20
     716:	7b 01       	movw	r14, r22
     718:	29 83       	std	Y+1, r18	; 0x01
     71a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN8SPIClass5beginEv>
     71e:	c8 01       	movw	r24, r16
     720:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN11CAN_MCP25155resetEv>
     724:	c8 01       	movw	r24, r16
     726:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN11CAN_MCP251514clearRxBuffersEv>
     72a:	c8 01       	movw	r24, r16
     72c:	0e 94 18 03 	call	0x630	; 0x630 <_ZN11CAN_MCP251514clearTxBuffersEv>
     730:	c8 01       	movw	r24, r16
     732:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN11CAN_MCP251512clearFiltersEv>
     736:	61 e0       	ldi	r22, 0x01	; 1
     738:	c8 01       	movw	r24, r16
     73a:	0e 94 65 03 	call	0x6ca	; 0x6ca <_ZN11CAN_MCP251516enableInterruptsEh>
     73e:	b7 01       	movw	r22, r14
     740:	a6 01       	movw	r20, r12
     742:	c8 01       	movw	r24, r16
     744:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN11CAN_MCP251510setBitrateEm>
     748:	29 81       	ldd	r18, Y+1	; 0x01
     74a:	62 2f       	mov	r22, r18
     74c:	c8 01       	movw	r24, r16
     74e:	0f 90       	pop	r0
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	df 90       	pop	r13
     75e:	cf 90       	pop	r12
     760:	0c 94 c1 02 	jmp	0x582	; 0x582 <_ZN11CAN_MCP25157setModeEh>

00000764 <_ZN11CAN_MCP25155beginEm>:
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <_ZN11CAN_MCP25155beginEmh>

0000076a <_ZN15CAN_MCP2515plusC1Eh>:
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	1f 92       	push	r1
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	8c 01       	movw	r16, r24
     77a:	69 83       	std	Y+1, r22	; 0x01
     77c:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN11CAN_MCP2515C1Ev>
     780:	88 e0       	ldi	r24, 0x08	; 8
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	f8 01       	movw	r30, r16
     786:	91 83       	std	Z+1, r25	; 0x01
     788:	80 83       	st	Z, r24
     78a:	69 81       	ldd	r22, Y+1	; 0x01
     78c:	62 83       	std	Z+2, r22	; 0x02
     78e:	c8 01       	movw	r24, r16
     790:	0f 90       	pop	r0
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	0c 94 91 00 	jmp	0x122	; 0x122 <_ZN11CAN_MCP25155_initEv>

0000079e <_ZN15CAN_MCP2515plus11can_answer2Ehb>:
     79e:	fc 01       	movw	r30, r24
     7a0:	83 81       	ldd	r24, Z+3	; 0x03
     7a2:	94 81       	ldd	r25, Z+4	; 0x04
     7a4:	91 8b       	std	Z+17, r25	; 0x11
     7a6:	80 8b       	std	Z+16, r24	; 0x10
     7a8:	42 8b       	std	Z+18, r20	; 0x12
     7aa:	62 95       	swap	r22
     7ac:	60 7f       	andi	r22, 0xF0	; 240
     7ae:	80 8d       	ldd	r24, Z+24	; 0x18
     7b0:	8f 70       	andi	r24, 0x0F	; 15
     7b2:	68 2b       	or	r22, r24
     7b4:	60 8f       	std	Z+24, r22	; 0x18
     7b6:	8d b7       	in	r24, 0x3d	; 61
     7b8:	9e b7       	in	r25, 0x3e	; 62
     7ba:	48 97       	sbiw	r24, 0x18	; 24
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	9e bf       	out	0x3e, r25	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	8d bf       	out	0x3d, r24	; 61
     7c6:	ad b7       	in	r26, 0x3d	; 61
     7c8:	be b7       	in	r27, 0x3e	; 62
     7ca:	11 96       	adiw	r26, 0x01	; 1
     7cc:	88 e1       	ldi	r24, 0x18	; 24
     7ce:	3b 96       	adiw	r30, 0x0b	; 11
     7d0:	01 90       	ld	r0, Z+
     7d2:	0d 92       	st	X+, r0
     7d4:	8a 95       	dec	r24
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <_ZN15CAN_MCP2515plus11can_answer2Ehb+0x32>
     7d8:	0e 94 ab 04 	call	0x956	; 0x956 <_Z12sendCanFrame9CAN_Frame>
     7dc:	8d b7       	in	r24, 0x3d	; 61
     7de:	9e b7       	in	r25, 0x3e	; 62
     7e0:	48 96       	adiw	r24, 0x18	; 24
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	9e bf       	out	0x3e, r25	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	8d bf       	out	0x3d, r24	; 61
     7ec:	08 95       	ret

000007ee <_ZN15CAN_MCP2515plus10can_answerEh>:
     7ee:	41 e0       	ldi	r20, 0x01	; 1
     7f0:	0c 94 cf 03 	jmp	0x79e	; 0x79e <_ZN15CAN_MCP2515plus11can_answer2Ehb>

000007f4 <_ZN15CAN_MCP2515plus16configTerminatorEii>:
     7f4:	fc 01       	movw	r30, r24
     7f6:	8d e1       	ldi	r24, 0x1D	; 29
     7f8:	87 87       	std	Z+15, r24	; 0x0f
     7fa:	87 81       	ldd	r24, Z+7	; 0x07
     7fc:	83 8f       	std	Z+27, r24	; 0x1b
     7fe:	80 85       	ldd	r24, Z+8	; 0x08
     800:	84 8f       	std	Z+28, r24	; 0x1c
     802:	81 85       	ldd	r24, Z+9	; 0x09
     804:	85 8f       	std	Z+29, r24	; 0x1d
     806:	82 85       	ldd	r24, Z+10	; 0x0a
     808:	86 8f       	std	Z+30, r24	; 0x1e
     80a:	67 8f       	std	Z+31, r22	; 0x1f
     80c:	40 a3       	std	Z+32, r20	; 0x20
     80e:	66 e0       	ldi	r22, 0x06	; 6
     810:	cf 01       	movw	r24, r30
     812:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <_ZN15CAN_MCP2515plus10can_answerEh>

00000816 <_ZN15CAN_MCP2515plus15configDataFrameEPhi>:
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	fc 01       	movw	r30, r24
     81c:	8d e1       	ldi	r24, 0x1D	; 29
     81e:	87 87       	std	Z+15, r24	; 0x0f
     820:	4f 5f       	subi	r20, 0xFF	; 255
     822:	5f 4f       	sbci	r21, 0xFF	; 255
     824:	51 8b       	std	Z+17, r21	; 0x11
     826:	40 8b       	std	Z+16, r20	; 0x10
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	82 8b       	std	Z+18, r24	; 0x12
     82c:	80 8d       	ldd	r24, Z+24	; 0x18
     82e:	8f 70       	andi	r24, 0x0F	; 15
     830:	80 68       	ori	r24, 0x80	; 128
     832:	80 8f       	std	Z+24, r24	; 0x18
     834:	db 01       	movw	r26, r22
     836:	ef 01       	movw	r28, r30
     838:	6b 96       	adiw	r28, 0x1b	; 27
     83a:	cf 01       	movw	r24, r30
     83c:	83 96       	adiw	r24, 0x23	; 35
     83e:	2d 91       	ld	r18, X+
     840:	29 93       	st	Y+, r18
     842:	c8 17       	cp	r28, r24
     844:	d9 07       	cpc	r29, r25
     846:	d9 f7       	brne	.-10     	; 0x83e <_ZN15CAN_MCP2515plus15configDataFrameEPhi+0x28>
     848:	8d b7       	in	r24, 0x3d	; 61
     84a:	9e b7       	in	r25, 0x3e	; 62
     84c:	48 97       	sbiw	r24, 0x18	; 24
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	9e bf       	out	0x3e, r25	; 62
     854:	0f be       	out	0x3f, r0	; 63
     856:	8d bf       	out	0x3d, r24	; 61
     858:	ad b7       	in	r26, 0x3d	; 61
     85a:	be b7       	in	r27, 0x3e	; 62
     85c:	11 96       	adiw	r26, 0x01	; 1
     85e:	88 e1       	ldi	r24, 0x18	; 24
     860:	3b 96       	adiw	r30, 0x0b	; 11
     862:	01 90       	ld	r0, Z+
     864:	0d 92       	st	X+, r0
     866:	8a 95       	dec	r24
     868:	e1 f7       	brne	.-8      	; 0x862 <_ZN15CAN_MCP2515plus15configDataFrameEPhi+0x4c>
     86a:	0e 94 ab 04 	call	0x956	; 0x956 <_Z12sendCanFrame9CAN_Frame>
     86e:	8d b7       	in	r24, 0x3d	; 61
     870:	9e b7       	in	r25, 0x3e	; 62
     872:	48 96       	adiw	r24, 0x18	; 24
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	9e bf       	out	0x3e, r25	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	8d bf       	out	0x3d, r24	; 61
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <delay>

0000088e <_GLOBAL__sub_I__ZN11CAN_MCP2515C2Ev>:
     88e:	6a e0       	ldi	r22, 0x0A	; 10
     890:	8b ed       	ldi	r24, 0xDB	; 219
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	0e 94 a7 00 	call	0x14e	; 0x14e <_ZN11CAN_MCP2515C1Eh>
     898:	6a e0       	ldi	r22, 0x0A	; 10
     89a:	80 ea       	ldi	r24, 0xA0	; 160
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0c 94 b5 03 	jmp	0x76a	; 0x76a <_ZN15CAN_MCP2515plusC1Eh>

000008a2 <_Z13highbyte2chari>:
     8a2:	6a e0       	ldi	r22, 0x0A	; 10
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodhi4>
     8aa:	80 e3       	ldi	r24, 0x30	; 48
     8ac:	86 0f       	add	r24, r22
     8ae:	08 95       	ret

000008b0 <_Z12lowbyte2chari>:
     8b0:	6a e0       	ldi	r22, 0x0A	; 10
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodhi4>
     8b8:	80 5d       	subi	r24, 0xD0	; 208
     8ba:	08 95       	ret

000008bc <_Z17what_is_your_namePKhhP9CAN_Frame>:
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	60 5f       	subi	r22, 0xF0	; 240
     8c0:	7f 4f       	sbci	r23, 0xFF	; 255
     8c2:	fa 01       	movw	r30, r20
     8c4:	e6 0f       	add	r30, r22
     8c6:	f7 1f       	adc	r31, r23
     8c8:	9c 01       	movw	r18, r24
     8ca:	2d 5f       	subi	r18, 0xFD	; 253
     8cc:	3f 4f       	sbci	r19, 0xFF	; 255
     8ce:	dc 01       	movw	r26, r24
     8d0:	4d 91       	ld	r20, X+
     8d2:	cd 01       	movw	r24, r26
     8d4:	41 93       	st	Z+, r20
     8d6:	a2 17       	cp	r26, r18
     8d8:	b3 07       	cpc	r27, r19
     8da:	c9 f7       	brne	.-14     	; 0x8ce <_Z17what_is_your_namePKhhP9CAN_Frame+0x12>
     8dc:	08 95       	ret

000008de <_Z7hex2dech>:
     8de:	98 2f       	mov	r25, r24
     8e0:	92 95       	swap	r25
     8e2:	9f 70       	andi	r25, 0x0F	; 15
     8e4:	8f 70       	andi	r24, 0x0F	; 15
     8e6:	2a e0       	ldi	r18, 0x0A	; 10
     8e8:	92 9f       	mul	r25, r18
     8ea:	80 0d       	add	r24, r0
     8ec:	11 24       	eor	r1, r1
     8ee:	08 95       	ret

000008f0 <_Z11generateUIDmP12deviceparams>:
     8f0:	cf 92       	push	r12
     8f2:	df 92       	push	r13
     8f4:	ef 92       	push	r14
     8f6:	ff 92       	push	r15
     8f8:	fa 01       	movw	r30, r20
     8fa:	20 81       	ld	r18, Z
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	a9 01       	movw	r20, r18
     900:	40 53       	subi	r20, 0x30	; 48
     902:	51 09       	sbc	r21, r1
     904:	21 81       	ldd	r18, Z+1	; 0x01
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	20 53       	subi	r18, 0x30	; 48
     90a:	31 09       	sbc	r19, r1
     90c:	d9 01       	movw	r26, r18
     90e:	aa 0f       	add	r26, r26
     910:	bb 1f       	adc	r27, r27
     912:	2a 0f       	add	r18, r26
     914:	3b 1f       	adc	r19, r27
     916:	24 0f       	add	r18, r20
     918:	35 1f       	adc	r19, r21
     91a:	69 01       	movw	r12, r18
     91c:	33 0f       	add	r19, r19
     91e:	ee 08       	sbc	r14, r14
     920:	ff 08       	sbc	r15, r15
     922:	6c 0d       	add	r22, r12
     924:	7d 1d       	adc	r23, r13
     926:	8e 1d       	adc	r24, r14
     928:	9f 1d       	adc	r25, r15
     92a:	92 83       	std	Z+2, r25	; 0x02
     92c:	83 83       	std	Z+3, r24	; 0x03
     92e:	74 83       	std	Z+4, r23	; 0x04
     930:	65 83       	std	Z+5, r22	; 0x05
     932:	ff 90       	pop	r15
     934:	ef 90       	pop	r14
     936:	df 90       	pop	r13
     938:	cf 90       	pop	r12
     93a:	08 95       	ret

0000093c <_Z12generateHashm>:
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	8c 01       	movw	r16, r24
     942:	22 27       	eor	r18, r18
     944:	33 27       	eor	r19, r19
     946:	60 27       	eor	r22, r16
     948:	71 27       	eor	r23, r17
     94a:	cb 01       	movw	r24, r22
     94c:	8f 77       	andi	r24, 0x7F	; 127
     94e:	93 60       	ori	r25, 0x03	; 3
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	08 95       	ret

00000956 <_Z12sendCanFrame9CAN_Frame>:
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	8d 85       	ldd	r24, Y+13	; 0x0d
     960:	84 60       	ori	r24, 0x04	; 4
     962:	8d 87       	std	Y+13, r24	; 0x0d
     964:	89 85       	ldd	r24, Y+9	; 0x09
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	a0 e0       	ldi	r26, 0x00	; 0
     96a:	b0 e0       	ldi	r27, 0x00	; 0
     96c:	21 e1       	ldi	r18, 0x11	; 17
     96e:	88 0f       	add	r24, r24
     970:	99 1f       	adc	r25, r25
     972:	aa 1f       	adc	r26, r26
     974:	bb 1f       	adc	r27, r27
     976:	2a 95       	dec	r18
     978:	d1 f7       	brne	.-12     	; 0x96e <_Z12sendCanFrame9CAN_Frame+0x18>
     97a:	4a 85       	ldd	r20, Y+10	; 0x0a
     97c:	5b 85       	ldd	r21, Y+11	; 0x0b
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	84 2b       	or	r24, r20
     984:	95 2b       	or	r25, r21
     986:	a6 2b       	or	r26, r22
     988:	b7 2b       	or	r27, r23
     98a:	28 85       	ldd	r18, Y+8	; 0x08
     98c:	3c 85       	ldd	r19, Y+12	; 0x0c
     98e:	20 7e       	andi	r18, 0xE0	; 224
     990:	33 23       	and	r19, r19
     992:	11 f0       	breq	.+4      	; 0x998 <_Z12sendCanFrame9CAN_Frame+0x42>
     994:	a1 60       	ori	r26, 0x01	; 1
     996:	02 c0       	rjmp	.+4      	; 0x99c <_Z12sendCanFrame9CAN_Frame+0x46>
     998:	ae 7f       	andi	r26, 0xFE	; 254
     99a:	bf 71       	andi	r27, 0x1F	; 31
     99c:	8d 83       	std	Y+5, r24	; 0x05
     99e:	9e 83       	std	Y+6, r25	; 0x06
     9a0:	af 83       	std	Y+7, r26	; 0x07
     9a2:	8b 2f       	mov	r24, r27
     9a4:	8f 71       	andi	r24, 0x1F	; 31
     9a6:	28 2b       	or	r18, r24
     9a8:	28 87       	std	Y+8, r18	; 0x08
     9aa:	be 01       	movw	r22, r28
     9ac:	6b 5f       	subi	r22, 0xFB	; 251
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	8b ed       	ldi	r24, 0xDB	; 219
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN11CAN_MCP25155writeERK9CAN_Frame>
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <_Z11getCanFramev>:
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	ec 01       	movw	r28, r24
     9c4:	6b ed       	ldi	r22, 0xDB	; 219
     9c6:	71 e0       	ldi	r23, 0x01	; 1
     9c8:	0e 94 2b 01 	call	0x256	; 0x256 <_ZN11CAN_MCP25154readEv>
     9cc:	88 81       	ld	r24, Y
     9ce:	99 81       	ldd	r25, Y+1	; 0x01
     9d0:	aa 81       	ldd	r26, Y+2	; 0x02
     9d2:	2b 81       	ldd	r18, Y+3	; 0x03
     9d4:	b2 2f       	mov	r27, r18
     9d6:	bf 71       	andi	r27, 0x1F	; 31
     9d8:	ac 01       	movw	r20, r24
     9da:	bd 01       	movw	r22, r26
     9dc:	81 e1       	ldi	r24, 0x11	; 17
     9de:	76 95       	lsr	r23
     9e0:	67 95       	ror	r22
     9e2:	57 95       	ror	r21
     9e4:	47 95       	ror	r20
     9e6:	8a 95       	dec	r24
     9e8:	d1 f7       	brne	.-12     	; 0x9de <_Z11getCanFramev+0x20>
     9ea:	4c 83       	std	Y+4, r20	; 0x04
     9ec:	8a 2f       	mov	r24, r26
     9ee:	81 70       	andi	r24, 0x01	; 1
     9f0:	8f 83       	std	Y+7, r24	; 0x07
     9f2:	ce 01       	movw	r24, r28
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <_ZN8SPIClass5beginEv>:
     9fa:	cf 93       	push	r28
     9fc:	cf b7       	in	r28, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <_ZN8SPIClass11initializedE>
     a04:	81 11       	cpse	r24, r1
     a06:	27 c0       	rjmp	.+78     	; 0xa56 <_ZN8SPIClass5beginEv+0x5c>
     a08:	ea e9       	ldi	r30, 0x9A	; 154
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	84 91       	lpm	r24, Z
     a0e:	e6 e8       	ldi	r30, 0x86	; 134
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	94 91       	lpm	r25, Z
     a14:	e8 2f       	mov	r30, r24
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	ee 0f       	add	r30, r30
     a1a:	ff 1f       	adc	r31, r31
     a1c:	e2 55       	subi	r30, 0x52	; 82
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
     a20:	a5 91       	lpm	r26, Z+
     a22:	b4 91       	lpm	r27, Z
     a24:	ec 91       	ld	r30, X
     a26:	e9 23       	and	r30, r25
     a28:	21 f4       	brne	.+8      	; 0xa32 <_ZN8SPIClass5beginEv+0x38>
     a2a:	61 e0       	ldi	r22, 0x01	; 1
     a2c:	8a e0       	ldi	r24, 0x0A	; 10
     a2e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <digitalWrite>
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	8a e0       	ldi	r24, 0x0A	; 10
     a36:	0e 94 9a 09 	call	0x1334	; 0x1334 <pinMode>
     a3a:	8c b5       	in	r24, 0x2c	; 44
     a3c:	80 61       	ori	r24, 0x10	; 16
     a3e:	8c bd       	out	0x2c, r24	; 44
     a40:	8c b5       	in	r24, 0x2c	; 44
     a42:	80 64       	ori	r24, 0x40	; 64
     a44:	8c bd       	out	0x2c, r24	; 44
     a46:	61 e0       	ldi	r22, 0x01	; 1
     a48:	8d e0       	ldi	r24, 0x0D	; 13
     a4a:	0e 94 9a 09 	call	0x1334	; 0x1334 <pinMode>
     a4e:	61 e0       	ldi	r22, 0x01	; 1
     a50:	8b e0       	ldi	r24, 0x0B	; 11
     a52:	0e 94 9a 09 	call	0x1334	; 0x1334 <pinMode>
     a56:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <_ZN8SPIClass11initializedE>
     a5a:	8f 5f       	subi	r24, 0xFF	; 255
     a5c:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <_ZN8SPIClass11initializedE>
     a60:	cf bf       	out	0x3f, r28	; 63
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <_ZN8SPIClass3endEv>:
     a66:	9f b7       	in	r25, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <_ZN8SPIClass11initializedE>
     a6e:	88 23       	and	r24, r24
     a70:	19 f0       	breq	.+6      	; 0xa78 <_ZN8SPIClass3endEv+0x12>
     a72:	81 50       	subi	r24, 0x01	; 1
     a74:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <_ZN8SPIClass11initializedE>
     a78:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <_ZN8SPIClass11initializedE>
     a7c:	81 11       	cpse	r24, r1
     a7e:	05 c0       	rjmp	.+10     	; 0xa8a <_ZN8SPIClass3endEv+0x24>
     a80:	8c b5       	in	r24, 0x2c	; 44
     a82:	8f 7b       	andi	r24, 0xBF	; 191
     a84:	8c bd       	out	0x2c, r24	; 44
     a86:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <_ZN8SPIClass13interruptModeE>
     a8a:	9f bf       	out	0x3f, r25	; 63
     a8c:	08 95       	ret

00000a8e <setup>:
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <eeprom_read_byte>
     a96:	87 34       	cpi	r24, 0x47	; 71
     a98:	e1 f0       	breq	.+56     	; 0xad2 <setup+0x44>
     a9a:	60 e3       	ldi	r22, 0x30	; 48
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <eeprom_update_byte>
     aa4:	60 e3       	ldi	r22, 0x30	; 48
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <eeprom_update_byte>
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <eeprom_read_byte>
     ab6:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <__data_end+0x5>
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <eeprom_read_byte>
     ac2:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end+0x6>
     ac6:	67 e4       	ldi	r22, 0x47	; 71
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <eeprom_update_byte>
     ad0:	0c c0       	rjmp	.+24     	; 0xaea <setup+0x5c>
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <eeprom_read_byte>
     ada:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <__data_end+0x5>
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <eeprom_read_byte>
     ae6:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end+0x6>
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	40 e9       	ldi	r20, 0x90	; 144
     aee:	50 ed       	ldi	r21, 0xD0	; 208
     af0:	63 e0       	ldi	r22, 0x03	; 3
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	80 ea       	ldi	r24, 0xA0	; 160
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN11CAN_MCP25155beginEmh>
     afc:	2f ef       	ldi	r18, 0xFF	; 255
     afe:	89 e6       	ldi	r24, 0x69	; 105
     b00:	98 e1       	ldi	r25, 0x18	; 24
     b02:	21 50       	subi	r18, 0x01	; 1
     b04:	80 40       	sbci	r24, 0x00	; 0
     b06:	90 40       	sbci	r25, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <setup+0x74>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <setup+0x7e>
     b0c:	00 00       	nop
     b0e:	45 ea       	ldi	r20, 0xA5	; 165
     b10:	51 e0       	ldi	r21, 0x01	; 1
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	79 e1       	ldi	r23, 0x19	; 25
     b16:	89 e0       	ldi	r24, 0x09	; 9
     b18:	90 e5       	ldi	r25, 0x50	; 80
     b1a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <_Z11generateUIDmP12deviceparams>
     b1e:	60 93 e4 01 	sts	0x01E4, r22	; 0x8001e4 <UID>
     b22:	70 93 e5 01 	sts	0x01E5, r23	; 0x8001e5 <UID+0x1>
     b26:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <UID+0x2>
     b2a:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <UID+0x3>
     b2e:	2f ef       	ldi	r18, 0xFF	; 255
     b30:	84 e3       	ldi	r24, 0x34	; 52
     b32:	9c e0       	ldi	r25, 0x0C	; 12
     b34:	21 50       	subi	r18, 0x01	; 1
     b36:	80 40       	sbci	r24, 0x00	; 0
     b38:	90 40       	sbci	r25, 0x00	; 0
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <setup+0xa6>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <setup+0xb0>
     b3e:	00 00       	nop
     b40:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <UID>
     b44:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <UID+0x1>
     b48:	a0 91 e6 01 	lds	r26, 0x01E6	; 0x8001e6 <UID+0x2>
     b4c:	b0 91 e7 01 	lds	r27, 0x01E7	; 0x8001e7 <UID+0x3>
     b50:	bc 01       	movw	r22, r24
     b52:	cd 01       	movw	r24, r26
     b54:	6d 59       	subi	r22, 0x9D	; 157
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	8f 4f       	sbci	r24, 0xFF	; 255
     b5a:	9f 4f       	sbci	r25, 0xFF	; 255
     b5c:	0e 94 9e 04 	call	0x93c	; 0x93c <_Z12generateHashm>
     b60:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <__data_end+0x4>
     b64:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <__data_end+0x3>
     b68:	26 e0       	ldi	r18, 0x06	; 6
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	5b e4       	ldi	r21, 0x4B	; 75
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	81 ef       	ldi	r24, 0xF1	; 241
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <_ZN14HardwareSerial5beginEmh>
     b7a:	64 e2       	ldi	r22, 0x24	; 36
     b7c:	71 e0       	ldi	r23, 0x01	; 1
     b7e:	81 ef       	ldi	r24, 0xF1	; 241
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	0e 94 37 0c 	call	0x186e	; 0x186e <_ZN5Print7printlnEPKc>
     b86:	6b e4       	ldi	r22, 0x4B	; 75
     b88:	71 e0       	ldi	r23, 0x01	; 1
     b8a:	81 ef       	ldi	r24, 0xF1	; 241
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	0e 94 37 0c 	call	0x186e	; 0x186e <_ZN5Print7printlnEPKc>
     b92:	64 e2       	ldi	r22, 0x24	; 36
     b94:	71 e0       	ldi	r23, 0x01	; 1
     b96:	81 ef       	ldi	r24, 0xF1	; 241
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 37 0c 	call	0x186e	; 0x186e <_ZN5Print7printlnEPKc>
     b9e:	61 e6       	ldi	r22, 0x61	; 97
     ba0:	71 e0       	ldi	r23, 0x01	; 1
     ba2:	81 ef       	ldi	r24, 0xF1	; 241
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0c 94 37 0c 	jmp	0x186e	; 0x186e <_ZN5Print7printlnEPKc>

00000baa <_Z14boardnumAnswerv>:
     baa:	e0 ea       	ldi	r30, 0xA0	; 160
     bac:	f1 e0       	ldi	r31, 0x01	; 1
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	83 8f       	std	Z+27, r24	; 0x1b
     bb2:	85 81       	ldd	r24, Z+5	; 0x05
     bb4:	84 8f       	std	Z+28, r24	; 0x1c
     bb6:	86 81       	ldd	r24, Z+6	; 0x06
     bb8:	85 8f       	std	Z+29, r24	; 0x1d
     bba:	4b ea       	ldi	r20, 0xAB	; 171
     bbc:	51 e0       	ldi	r21, 0x01	; 1
     bbe:	63 e0       	ldi	r22, 0x03	; 3
     bc0:	8b e7       	ldi	r24, 0x7B	; 123
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_Z17what_is_your_namePKhhP9CAN_Frame>
     bc8:	66 e0       	ldi	r22, 0x06	; 6
     bca:	80 ea       	ldi	r24, 0xA0	; 160
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <_ZN15CAN_MCP2515plus10can_answerEh>

00000bd2 <_Z10printFramev>:
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <_Z10printFramev+0x10>
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <_Z10printFramev+0x12>
     be4:	1f 92       	push	r1
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <__data_end+0x29>
     bee:	8f 93       	push	r24
     bf0:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end+0x28>
     bf4:	8f 93       	push	r24
     bf6:	8b e6       	ldi	r24, 0x6B	; 107
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	9f 93       	push	r25
     bfc:	8f 93       	push	r24
     bfe:	8e 01       	movw	r16, r28
     c00:	0f 5f       	subi	r16, 0xFF	; 255
     c02:	1f 4f       	sbci	r17, 0xFF	; 255
     c04:	1f 93       	push	r17
     c06:	0f 93       	push	r16
     c08:	0e 94 aa 0c 	call	0x1954	; 0x1954 <sprintf>
     c0c:	b8 01       	movw	r22, r16
     c0e:	81 ef       	ldi	r24, 0xF1	; 241
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN5Print5printEPKc>
     c16:	69 e7       	ldi	r22, 0x79	; 121
     c18:	71 e0       	ldi	r23, 0x01	; 1
     c1a:	81 ef       	ldi	r24, 0xF1	; 241
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN5Print5printEPKc>
     c22:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <__data_end+0x27>
     c26:	1f 92       	push	r1
     c28:	8f 93       	push	r24
     c2a:	80 e7       	ldi	r24, 0x70	; 112
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	9f 93       	push	r25
     c30:	8f 93       	push	r24
     c32:	1f 93       	push	r17
     c34:	0f 93       	push	r16
     c36:	0e 94 aa 0c 	call	0x1954	; 0x1954 <sprintf>
     c3a:	b8 01       	movw	r22, r16
     c3c:	81 ef       	ldi	r24, 0xF1	; 241
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN5Print5printEPKc>
     c44:	69 e7       	ldi	r22, 0x79	; 121
     c46:	71 e0       	ldi	r23, 0x01	; 1
     c48:	81 ef       	ldi	r24, 0xF1	; 241
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN5Print5printEPKc>
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end+0x2a>
     c5e:	88 23       	and	r24, r24
     c60:	19 f0       	breq	.+6      	; 0xc68 <_Z10printFramev+0x96>
     c62:	65 e7       	ldi	r22, 0x75	; 117
     c64:	71 e0       	ldi	r23, 0x01	; 1
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <_Z10printFramev+0x9a>
     c68:	68 e7       	ldi	r22, 0x78	; 120
     c6a:	71 e0       	ldi	r23, 0x01	; 1
     c6c:	81 ef       	ldi	r24, 0xF1	; 241
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN5Print5printEPKc>
     c74:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end+0x30>
     c78:	82 95       	swap	r24
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	1f 92       	push	r1
     c7e:	8f 93       	push	r24
     c80:	80 e7       	ldi	r24, 0x70	; 112
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	9f 93       	push	r25
     c86:	8f 93       	push	r24
     c88:	1f 93       	push	r17
     c8a:	0f 93       	push	r16
     c8c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <sprintf>
     c90:	b8 01       	movw	r22, r16
     c92:	81 ef       	ldi	r24, 0xF1	; 241
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN5Print5printEPKc>
     c9a:	69 e7       	ldi	r22, 0x79	; 121
     c9c:	71 e0       	ldi	r23, 0x01	; 1
     c9e:	81 ef       	ldi	r24, 0xF1	; 241
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN5Print5printEPKc>
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	d1 2c       	mov	r13, r1
     cb4:	80 e7       	ldi	r24, 0x70	; 112
     cb6:	e8 2e       	mov	r14, r24
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	f8 2e       	mov	r15, r24
     cbc:	2d 2d       	mov	r18, r13
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end+0x30>
     cc4:	82 95       	swap	r24
     cc6:	8f 70       	andi	r24, 0x0F	; 15
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	fc f4       	brge	.+62     	; 0xd0e <_Z10printFramev+0x13c>
     cd0:	f9 01       	movw	r30, r18
     cd2:	e0 56       	subi	r30, 0x60	; 96
     cd4:	fe 4f       	sbci	r31, 0xFE	; 254
     cd6:	83 a9       	ldd	r24, Z+51	; 0x33
     cd8:	1f 92       	push	r1
     cda:	8f 93       	push	r24
     cdc:	ff 92       	push	r15
     cde:	ef 92       	push	r14
     ce0:	1f 93       	push	r17
     ce2:	0f 93       	push	r16
     ce4:	0e 94 aa 0c 	call	0x1954	; 0x1954 <sprintf>
     ce8:	b8 01       	movw	r22, r16
     cea:	81 ef       	ldi	r24, 0xF1	; 241
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN5Print5printEPKc>
     cf2:	69 e7       	ldi	r22, 0x79	; 121
     cf4:	71 e0       	ldi	r23, 0x01	; 1
     cf6:	81 ef       	ldi	r24, 0xF1	; 241
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN5Print5printEPKc>
     cfe:	d3 94       	inc	r13
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	d7 cf       	rjmp	.-82     	; 0xcbc <_Z10printFramev+0xea>
     d0e:	81 ef       	ldi	r24, 0xF1	; 241
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN5Print7printlnEv>
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	ff 90       	pop	r15
     d2a:	ef 90       	pop	r14
     d2c:	df 90       	pop	r13
     d2e:	08 95       	ret

00000d30 <_Z14processRXFramev>:
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	68 97       	sbiw	r28, 0x18	; 24
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	0e 94 df 04 	call	0x9be	; 0x9be <_Z11getCanFramev>
     d4c:	88 e1       	ldi	r24, 0x18	; 24
     d4e:	fe 01       	movw	r30, r28
     d50:	31 96       	adiw	r30, 0x01	; 1
     d52:	a3 ec       	ldi	r26, 0xC3	; 195
     d54:	b1 e0       	ldi	r27, 0x01	; 1
     d56:	01 90       	ld	r0, Z+
     d58:	0d 92       	st	X+, r0
     d5a:	8a 95       	dec	r24
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <_Z14processRXFramev+0x26>
     d5e:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end+0x2a>
     d62:	81 11       	cpse	r24, r1
     d64:	9d c0       	rjmp	.+314    	; 0xea0 <_Z14processRXFramev+0x170>
     d66:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <__data_end+0x27>
     d6a:	8d 31       	cpi	r24, 0x1D	; 29
     d6c:	41 f1       	breq	.+80     	; 0xdbe <_Z14processRXFramev+0x8e>
     d6e:	82 35       	cpi	r24, 0x52	; 82
     d70:	09 f4       	brne	.+2      	; 0xd74 <_Z14processRXFramev+0x44>
     d72:	47 c0       	rjmp	.+142    	; 0xe02 <_Z14processRXFramev+0xd2>
     d74:	88 31       	cpi	r24, 0x18	; 24
     d76:	09 f0       	breq	.+2      	; 0xd7a <_Z14processRXFramev+0x4a>
     d78:	93 c0       	rjmp	.+294    	; 0xea0 <_Z14processRXFramev+0x170>
     d7a:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <__data_end+0xf>
     d7e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__data_end+0x7>
     d82:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <__data_end+0x1b>
     d86:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end+0x8>
     d8a:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end+0x1c>
     d8e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__data_end+0x9>
     d92:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <__data_end+0x1d>
     d96:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end+0xa>
     d9a:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end+0x1e>
     d9e:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <__data_end+0x1f>
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__data_end+0x20>
     da8:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <__data_end+0x21>
     dac:	82 e5       	ldi	r24, 0x52	; 82
     dae:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end+0x22>
     db2:	68 e0       	ldi	r22, 0x08	; 8
     db4:	80 ea       	ldi	r24, 0xA0	; 160
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN15CAN_MCP2515plus10can_answerEh>
     dbc:	71 c0       	rjmp	.+226    	; 0xea0 <_Z14processRXFramev+0x170>
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	88 23       	and	r24, r24
     dc6:	41 f0       	breq	.+16     	; 0xdd8 <_Z14processRXFramev+0xa8>
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	f9 01       	movw	r30, r18
     dcc:	e0 56       	subi	r30, 0x60	; 96
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	47 81       	ldd	r20, Z+7	; 0x07
     dd2:	93 a9       	ldd	r25, Z+51	; 0x33
     dd4:	49 13       	cpse	r20, r25
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	2f 5f       	subi	r18, 0xFF	; 255
     dda:	3f 4f       	sbci	r19, 0xFF	; 255
     ddc:	24 30       	cpi	r18, 0x04	; 4
     dde:	31 05       	cpc	r19, r1
     de0:	89 f7       	brne	.-30     	; 0xdc4 <_Z14processRXFramev+0x94>
     de2:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <uid_request>
     de6:	88 23       	and	r24, r24
     de8:	09 f4       	brne	.+2      	; 0xdec <_Z14processRXFramev+0xbc>
     dea:	5a c0       	rjmp	.+180    	; 0xea0 <_Z14processRXFramev+0x170>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <config_request>
     df2:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <__data_end+0x37>
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <config_index+0x1>
     dfc:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <config_index>
     e00:	4f c0       	rjmp	.+158    	; 0xea0 <_Z14processRXFramev+0x170>
     e02:	81 e6       	ldi	r24, 0x61	; 97
     e04:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <__data_end+0x1b>
     e08:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <__data_end+0x34>
     e0c:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <__data_end+0x5>
     e10:	98 13       	cpse	r25, r24
     e12:	46 c0       	rjmp	.+140    	; 0xea0 <_Z14processRXFramev+0x170>
     e14:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <__data_end+0x35>
     e18:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end+0x6>
     e1c:	98 13       	cpse	r25, r24
     e1e:	40 c0       	rjmp	.+128    	; 0xea0 <_Z14processRXFramev+0x170>
     e20:	83 e5       	ldi	r24, 0x53	; 83
     e22:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <__data_end+0xf>
     e26:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <__data_end+0x33>
     e2a:	88 23       	and	r24, r24
     e2c:	b9 f1       	breq	.+110    	; 0xe9c <_Z14processRXFramev+0x16c>
     e2e:	82 30       	cpi	r24, 0x02	; 2
     e30:	b9 f5       	brne	.+110    	; 0xea0 <_Z14processRXFramev+0x170>
     e32:	0e 94 d5 05 	call	0xbaa	; 0xbaa <_Z14boardnumAnswerv>
     e36:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <__data_end+0x36>
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <eeprom_update_byte>
     e42:	60 91 d7 01 	lds	r22, 0x01D7	; 0x8001d7 <__data_end+0x37>
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <eeprom_update_byte>
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <eeprom_read_byte>
     e56:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <__data_end+0x5>
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <eeprom_read_byte>
     e62:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end+0x6>
     e66:	45 ea       	ldi	r20, 0xA5	; 165
     e68:	51 e0       	ldi	r21, 0x01	; 1
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	79 e1       	ldi	r23, 0x19	; 25
     e6e:	89 e0       	ldi	r24, 0x09	; 9
     e70:	90 e5       	ldi	r25, 0x50	; 80
     e72:	0e 94 78 04 	call	0x8f0	; 0x8f0 <_Z11generateUIDmP12deviceparams>
     e76:	60 93 e4 01 	sts	0x01E4, r22	; 0x8001e4 <UID>
     e7a:	70 93 e5 01 	sts	0x01E5, r23	; 0x8001e5 <UID+0x1>
     e7e:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <UID+0x2>
     e82:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <UID+0x3>
     e86:	6d 59       	subi	r22, 0x9D	; 157
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	8f 4f       	sbci	r24, 0xFF	; 255
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	0e 94 9e 04 	call	0x93c	; 0x93c <_Z12generateHashm>
     e92:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <__data_end+0x4>
     e96:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <__data_end+0x3>
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <_Z14processRXFramev+0x170>
     e9c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <_Z14boardnumAnswerv>
     ea0:	68 96       	adiw	r28, 0x18	; 24
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <_Z10printFramev>

00000eb4 <_Z10sendConfigi>:
     eb4:	6f 92       	push	r6
     eb6:	7f 92       	push	r7
     eb8:	8f 92       	push	r8
     eba:	9f 92       	push	r9
     ebc:	af 92       	push	r10
     ebe:	bf 92       	push	r11
     ec0:	cf 92       	push	r12
     ec2:	df 92       	push	r13
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	ab 97       	sbiw	r28, 0x2b	; 43
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	7c 01       	movw	r14, r24
     ee2:	84 e0       	ldi	r24, 0x04	; 4
     ee4:	89 a7       	std	Y+41, r24	; 0x29
     ee6:	85 e0       	ldi	r24, 0x05	; 5
     ee8:	8a a7       	std	Y+42, r24	; 0x2a
     eea:	8b a7       	std	Y+43, r24	; 0x2b
     eec:	88 e2       	ldi	r24, 0x28	; 40
     eee:	d8 2e       	mov	r13, r24
     ef0:	8e 01       	movw	r16, r28
     ef2:	0f 5f       	subi	r16, 0xFF	; 255
     ef4:	1f 4f       	sbci	r17, 0xFF	; 255
     ef6:	f8 01       	movw	r30, r16
     ef8:	8d 2d       	mov	r24, r13
     efa:	11 92       	st	Z+, r1
     efc:	8a 95       	dec	r24
     efe:	e9 f7       	brne	.-6      	; 0xefa <_Z10sendConfigi+0x46>
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	8a 83       	std	Y+2, r24	; 0x02
     f04:	83 e4       	ldi	r24, 0x43	; 67
     f06:	89 8b       	std	Y+17, r24	; 0x11
     f08:	81 e4       	ldi	r24, 0x41	; 65
     f0a:	8a 8b       	std	Y+18, r24	; 0x12
     f0c:	8e e4       	ldi	r24, 0x4E	; 78
     f0e:	8b 8b       	std	Y+19, r24	; 0x13
     f10:	87 e6       	ldi	r24, 0x67	; 103
     f12:	8c 8b       	std	Y+20, r24	; 0x14
     f14:	95 e7       	ldi	r25, 0x75	; 117
     f16:	9d 8b       	std	Y+21, r25	; 0x15
     f18:	82 e7       	ldi	r24, 0x72	; 114
     f1a:	8e 8b       	std	Y+22, r24	; 0x16
     f1c:	9f 8b       	std	Y+23, r25	; 0x17
     f1e:	90 e2       	ldi	r25, 0x20	; 32
     f20:	98 8f       	std	Y+24, r25	; 0x18
     f22:	9d e4       	ldi	r25, 0x4D	; 77
     f24:	99 8f       	std	Y+25, r25	; 0x19
     f26:	9f e6       	ldi	r25, 0x6F	; 111
     f28:	9a 8f       	std	Y+26, r25	; 0x1a
     f2a:	2e e6       	ldi	r18, 0x6E	; 110
     f2c:	2b 8f       	std	Y+27, r18	; 0x1b
     f2e:	29 e6       	ldi	r18, 0x69	; 105
     f30:	2c 8f       	std	Y+28, r18	; 0x1c
     f32:	24 e7       	ldi	r18, 0x74	; 116
     f34:	2d 8f       	std	Y+29, r18	; 0x1d
     f36:	9e 8f       	std	Y+30, r25	; 0x1e
     f38:	8f 8f       	std	Y+31, r24	; 0x1f
     f3a:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <__data_end+0x6>
     f3e:	80 ed       	ldi	r24, 0xD0	; 208
     f40:	89 0f       	add	r24, r25
     f42:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <__data_end+0x5>
     f46:	99 0f       	add	r25, r25
     f48:	90 56       	subi	r25, 0x60	; 96
     f4a:	29 2f       	mov	r18, r25
     f4c:	22 0f       	add	r18, r18
     f4e:	22 0f       	add	r18, r18
     f50:	92 0f       	add	r25, r18
     f52:	98 0f       	add	r25, r24
     f54:	98 87       	std	Y+8, r25	; 0x08
     f56:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__data_end+0x7>
     f5a:	0e 94 6f 04 	call	0x8de	; 0x8de <_Z7hex2dech>
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_Z13highbyte2chari>
     f64:	89 87       	std	Y+9, r24	; 0x09
     f66:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__data_end+0x7>
     f6a:	0e 94 6f 04 	call	0x8de	; 0x8de <_Z7hex2dech>
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_Z12lowbyte2chari>
     f74:	8a 87       	std	Y+10, r24	; 0x0a
     f76:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end+0x8>
     f7a:	0e 94 6f 04 	call	0x8de	; 0x8de <_Z7hex2dech>
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_Z13highbyte2chari>
     f84:	8b 87       	std	Y+11, r24	; 0x0b
     f86:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end+0x8>
     f8a:	0e 94 6f 04 	call	0x8de	; 0x8de <_Z7hex2dech>
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_Z12lowbyte2chari>
     f94:	8c 87       	std	Y+12, r24	; 0x0c
     f96:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__data_end+0x9>
     f9a:	0e 94 6f 04 	call	0x8de	; 0x8de <_Z7hex2dech>
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_Z13highbyte2chari>
     fa4:	8d 87       	std	Y+13, r24	; 0x0d
     fa6:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__data_end+0x9>
     faa:	0e 94 6f 04 	call	0x8de	; 0x8de <_Z7hex2dech>
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_Z12lowbyte2chari>
     fb4:	8e 87       	std	Y+14, r24	; 0x0e
     fb6:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end+0xa>
     fba:	0e 94 6f 04 	call	0x8de	; 0x8de <_Z7hex2dech>
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_Z13highbyte2chari>
     fc4:	8f 87       	std	Y+15, r24	; 0x0f
     fc6:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end+0xa>
     fca:	0e 94 6f 04 	call	0x8de	; 0x8de <_Z7hex2dech>
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_Z12lowbyte2chari>
     fd4:	88 8b       	std	Y+16, r24	; 0x10
     fd6:	de 9c       	mul	r13, r14
     fd8:	30 01       	movw	r6, r0
     fda:	df 9c       	mul	r13, r15
     fdc:	70 0c       	add	r7, r0
     fde:	11 24       	eor	r1, r1
     fe0:	81 2c       	mov	r8, r1
     fe2:	91 2c       	mov	r9, r1
     fe4:	c1 2c       	mov	r12, r1
     fe6:	d1 2c       	mov	r13, r1
     fe8:	99 e2       	ldi	r25, 0x29	; 41
     fea:	a9 2e       	mov	r10, r25
     fec:	b1 2c       	mov	r11, r1
     fee:	ac 0e       	add	r10, r28
     ff0:	bd 1e       	adc	r11, r29
     ff2:	ae 0c       	add	r10, r14
     ff4:	bf 1c       	adc	r11, r15
     ff6:	f5 01       	movw	r30, r10
     ff8:	40 81       	ld	r20, Z
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	c4 16       	cp	r12, r20
     ffe:	d5 06       	cpc	r13, r21
    1000:	8c f4       	brge	.+34     	; 0x1024 <_Z10sendConfigi+0x170>
    1002:	b4 01       	movw	r22, r8
    1004:	66 0d       	add	r22, r6
    1006:	77 1d       	adc	r23, r7
    1008:	60 0f       	add	r22, r16
    100a:	71 1f       	adc	r23, r17
    100c:	a6 01       	movw	r20, r12
    100e:	80 ea       	ldi	r24, 0xA0	; 160
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN15CAN_MCP2515plus15configDataFrameEPhi>
    1016:	ef ef       	ldi	r30, 0xFF	; 255
    1018:	ce 1a       	sub	r12, r30
    101a:	de 0a       	sbc	r13, r30
    101c:	f8 e0       	ldi	r31, 0x08	; 8
    101e:	8f 0e       	add	r8, r31
    1020:	91 1c       	adc	r9, r1
    1022:	e9 cf       	rjmp	.-46     	; 0xff6 <_Z10sendConfigi+0x142>
    1024:	b7 01       	movw	r22, r14
    1026:	80 ea       	ldi	r24, 0xA0	; 160
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_ZN15CAN_MCP2515plus16configTerminatorEii>
    102e:	ab 96       	adiw	r28, 0x2b	; 43
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
    1048:	cf 90       	pop	r12
    104a:	bf 90       	pop	r11
    104c:	af 90       	pop	r10
    104e:	9f 90       	pop	r9
    1050:	8f 90       	pop	r8
    1052:	7f 90       	pop	r7
    1054:	6f 90       	pop	r6
    1056:	08 95       	ret

00001058 <loop>:
    1058:	80 ea       	ldi	r24, 0xA0	; 160
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	0e 94 27 01 	call	0x24e	; 0x24e <_ZN11CAN_MCP25159availableEv>
    1060:	81 11       	cpse	r24, r1
    1062:	0e 94 98 06 	call	0xd30	; 0xd30 <_Z14processRXFramev>
    1066:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <config_request>
    106a:	88 23       	and	r24, r24
    106c:	41 f0       	breq	.+16     	; 0x107e <loop+0x26>
    106e:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <config_request>
    1072:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <config_index>
    1076:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <config_index+0x1>
    107a:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <_Z10sendConfigi>
    107e:	08 95       	ret

00001080 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    1080:	08 95       	ret

00001082 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1082:	1f 92       	push	r1
    1084:	0f 92       	push	r0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	0f 92       	push	r0
    108a:	11 24       	eor	r1, r1
    108c:	2f 93       	push	r18
    108e:	3f 93       	push	r19
    1090:	4f 93       	push	r20
    1092:	5f 93       	push	r21
    1094:	6f 93       	push	r22
    1096:	7f 93       	push	r23
    1098:	8f 93       	push	r24
    109a:	9f 93       	push	r25
    109c:	af 93       	push	r26
    109e:	bf 93       	push	r27
    10a0:	ef 93       	push	r30
    10a2:	ff 93       	push	r31
    10a4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    10a8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    10ac:	09 95       	icall
    10ae:	ff 91       	pop	r31
    10b0:	ef 91       	pop	r30
    10b2:	bf 91       	pop	r27
    10b4:	af 91       	pop	r26
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	7f 91       	pop	r23
    10bc:	6f 91       	pop	r22
    10be:	5f 91       	pop	r21
    10c0:	4f 91       	pop	r20
    10c2:	3f 91       	pop	r19
    10c4:	2f 91       	pop	r18
    10c6:	0f 90       	pop	r0
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	0f 90       	pop	r0
    10cc:	1f 90       	pop	r1
    10ce:	18 95       	reti

000010d0 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	2f 93       	push	r18
    10dc:	3f 93       	push	r19
    10de:	4f 93       	push	r20
    10e0:	5f 93       	push	r21
    10e2:	6f 93       	push	r22
    10e4:	7f 93       	push	r23
    10e6:	8f 93       	push	r24
    10e8:	9f 93       	push	r25
    10ea:	af 93       	push	r26
    10ec:	bf 93       	push	r27
    10ee:	ef 93       	push	r30
    10f0:	ff 93       	push	r31
    10f2:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
    10f6:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
    10fa:	09 95       	icall
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	7f 91       	pop	r23
    110a:	6f 91       	pop	r22
    110c:	5f 91       	pop	r21
    110e:	4f 91       	pop	r20
    1110:	3f 91       	pop	r19
    1112:	2f 91       	pop	r18
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    111e:	1f 92       	push	r1
    1120:	0f 92       	push	r0
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	0f 92       	push	r0
    1126:	11 24       	eor	r1, r1
    1128:	2f 93       	push	r18
    112a:	3f 93       	push	r19
    112c:	8f 93       	push	r24
    112e:	9f 93       	push	r25
    1130:	af 93       	push	r26
    1132:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1134:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <timer0_millis>
    1138:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <timer0_millis+0x1>
    113c:	a0 91 eb 01 	lds	r26, 0x01EB	; 0x8001eb <timer0_millis+0x2>
    1140:	b0 91 ec 01 	lds	r27, 0x01EC	; 0x8001ec <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1144:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1148:	23 e0       	ldi	r18, 0x03	; 3
    114a:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    114c:	2d 37       	cpi	r18, 0x7D	; 125
    114e:	20 f4       	brcc	.+8      	; 0x1158 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	a1 1d       	adc	r26, r1
    1154:	b1 1d       	adc	r27, r1
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1158:	26 e8       	ldi	r18, 0x86	; 134
    115a:	23 0f       	add	r18, r19
		m += 1;
    115c:	02 96       	adiw	r24, 0x02	; 2
    115e:	a1 1d       	adc	r26, r1
    1160:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1162:	20 93 e8 01 	sts	0x01E8, r18	; 0x8001e8 <timer0_fract>
	timer0_millis = m;
    1166:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <timer0_millis>
    116a:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <timer0_millis+0x1>
    116e:	a0 93 eb 01 	sts	0x01EB, r26	; 0x8001eb <timer0_millis+0x2>
    1172:	b0 93 ec 01 	sts	0x01EC, r27	; 0x8001ec <timer0_millis+0x3>
	timer0_overflow_count++;
    1176:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <timer0_overflow_count>
    117a:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <timer0_overflow_count+0x1>
    117e:	a0 91 ef 01 	lds	r26, 0x01EF	; 0x8001ef <timer0_overflow_count+0x2>
    1182:	b0 91 f0 01 	lds	r27, 0x01F0	; 0x8001f0 <timer0_overflow_count+0x3>
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	a1 1d       	adc	r26, r1
    118a:	b1 1d       	adc	r27, r1
    118c:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <timer0_overflow_count>
    1190:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <timer0_overflow_count+0x1>
    1194:	a0 93 ef 01 	sts	0x01EF, r26	; 0x8001ef <timer0_overflow_count+0x2>
    1198:	b0 93 f0 01 	sts	0x01F0, r27	; 0x8001f0 <timer0_overflow_count+0x3>
}
    119c:	bf 91       	pop	r27
    119e:	af 91       	pop	r26
    11a0:	9f 91       	pop	r25
    11a2:	8f 91       	pop	r24
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    11b2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    11b4:	f8 94       	cli
	m = timer0_overflow_count;
    11b6:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <timer0_overflow_count>
    11ba:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <timer0_overflow_count+0x1>
    11be:	a0 91 ef 01 	lds	r26, 0x01EF	; 0x8001ef <timer0_overflow_count+0x2>
    11c2:	b0 91 f0 01 	lds	r27, 0x01F0	; 0x8001f0 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    11c6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    11c8:	a8 9b       	sbis	0x15, 0	; 21
    11ca:	05 c0       	rjmp	.+10     	; 0x11d6 <micros+0x24>
    11cc:	2f 3f       	cpi	r18, 0xFF	; 255
    11ce:	19 f0       	breq	.+6      	; 0x11d6 <micros+0x24>
		m++;
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	a1 1d       	adc	r26, r1
    11d4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    11d6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    11d8:	66 27       	eor	r22, r22
    11da:	78 2f       	mov	r23, r24
    11dc:	89 2f       	mov	r24, r25
    11de:	9a 2f       	mov	r25, r26
    11e0:	62 0f       	add	r22, r18
    11e2:	71 1d       	adc	r23, r1
    11e4:	81 1d       	adc	r24, r1
    11e6:	91 1d       	adc	r25, r1
    11e8:	42 e0       	ldi	r20, 0x02	; 2
    11ea:	66 0f       	add	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	4a 95       	dec	r20
    11f4:	d1 f7       	brne	.-12     	; 0x11ea <micros+0x38>
}
    11f6:	08 95       	ret

000011f8 <delay>:

void delay(unsigned long ms)
{
    11f8:	8f 92       	push	r8
    11fa:	9f 92       	push	r9
    11fc:	af 92       	push	r10
    11fe:	bf 92       	push	r11
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	6b 01       	movw	r12, r22
    120a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    120c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <micros>
    1210:	4b 01       	movw	r8, r22
    1212:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1214:	c1 14       	cp	r12, r1
    1216:	d1 04       	cpc	r13, r1
    1218:	e1 04       	cpc	r14, r1
    121a:	f1 04       	cpc	r15, r1
    121c:	f1 f0       	breq	.+60     	; 0x125a <delay+0x62>
		yield();
    121e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1222:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <micros>
    1226:	68 19       	sub	r22, r8
    1228:	79 09       	sbc	r23, r9
    122a:	8a 09       	sbc	r24, r10
    122c:	9b 09       	sbc	r25, r11
    122e:	68 3e       	cpi	r22, 0xE8	; 232
    1230:	73 40       	sbci	r23, 0x03	; 3
    1232:	81 05       	cpc	r24, r1
    1234:	91 05       	cpc	r25, r1
    1236:	70 f3       	brcs	.-36     	; 0x1214 <delay+0x1c>
			ms--;
    1238:	21 e0       	ldi	r18, 0x01	; 1
    123a:	c2 1a       	sub	r12, r18
    123c:	d1 08       	sbc	r13, r1
    123e:	e1 08       	sbc	r14, r1
    1240:	f1 08       	sbc	r15, r1
			start += 1000;
    1242:	88 ee       	ldi	r24, 0xE8	; 232
    1244:	88 0e       	add	r8, r24
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	98 1e       	adc	r9, r24
    124a:	a1 1c       	adc	r10, r1
    124c:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    124e:	c1 14       	cp	r12, r1
    1250:	d1 04       	cpc	r13, r1
    1252:	e1 04       	cpc	r14, r1
    1254:	f1 04       	cpc	r15, r1
    1256:	29 f7       	brne	.-54     	; 0x1222 <delay+0x2a>
    1258:	dd cf       	rjmp	.-70     	; 0x1214 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	df 90       	pop	r13
    1260:	cf 90       	pop	r12
    1262:	bf 90       	pop	r11
    1264:	af 90       	pop	r10
    1266:	9f 90       	pop	r9
    1268:	8f 90       	pop	r8
    126a:	08 95       	ret

0000126c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    126c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    126e:	84 b5       	in	r24, 0x24	; 36
    1270:	82 60       	ori	r24, 0x02	; 2
    1272:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1274:	84 b5       	in	r24, 0x24	; 36
    1276:	81 60       	ori	r24, 0x01	; 1
    1278:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    127a:	85 b5       	in	r24, 0x25	; 37
    127c:	82 60       	ori	r24, 0x02	; 2
    127e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1280:	85 b5       	in	r24, 0x25	; 37
    1282:	81 60       	ori	r24, 0x01	; 1
    1284:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1286:	ee e6       	ldi	r30, 0x6E	; 110
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	81 60       	ori	r24, 0x01	; 1
    128e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1290:	e1 e8       	ldi	r30, 0x81	; 129
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1296:	80 81       	ld	r24, Z
    1298:	82 60       	ori	r24, 0x02	; 2
    129a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    129c:	80 81       	ld	r24, Z
    129e:	81 60       	ori	r24, 0x01	; 1
    12a0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    12a2:	e0 e8       	ldi	r30, 0x80	; 128
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	81 60       	ori	r24, 0x01	; 1
    12aa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    12ac:	e1 eb       	ldi	r30, 0xB1	; 177
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	84 60       	ori	r24, 0x04	; 4
    12b4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    12b6:	e0 eb       	ldi	r30, 0xB0	; 176
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	81 60       	ori	r24, 0x01	; 1
    12be:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    12c0:	ea e7       	ldi	r30, 0x7A	; 122
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	84 60       	ori	r24, 0x04	; 4
    12c8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    12ca:	80 81       	ld	r24, Z
    12cc:	82 60       	ori	r24, 0x02	; 2
    12ce:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    12d0:	80 81       	ld	r24, Z
    12d2:	81 60       	ori	r24, 0x01	; 1
    12d4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    12d6:	80 81       	ld	r24, Z
    12d8:	80 68       	ori	r24, 0x80	; 128
    12da:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    12dc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    12e0:	08 95       	ret

000012e2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	81 f0       	breq	.+32     	; 0x1306 <turnOffPWM+0x24>
    12e6:	28 f4       	brcc	.+10     	; 0x12f2 <turnOffPWM+0x10>
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	99 f0       	breq	.+38     	; 0x1312 <turnOffPWM+0x30>
    12ec:	82 30       	cpi	r24, 0x02	; 2
    12ee:	a1 f0       	breq	.+40     	; 0x1318 <turnOffPWM+0x36>
    12f0:	08 95       	ret
    12f2:	87 30       	cpi	r24, 0x07	; 7
    12f4:	a9 f0       	breq	.+42     	; 0x1320 <turnOffPWM+0x3e>
    12f6:	88 30       	cpi	r24, 0x08	; 8
    12f8:	b9 f0       	breq	.+46     	; 0x1328 <turnOffPWM+0x46>
    12fa:	84 30       	cpi	r24, 0x04	; 4
    12fc:	d1 f4       	brne	.+52     	; 0x1332 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    12fe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1302:	8f 7d       	andi	r24, 0xDF	; 223
    1304:	03 c0       	rjmp	.+6      	; 0x130c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1306:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    130a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    130c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1310:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1312:	84 b5       	in	r24, 0x24	; 36
    1314:	8f 77       	andi	r24, 0x7F	; 127
    1316:	02 c0       	rjmp	.+4      	; 0x131c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1318:	84 b5       	in	r24, 0x24	; 36
    131a:	8f 7d       	andi	r24, 0xDF	; 223
    131c:	84 bd       	out	0x24, r24	; 36
    131e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1320:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1324:	8f 77       	andi	r24, 0x7F	; 127
    1326:	03 c0       	rjmp	.+6      	; 0x132e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1328:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    132c:	8f 7d       	andi	r24, 0xDF	; 223
    132e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1332:	08 95       	ret

00001334 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	fc 01       	movw	r30, r24
    133c:	e4 58       	subi	r30, 0x84	; 132
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1342:	fc 01       	movw	r30, r24
    1344:	e0 57       	subi	r30, 0x70	; 112
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    134a:	88 23       	and	r24, r24
    134c:	49 f1       	breq	.+82     	; 0x13a0 <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	fc 01       	movw	r30, r24
    1356:	e2 55       	subi	r30, 0x52	; 82
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	a5 91       	lpm	r26, Z+
    135c:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    135e:	8c 55       	subi	r24, 0x5C	; 92
    1360:	9f 4f       	sbci	r25, 0xFF	; 255
    1362:	fc 01       	movw	r30, r24
    1364:	c5 91       	lpm	r28, Z+
    1366:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    1368:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
    136a:	61 11       	cpse	r22, r1
    136c:	08 c0       	rjmp	.+16     	; 0x137e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
    136e:	f8 94       	cli
		*reg &= ~bit;
    1370:	8c 91       	ld	r24, X
    1372:	20 95       	com	r18
    1374:	82 23       	and	r24, r18
    1376:	8c 93       	st	X, r24
		*out &= ~bit;
    1378:	88 81       	ld	r24, Y
    137a:	82 23       	and	r24, r18
    137c:	0a c0       	rjmp	.+20     	; 0x1392 <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    137e:	62 30       	cpi	r22, 0x02	; 2
    1380:	51 f4       	brne	.+20     	; 0x1396 <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
    1382:	f8 94       	cli
		*reg &= ~bit;
    1384:	8c 91       	ld	r24, X
    1386:	32 2f       	mov	r19, r18
    1388:	30 95       	com	r19
    138a:	83 23       	and	r24, r19
    138c:	8c 93       	st	X, r24
		*out |= bit;
    138e:	88 81       	ld	r24, Y
    1390:	82 2b       	or	r24, r18
    1392:	88 83       	st	Y, r24
    1394:	04 c0       	rjmp	.+8      	; 0x139e <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
    1396:	f8 94       	cli
		*reg |= bit;
    1398:	8c 91       	ld	r24, X
    139a:	82 2b       	or	r24, r18
    139c:	8c 93       	st	X, r24
		SREG = oldSREG;
    139e:	9f bf       	out	0x3f, r25	; 63
	}
}
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	1f 92       	push	r1
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	f9 01       	movw	r30, r18
    13ba:	e8 59       	subi	r30, 0x98	; 152
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    13c0:	f9 01       	movw	r30, r18
    13c2:	e4 58       	subi	r30, 0x84	; 132
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    13c8:	f9 01       	movw	r30, r18
    13ca:	e0 57       	subi	r30, 0x70	; 112
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    13d0:	00 23       	and	r16, r16
    13d2:	c9 f0       	breq	.+50     	; 0x1406 <digitalWrite+0x60>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    13d4:	88 23       	and	r24, r24
    13d6:	21 f0       	breq	.+8      	; 0x13e0 <digitalWrite+0x3a>
    13d8:	69 83       	std	Y+1, r22	; 0x01
    13da:	0e 94 71 09 	call	0x12e2	; 0x12e2 <turnOffPWM>
    13de:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    13e0:	e0 2f       	mov	r30, r16
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	ee 0f       	add	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	ec 55       	subi	r30, 0x5C	; 92
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	a5 91       	lpm	r26, Z+
    13ee:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    13f0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    13f2:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    13f4:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    13f6:	61 11       	cpse	r22, r1
    13f8:	03 c0       	rjmp	.+6      	; 0x1400 <digitalWrite+0x5a>
		*out &= ~bit;
    13fa:	10 95       	com	r17
    13fc:	81 23       	and	r24, r17
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <digitalWrite+0x5c>
	} else {
		*out |= bit;
    1400:	81 2b       	or	r24, r17
    1402:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1404:	9f bf       	out	0x3f, r25	; 63
}
    1406:	0f 90       	pop	r0
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	08 95       	ret

00001412 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1412:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1414:	81 8d       	ldd	r24, Z+25	; 0x19
    1416:	22 8d       	ldd	r18, Z+26	; 0x1a
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	80 5c       	subi	r24, 0xC0	; 192
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	82 1b       	sub	r24, r18
    1420:	91 09       	sbc	r25, r1
}
    1422:	8f 73       	andi	r24, 0x3F	; 63
    1424:	99 27       	eor	r25, r25
    1426:	08 95       	ret

00001428 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1428:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    142a:	91 8d       	ldd	r25, Z+25	; 0x19
    142c:	82 8d       	ldd	r24, Z+26	; 0x1a
    142e:	98 17       	cp	r25, r24
    1430:	31 f0       	breq	.+12     	; 0x143e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1432:	82 8d       	ldd	r24, Z+26	; 0x1a
    1434:	e8 0f       	add	r30, r24
    1436:	f1 1d       	adc	r31, r1
    1438:	85 8d       	ldd	r24, Z+29	; 0x1d
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1442:	08 95       	ret

00001444 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1444:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1446:	91 8d       	ldd	r25, Z+25	; 0x19
    1448:	82 8d       	ldd	r24, Z+26	; 0x1a
    144a:	98 17       	cp	r25, r24
    144c:	61 f0       	breq	.+24     	; 0x1466 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    144e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1450:	df 01       	movw	r26, r30
    1452:	a8 0f       	add	r26, r24
    1454:	b1 1d       	adc	r27, r1
    1456:	5d 96       	adiw	r26, 0x1d	; 29
    1458:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    145a:	92 8d       	ldd	r25, Z+26	; 0x1a
    145c:	9f 5f       	subi	r25, 0xFF	; 255
    145e:	9f 73       	andi	r25, 0x3F	; 63
    1460:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    146a:	08 95       	ret

0000146c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    146c:	86 ea       	ldi	r24, 0xA6	; 166
    146e:	9b e0       	ldi	r25, 0x0B	; 11
    1470:	89 2b       	or	r24, r25
    1472:	49 f0       	breq	.+18     	; 0x1486 <_Z14serialEventRunv+0x1a>
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	89 2b       	or	r24, r25
    147a:	29 f0       	breq	.+10     	; 0x1486 <_Z14serialEventRunv+0x1a>
    147c:	0e 94 a6 0b 	call	0x174c	; 0x174c <_Z17Serial0_availablev>
    1480:	81 11       	cpse	r24, r1
    1482:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1486:	08 95       	ret

00001488 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1488:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    148a:	84 8d       	ldd	r24, Z+28	; 0x1c
    148c:	df 01       	movw	r26, r30
    148e:	a8 0f       	add	r26, r24
    1490:	b1 1d       	adc	r27, r1
    1492:	a3 5a       	subi	r26, 0xA3	; 163
    1494:	bf 4f       	sbci	r27, 0xFF	; 255
    1496:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1498:	84 8d       	ldd	r24, Z+28	; 0x1c
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	8f 73       	andi	r24, 0x3F	; 63
    14a0:	99 27       	eor	r25, r25
    14a2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    14a4:	a6 89       	ldd	r26, Z+22	; 0x16
    14a6:	b7 89       	ldd	r27, Z+23	; 0x17
    14a8:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    14aa:	a0 89       	ldd	r26, Z+16	; 0x10
    14ac:	b1 89       	ldd	r27, Z+17	; 0x11
    14ae:	8c 91       	ld	r24, X
    14b0:	80 64       	ori	r24, 0x40	; 64
    14b2:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    14b4:	93 8d       	ldd	r25, Z+27	; 0x1b
    14b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    14b8:	98 13       	cpse	r25, r24
    14ba:	06 c0       	rjmp	.+12     	; 0x14c8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    14bc:	02 88       	ldd	r0, Z+18	; 0x12
    14be:	f3 89       	ldd	r31, Z+19	; 0x13
    14c0:	e0 2d       	mov	r30, r0
    14c2:	80 81       	ld	r24, Z
    14c4:	8f 7d       	andi	r24, 0xDF	; 223
    14c6:	80 83       	st	Z, r24
    14c8:	08 95       	ret

000014ca <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    14d0:	88 8d       	ldd	r24, Y+24	; 0x18
    14d2:	88 23       	and	r24, r24
    14d4:	c9 f0       	breq	.+50     	; 0x1508 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    14d6:	ea 89       	ldd	r30, Y+18	; 0x12
    14d8:	fb 89       	ldd	r31, Y+19	; 0x13
    14da:	80 81       	ld	r24, Z
    14dc:	85 fd       	sbrc	r24, 5
    14de:	05 c0       	rjmp	.+10     	; 0x14ea <_ZN14HardwareSerial5flushEv+0x20>
    14e0:	a8 89       	ldd	r26, Y+16	; 0x10
    14e2:	b9 89       	ldd	r27, Y+17	; 0x11
    14e4:	8c 91       	ld	r24, X
    14e6:	86 fd       	sbrc	r24, 6
    14e8:	0f c0       	rjmp	.+30     	; 0x1508 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	07 fc       	sbrc	r0, 7
    14ee:	f5 cf       	rjmp	.-22     	; 0x14da <_ZN14HardwareSerial5flushEv+0x10>
    14f0:	80 81       	ld	r24, Z
    14f2:	85 ff       	sbrs	r24, 5
    14f4:	f2 cf       	rjmp	.-28     	; 0x14da <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    14f6:	a8 89       	ldd	r26, Y+16	; 0x10
    14f8:	b9 89       	ldd	r27, Y+17	; 0x11
    14fa:	8c 91       	ld	r24, X
    14fc:	85 ff       	sbrs	r24, 5
    14fe:	ed cf       	rjmp	.-38     	; 0x14da <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1500:	ce 01       	movw	r24, r28
    1502:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1506:	e7 cf       	rjmp	.-50     	; 0x14d6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	08 95       	ret

0000150e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    150e:	cf 92       	push	r12
    1510:	df 92       	push	r13
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	1f 92       	push	r1
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	6c 01       	movw	r12, r24
  _written = true;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	d6 01       	movw	r26, r12
    1528:	58 96       	adiw	r26, 0x18	; 24
    152a:	8c 93       	st	X, r24
    152c:	58 97       	sbiw	r26, 0x18	; 24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    152e:	5b 96       	adiw	r26, 0x1b	; 27
    1530:	9c 91       	ld	r25, X
    1532:	5b 97       	sbiw	r26, 0x1b	; 27
    1534:	5c 96       	adiw	r26, 0x1c	; 28
    1536:	8c 91       	ld	r24, X
    1538:	5c 97       	sbiw	r26, 0x1c	; 28
    153a:	98 13       	cpse	r25, r24
    153c:	07 c0       	rjmp	.+14     	; 0x154c <_ZN14HardwareSerial5writeEh+0x3e>
    153e:	50 96       	adiw	r26, 0x10	; 16
    1540:	ed 91       	ld	r30, X+
    1542:	fc 91       	ld	r31, X
    1544:	51 97       	sbiw	r26, 0x11	; 17
    1546:	80 81       	ld	r24, Z
    1548:	85 fd       	sbrc	r24, 5
    154a:	2e c0       	rjmp	.+92     	; 0x15a8 <_ZN14HardwareSerial5writeEh+0x9a>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    154c:	f6 01       	movw	r30, r12
    154e:	03 8d       	ldd	r16, Z+27	; 0x1b
    1550:	10 e0       	ldi	r17, 0x00	; 0
    1552:	0f 5f       	subi	r16, 0xFF	; 255
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
    1556:	0f 73       	andi	r16, 0x3F	; 63
    1558:	11 27       	eor	r17, r17
    155a:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    155c:	f6 01       	movw	r30, r12
    155e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1560:	f8 12       	cpse	r15, r24
    1562:	11 c0       	rjmp	.+34     	; 0x1586 <_ZN14HardwareSerial5writeEh+0x78>
    if (bit_is_clear(SREG, SREG_I)) {
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	07 fc       	sbrc	r0, 7
    1568:	f9 cf       	rjmp	.-14     	; 0x155c <_ZN14HardwareSerial5writeEh+0x4e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    156a:	d6 01       	movw	r26, r12
    156c:	50 96       	adiw	r26, 0x10	; 16
    156e:	ed 91       	ld	r30, X+
    1570:	fc 91       	ld	r31, X
    1572:	51 97       	sbiw	r26, 0x11	; 17
    1574:	80 81       	ld	r24, Z
    1576:	85 ff       	sbrs	r24, 5
    1578:	f1 cf       	rjmp	.-30     	; 0x155c <_ZN14HardwareSerial5writeEh+0x4e>
	_tx_udr_empty_irq();
    157a:	c6 01       	movw	r24, r12
    157c:	69 83       	std	Y+1, r22	; 0x01
    157e:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1582:	69 81       	ldd	r22, Y+1	; 0x01
    1584:	eb cf       	rjmp	.-42     	; 0x155c <_ZN14HardwareSerial5writeEh+0x4e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1586:	83 8d       	ldd	r24, Z+27	; 0x1b
    1588:	e8 0f       	add	r30, r24
    158a:	f1 1d       	adc	r31, r1
    158c:	e3 5a       	subi	r30, 0xA3	; 163
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	60 83       	st	Z, r22
  _tx_buffer_head = i;
    1592:	d6 01       	movw	r26, r12
    1594:	5b 96       	adiw	r26, 0x1b	; 27
    1596:	0c 93       	st	X, r16
    1598:	5b 97       	sbiw	r26, 0x1b	; 27
	
  sbi(*_ucsrb, UDRIE0);
    159a:	52 96       	adiw	r26, 0x12	; 18
    159c:	ed 91       	ld	r30, X+
    159e:	fc 91       	ld	r31, X
    15a0:	53 97       	sbiw	r26, 0x13	; 19
    15a2:	80 81       	ld	r24, Z
    15a4:	80 62       	ori	r24, 0x20	; 32
    15a6:	0c c0       	rjmp	.+24     	; 0x15c0 <_ZN14HardwareSerial5writeEh+0xb2>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    15a8:	d6 01       	movw	r26, r12
    15aa:	56 96       	adiw	r26, 0x16	; 22
    15ac:	ed 91       	ld	r30, X+
    15ae:	fc 91       	ld	r31, X
    15b0:	57 97       	sbiw	r26, 0x17	; 23
    15b2:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    15b4:	50 96       	adiw	r26, 0x10	; 16
    15b6:	ed 91       	ld	r30, X+
    15b8:	fc 91       	ld	r31, X
    15ba:	51 97       	sbiw	r26, 0x11	; 17
    15bc:	80 81       	ld	r24, Z
    15be:	80 64       	ori	r24, 0x40	; 64
    15c0:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0f 90       	pop	r0
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	ff 90       	pop	r15
    15d2:	df 90       	pop	r13
    15d4:	cf 90       	pop	r12
    15d6:	08 95       	ret

000015d8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    15d8:	bf 92       	push	r11
    15da:	cf 92       	push	r12
    15dc:	df 92       	push	r13
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	ec 01       	movw	r28, r24
    15e8:	6a 01       	movw	r12, r20
    15ea:	7b 01       	movw	r14, r22
    15ec:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    15ee:	e8 89       	ldd	r30, Y+16	; 0x10
    15f0:	f9 89       	ldd	r31, Y+17	; 0x11
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    15f6:	41 15       	cp	r20, r1
    15f8:	81 ee       	ldi	r24, 0xE1	; 225
    15fa:	58 07       	cpc	r21, r24
    15fc:	61 05       	cpc	r22, r1
    15fe:	71 05       	cpc	r23, r1
    1600:	a1 f0       	breq	.+40     	; 0x162a <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	79 e0       	ldi	r23, 0x09	; 9
    1606:	8d e3       	ldi	r24, 0x3D	; 61
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a7 01       	movw	r20, r14
    160c:	96 01       	movw	r18, r12
    160e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__udivmodsi4>
    1612:	21 50       	subi	r18, 0x01	; 1
    1614:	31 09       	sbc	r19, r1
    1616:	41 09       	sbc	r20, r1
    1618:	51 09       	sbc	r21, r1
    161a:	56 95       	lsr	r21
    161c:	47 95       	ror	r20
    161e:	37 95       	ror	r19
    1620:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1622:	21 15       	cp	r18, r1
    1624:	80 e1       	ldi	r24, 0x10	; 16
    1626:	38 07       	cpc	r19, r24
    1628:	98 f0       	brcs	.+38     	; 0x1650 <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
    162a:	e8 89       	ldd	r30, Y+16	; 0x10
    162c:	f9 89       	ldd	r31, Y+17	; 0x11
    162e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1630:	60 e8       	ldi	r22, 0x80	; 128
    1632:	74 e8       	ldi	r23, 0x84	; 132
    1634:	8e e1       	ldi	r24, 0x1E	; 30
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	a7 01       	movw	r20, r14
    163a:	96 01       	movw	r18, r12
    163c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__udivmodsi4>
    1640:	21 50       	subi	r18, 0x01	; 1
    1642:	31 09       	sbc	r19, r1
    1644:	41 09       	sbc	r20, r1
    1646:	51 09       	sbc	r21, r1
    1648:	56 95       	lsr	r21
    164a:	47 95       	ror	r20
    164c:	37 95       	ror	r19
    164e:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1650:	ec 85       	ldd	r30, Y+12	; 0x0c
    1652:	fd 85       	ldd	r31, Y+13	; 0x0d
    1654:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1656:	ee 85       	ldd	r30, Y+14	; 0x0e
    1658:	ff 85       	ldd	r31, Y+15	; 0x0f
    165a:	20 83       	st	Z, r18

  _written = false;
    165c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    165e:	ec 89       	ldd	r30, Y+20	; 0x14
    1660:	fd 89       	ldd	r31, Y+21	; 0x15
    1662:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    1664:	ea 89       	ldd	r30, Y+18	; 0x12
    1666:	fb 89       	ldd	r31, Y+19	; 0x13
    1668:	80 81       	ld	r24, Z
    166a:	80 61       	ori	r24, 0x10	; 16
    166c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    166e:	ea 89       	ldd	r30, Y+18	; 0x12
    1670:	fb 89       	ldd	r31, Y+19	; 0x13
    1672:	80 81       	ld	r24, Z
    1674:	88 60       	ori	r24, 0x08	; 8
    1676:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1678:	ea 89       	ldd	r30, Y+18	; 0x12
    167a:	fb 89       	ldd	r31, Y+19	; 0x13
    167c:	80 81       	ld	r24, Z
    167e:	80 68       	ori	r24, 0x80	; 128
    1680:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1682:	ea 89       	ldd	r30, Y+18	; 0x12
    1684:	fb 89       	ldd	r31, Y+19	; 0x13
    1686:	80 81       	ld	r24, Z
    1688:	8f 7d       	andi	r24, 0xDF	; 223
    168a:	80 83       	st	Z, r24
}
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	ff 90       	pop	r15
    1692:	ef 90       	pop	r14
    1694:	df 90       	pop	r13
    1696:	cf 90       	pop	r12
    1698:	bf 90       	pop	r11
    169a:	08 95       	ret

0000169c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    169c:	1f 92       	push	r1
    169e:	0f 92       	push	r0
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	0f 92       	push	r0
    16a4:	11 24       	eor	r1, r1
    16a6:	2f 93       	push	r18
    16a8:	8f 93       	push	r24
    16aa:	9f 93       	push	r25
    16ac:	ef 93       	push	r30
    16ae:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    16b0:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <Serial+0x10>
    16b4:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <Serial+0x11>
    16b8:	80 81       	ld	r24, Z
    16ba:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <Serial+0x16>
    16be:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <Serial+0x17>
    16c2:	82 fd       	sbrc	r24, 2
    16c4:	12 c0       	rjmp	.+36     	; 0x16ea <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    16c6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    16c8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Serial+0x19>
    16cc:	8f 5f       	subi	r24, 0xFF	; 255
    16ce:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    16d0:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <Serial+0x1a>
    16d4:	82 17       	cp	r24, r18
    16d6:	51 f0       	breq	.+20     	; 0x16ec <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    16d8:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <Serial+0x19>
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	ef 50       	subi	r30, 0x0F	; 15
    16e0:	fe 4f       	sbci	r31, 0xFE	; 254
    16e2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    16e4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Serial+0x19>
    16e8:	01 c0       	rjmp	.+2      	; 0x16ec <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    16ea:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	2f 91       	pop	r18
    16f6:	0f 90       	pop	r0
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	0f 90       	pop	r0
    16fc:	1f 90       	pop	r1
    16fe:	18 95       	reti

00001700 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1700:	1f 92       	push	r1
    1702:	0f 92       	push	r0
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	0f 92       	push	r0
    1708:	11 24       	eor	r1, r1
    170a:	2f 93       	push	r18
    170c:	3f 93       	push	r19
    170e:	4f 93       	push	r20
    1710:	5f 93       	push	r21
    1712:	6f 93       	push	r22
    1714:	7f 93       	push	r23
    1716:	8f 93       	push	r24
    1718:	9f 93       	push	r25
    171a:	af 93       	push	r26
    171c:	bf 93       	push	r27
    171e:	ef 93       	push	r30
    1720:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1722:	81 ef       	ldi	r24, 0xF1	; 241
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    172a:	ff 91       	pop	r31
    172c:	ef 91       	pop	r30
    172e:	bf 91       	pop	r27
    1730:	af 91       	pop	r26
    1732:	9f 91       	pop	r25
    1734:	8f 91       	pop	r24
    1736:	7f 91       	pop	r23
    1738:	6f 91       	pop	r22
    173a:	5f 91       	pop	r21
    173c:	4f 91       	pop	r20
    173e:	3f 91       	pop	r19
    1740:	2f 91       	pop	r18
    1742:	0f 90       	pop	r0
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	0f 90       	pop	r0
    1748:	1f 90       	pop	r1
    174a:	18 95       	reti

0000174c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    174c:	81 ef       	ldi	r24, 0xF1	; 241
    174e:	91 e0       	ldi	r25, 0x01	; 1
    1750:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN14HardwareSerial9availableEv>
    1754:	21 e0       	ldi	r18, 0x01	; 1
    1756:	89 2b       	or	r24, r25
    1758:	09 f4       	brne	.+2      	; 0x175c <_Z17Serial0_availablev+0x10>
    175a:	20 e0       	ldi	r18, 0x00	; 0
}
    175c:	82 2f       	mov	r24, r18
    175e:	08 95       	ret

00001760 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1760:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <Serial+0x3>
    1764:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <Serial+0x2>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1768:	88 ee       	ldi	r24, 0xE8	; 232
    176a:	93 e0       	ldi	r25, 0x03	; 3
    176c:	a0 e0       	ldi	r26, 0x00	; 0
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <Serial+0x4>
    1774:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <Serial+0x5>
    1778:	a0 93 f7 01 	sts	0x01F7, r26	; 0x8001f7 <Serial+0x6>
    177c:	b0 93 f8 01 	sts	0x01F8, r27	; 0x8001f8 <Serial+0x7>
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1780:	82 e8       	ldi	r24, 0x82	; 130
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <Serial+0x1>
    1788:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <Serial>
    178c:	85 ec       	ldi	r24, 0xC5	; 197
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <Serial+0xd>
    1794:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <Serial+0xc>
    1798:	84 ec       	ldi	r24, 0xC4	; 196
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <Serial+0xf>
    17a0:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <Serial+0xe>
    17a4:	80 ec       	ldi	r24, 0xC0	; 192
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <Serial+0x11>
    17ac:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <Serial+0x10>
    17b0:	81 ec       	ldi	r24, 0xC1	; 193
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <Serial+0x13>
    17b8:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <Serial+0x12>
    17bc:	82 ec       	ldi	r24, 0xC2	; 194
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <Serial+0x15>
    17c4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <Serial+0x14>
    17c8:	86 ec       	ldi	r24, 0xC6	; 198
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <Serial+0x17>
    17d0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Serial+0x16>
    17d4:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <Serial+0x19>
    17d8:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <Serial+0x1a>
    17dc:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <Serial+0x1b>
    17e0:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <Serial+0x1c>
    17e4:	08 95       	ret

000017e6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	7c 01       	movw	r14, r24
    17f8:	6a 01       	movw	r12, r20
    17fa:	eb 01       	movw	r28, r22
  size_t n = 0;
    17fc:	00 e0       	ldi	r16, 0x00	; 0
    17fe:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    1800:	0c 15       	cp	r16, r12
    1802:	1d 05       	cpc	r17, r13
    1804:	71 f0       	breq	.+28     	; 0x1822 <_ZN5Print5writeEPKhj+0x3c>
    if (write(*buffer++)) n++;
    1806:	69 91       	ld	r22, Y+
    1808:	d7 01       	movw	r26, r14
    180a:	ed 91       	ld	r30, X+
    180c:	fc 91       	ld	r31, X
    180e:	01 90       	ld	r0, Z+
    1810:	f0 81       	ld	r31, Z
    1812:	e0 2d       	mov	r30, r0
    1814:	c7 01       	movw	r24, r14
    1816:	09 95       	icall
    1818:	89 2b       	or	r24, r25
    181a:	19 f0       	breq	.+6      	; 0x1822 <_ZN5Print5writeEPKhj+0x3c>
    181c:	0f 5f       	subi	r16, 0xFF	; 255
    181e:	1f 4f       	sbci	r17, 0xFF	; 255
    1820:	ef cf       	rjmp	.-34     	; 0x1800 <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
    1822:	c8 01       	movw	r24, r16
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	df 90       	pop	r13
    1832:	cf 90       	pop	r12
    1834:	08 95       	ret

00001836 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1836:	61 15       	cp	r22, r1
    1838:	71 05       	cpc	r23, r1
    183a:	81 f0       	breq	.+32     	; 0x185c <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
    183c:	db 01       	movw	r26, r22
    183e:	0d 90       	ld	r0, X+
    1840:	00 20       	and	r0, r0
    1842:	e9 f7       	brne	.-6      	; 0x183e <_ZN5Print5writeEPKc+0x8>
    1844:	ad 01       	movw	r20, r26
    1846:	41 50       	subi	r20, 0x01	; 1
    1848:	51 09       	sbc	r21, r1
    184a:	46 1b       	sub	r20, r22
    184c:	57 0b       	sbc	r21, r23
    184e:	dc 01       	movw	r26, r24
    1850:	ed 91       	ld	r30, X+
    1852:	fc 91       	ld	r31, X
    1854:	02 80       	ldd	r0, Z+2	; 0x02
    1856:	f3 81       	ldd	r31, Z+3	; 0x03
    1858:	e0 2d       	mov	r30, r0
    185a:	09 94       	ijmp
    }
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	08 95       	ret

00001862 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1862:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <_ZN5Print5writeEPKc>

00001866 <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
    1866:	6e e8       	ldi	r22, 0x8E	; 142
    1868:	71 e0       	ldi	r23, 0x01	; 1
    186a:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <_ZN5Print5writeEPKc>

0000186e <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1878:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN5Print5writeEPKc>
    187c:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    187e:	ce 01       	movw	r24, r28
    1880:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN5Print7printlnEv>
  return n;
}
    1884:	80 0f       	add	r24, r16
    1886:	91 1f       	adc	r25, r17
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	08 95       	ret

00001892 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1892:	08 95       	ret

00001894 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1894:	0e 94 36 09 	call	0x126c	; 0x126c <init>

	initVariant();
    1898:	0e 94 49 0c 	call	0x1892	; 0x1892 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    189c:	0e 94 47 05 	call	0xa8e	; 0xa8e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    18a0:	c6 e3       	ldi	r28, 0x36	; 54
    18a2:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    18a4:	0e 94 2c 08 	call	0x1058	; 0x1058 <loop>
		if (serialEventRun) serialEventRun();
    18a8:	20 97       	sbiw	r28, 0x00	; 0
    18aa:	e1 f3       	breq	.-8      	; 0x18a4 <main+0x10>
    18ac:	0e 94 36 0a 	call	0x146c	; 0x146c <_Z14serialEventRunv>
    18b0:	f9 cf       	rjmp	.-14     	; 0x18a4 <main+0x10>

000018b2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    18b2:	08 95       	ret

000018b4 <__divmodhi4>:
    18b4:	97 fb       	bst	r25, 7
    18b6:	07 2e       	mov	r0, r23
    18b8:	16 f4       	brtc	.+4      	; 0x18be <__divmodhi4+0xa>
    18ba:	00 94       	com	r0
    18bc:	07 d0       	rcall	.+14     	; 0x18cc <__divmodhi4_neg1>
    18be:	77 fd       	sbrc	r23, 7
    18c0:	09 d0       	rcall	.+18     	; 0x18d4 <__divmodhi4_neg2>
    18c2:	0e 94 90 0c 	call	0x1920	; 0x1920 <__udivmodhi4>
    18c6:	07 fc       	sbrc	r0, 7
    18c8:	05 d0       	rcall	.+10     	; 0x18d4 <__divmodhi4_neg2>
    18ca:	3e f4       	brtc	.+14     	; 0x18da <__divmodhi4_exit>

000018cc <__divmodhi4_neg1>:
    18cc:	90 95       	com	r25
    18ce:	81 95       	neg	r24
    18d0:	9f 4f       	sbci	r25, 0xFF	; 255
    18d2:	08 95       	ret

000018d4 <__divmodhi4_neg2>:
    18d4:	70 95       	com	r23
    18d6:	61 95       	neg	r22
    18d8:	7f 4f       	sbci	r23, 0xFF	; 255

000018da <__divmodhi4_exit>:
    18da:	08 95       	ret

000018dc <__udivmodsi4>:
    18dc:	a1 e2       	ldi	r26, 0x21	; 33
    18de:	1a 2e       	mov	r1, r26
    18e0:	aa 1b       	sub	r26, r26
    18e2:	bb 1b       	sub	r27, r27
    18e4:	fd 01       	movw	r30, r26
    18e6:	0d c0       	rjmp	.+26     	; 0x1902 <__udivmodsi4_ep>

000018e8 <__udivmodsi4_loop>:
    18e8:	aa 1f       	adc	r26, r26
    18ea:	bb 1f       	adc	r27, r27
    18ec:	ee 1f       	adc	r30, r30
    18ee:	ff 1f       	adc	r31, r31
    18f0:	a2 17       	cp	r26, r18
    18f2:	b3 07       	cpc	r27, r19
    18f4:	e4 07       	cpc	r30, r20
    18f6:	f5 07       	cpc	r31, r21
    18f8:	20 f0       	brcs	.+8      	; 0x1902 <__udivmodsi4_ep>
    18fa:	a2 1b       	sub	r26, r18
    18fc:	b3 0b       	sbc	r27, r19
    18fe:	e4 0b       	sbc	r30, r20
    1900:	f5 0b       	sbc	r31, r21

00001902 <__udivmodsi4_ep>:
    1902:	66 1f       	adc	r22, r22
    1904:	77 1f       	adc	r23, r23
    1906:	88 1f       	adc	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	1a 94       	dec	r1
    190c:	69 f7       	brne	.-38     	; 0x18e8 <__udivmodsi4_loop>
    190e:	60 95       	com	r22
    1910:	70 95       	com	r23
    1912:	80 95       	com	r24
    1914:	90 95       	com	r25
    1916:	9b 01       	movw	r18, r22
    1918:	ac 01       	movw	r20, r24
    191a:	bd 01       	movw	r22, r26
    191c:	cf 01       	movw	r24, r30
    191e:	08 95       	ret

00001920 <__udivmodhi4>:
    1920:	aa 1b       	sub	r26, r26
    1922:	bb 1b       	sub	r27, r27
    1924:	51 e1       	ldi	r21, 0x11	; 17
    1926:	07 c0       	rjmp	.+14     	; 0x1936 <__udivmodhi4_ep>

00001928 <__udivmodhi4_loop>:
    1928:	aa 1f       	adc	r26, r26
    192a:	bb 1f       	adc	r27, r27
    192c:	a6 17       	cp	r26, r22
    192e:	b7 07       	cpc	r27, r23
    1930:	10 f0       	brcs	.+4      	; 0x1936 <__udivmodhi4_ep>
    1932:	a6 1b       	sub	r26, r22
    1934:	b7 0b       	sbc	r27, r23

00001936 <__udivmodhi4_ep>:
    1936:	88 1f       	adc	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	5a 95       	dec	r21
    193c:	a9 f7       	brne	.-22     	; 0x1928 <__udivmodhi4_loop>
    193e:	80 95       	com	r24
    1940:	90 95       	com	r25
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	08 95       	ret

00001948 <__tablejump2__>:
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	05 90       	lpm	r0, Z+
    194e:	f4 91       	lpm	r31, Z
    1950:	e0 2d       	mov	r30, r0
    1952:	09 94       	ijmp

00001954 <sprintf>:
    1954:	ae e0       	ldi	r26, 0x0E	; 14
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e0 eb       	ldi	r30, 0xB0	; 176
    195a:	fc e0       	ldi	r31, 0x0C	; 12
    195c:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__prologue_saves__+0x1c>
    1960:	0d 89       	ldd	r16, Y+21	; 0x15
    1962:	1e 89       	ldd	r17, Y+22	; 0x16
    1964:	86 e0       	ldi	r24, 0x06	; 6
    1966:	8c 83       	std	Y+4, r24	; 0x04
    1968:	1a 83       	std	Y+2, r17	; 0x02
    196a:	09 83       	std	Y+1, r16	; 0x01
    196c:	8f ef       	ldi	r24, 0xFF	; 255
    196e:	9f e7       	ldi	r25, 0x7F	; 127
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
    1974:	ae 01       	movw	r20, r28
    1976:	47 5e       	subi	r20, 0xE7	; 231
    1978:	5f 4f       	sbci	r21, 0xFF	; 255
    197a:	6f 89       	ldd	r22, Y+23	; 0x17
    197c:	78 8d       	ldd	r23, Y+24	; 0x18
    197e:	ce 01       	movw	r24, r28
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	0e 94 cd 0c 	call	0x199a	; 0x199a <vfprintf>
    1986:	2f 81       	ldd	r18, Y+7	; 0x07
    1988:	38 85       	ldd	r19, Y+8	; 0x08
    198a:	f8 01       	movw	r30, r16
    198c:	e2 0f       	add	r30, r18
    198e:	f3 1f       	adc	r31, r19
    1990:	10 82       	st	Z, r1
    1992:	2e 96       	adiw	r28, 0x0e	; 14
    1994:	e4 e0       	ldi	r30, 0x04	; 4
    1996:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__epilogue_restores__+0x1c>

0000199a <vfprintf>:
    199a:	ac e0       	ldi	r26, 0x0C	; 12
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e3 ed       	ldi	r30, 0xD3	; 211
    19a0:	fc e0       	ldi	r31, 0x0C	; 12
    19a2:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__prologue_saves__>
    19a6:	7c 01       	movw	r14, r24
    19a8:	6b 01       	movw	r12, r22
    19aa:	8a 01       	movw	r16, r20
    19ac:	fc 01       	movw	r30, r24
    19ae:	17 82       	std	Z+7, r1	; 0x07
    19b0:	16 82       	std	Z+6, r1	; 0x06
    19b2:	83 81       	ldd	r24, Z+3	; 0x03
    19b4:	81 ff       	sbrs	r24, 1
    19b6:	bd c1       	rjmp	.+890    	; 0x1d32 <vfprintf+0x398>
    19b8:	ce 01       	movw	r24, r28
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	4c 01       	movw	r8, r24
    19be:	f7 01       	movw	r30, r14
    19c0:	93 81       	ldd	r25, Z+3	; 0x03
    19c2:	f6 01       	movw	r30, r12
    19c4:	93 fd       	sbrc	r25, 3
    19c6:	85 91       	lpm	r24, Z+
    19c8:	93 ff       	sbrs	r25, 3
    19ca:	81 91       	ld	r24, Z+
    19cc:	6f 01       	movw	r12, r30
    19ce:	88 23       	and	r24, r24
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <vfprintf+0x3a>
    19d2:	ab c1       	rjmp	.+854    	; 0x1d2a <vfprintf+0x390>
    19d4:	85 32       	cpi	r24, 0x25	; 37
    19d6:	39 f4       	brne	.+14     	; 0x19e6 <vfprintf+0x4c>
    19d8:	93 fd       	sbrc	r25, 3
    19da:	85 91       	lpm	r24, Z+
    19dc:	93 ff       	sbrs	r25, 3
    19de:	81 91       	ld	r24, Z+
    19e0:	6f 01       	movw	r12, r30
    19e2:	85 32       	cpi	r24, 0x25	; 37
    19e4:	29 f4       	brne	.+10     	; 0x19f0 <vfprintf+0x56>
    19e6:	b7 01       	movw	r22, r14
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <fputc>
    19ee:	e7 cf       	rjmp	.-50     	; 0x19be <vfprintf+0x24>
    19f0:	51 2c       	mov	r5, r1
    19f2:	31 2c       	mov	r3, r1
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	20 32       	cpi	r18, 0x20	; 32
    19f8:	a0 f4       	brcc	.+40     	; 0x1a22 <vfprintf+0x88>
    19fa:	8b 32       	cpi	r24, 0x2B	; 43
    19fc:	69 f0       	breq	.+26     	; 0x1a18 <vfprintf+0x7e>
    19fe:	30 f4       	brcc	.+12     	; 0x1a0c <vfprintf+0x72>
    1a00:	80 32       	cpi	r24, 0x20	; 32
    1a02:	59 f0       	breq	.+22     	; 0x1a1a <vfprintf+0x80>
    1a04:	83 32       	cpi	r24, 0x23	; 35
    1a06:	69 f4       	brne	.+26     	; 0x1a22 <vfprintf+0x88>
    1a08:	20 61       	ori	r18, 0x10	; 16
    1a0a:	2c c0       	rjmp	.+88     	; 0x1a64 <vfprintf+0xca>
    1a0c:	8d 32       	cpi	r24, 0x2D	; 45
    1a0e:	39 f0       	breq	.+14     	; 0x1a1e <vfprintf+0x84>
    1a10:	80 33       	cpi	r24, 0x30	; 48
    1a12:	39 f4       	brne	.+14     	; 0x1a22 <vfprintf+0x88>
    1a14:	21 60       	ori	r18, 0x01	; 1
    1a16:	26 c0       	rjmp	.+76     	; 0x1a64 <vfprintf+0xca>
    1a18:	22 60       	ori	r18, 0x02	; 2
    1a1a:	24 60       	ori	r18, 0x04	; 4
    1a1c:	23 c0       	rjmp	.+70     	; 0x1a64 <vfprintf+0xca>
    1a1e:	28 60       	ori	r18, 0x08	; 8
    1a20:	21 c0       	rjmp	.+66     	; 0x1a64 <vfprintf+0xca>
    1a22:	27 fd       	sbrc	r18, 7
    1a24:	27 c0       	rjmp	.+78     	; 0x1a74 <vfprintf+0xda>
    1a26:	30 ed       	ldi	r19, 0xD0	; 208
    1a28:	38 0f       	add	r19, r24
    1a2a:	3a 30       	cpi	r19, 0x0A	; 10
    1a2c:	78 f4       	brcc	.+30     	; 0x1a4c <vfprintf+0xb2>
    1a2e:	26 ff       	sbrs	r18, 6
    1a30:	06 c0       	rjmp	.+12     	; 0x1a3e <vfprintf+0xa4>
    1a32:	fa e0       	ldi	r31, 0x0A	; 10
    1a34:	5f 9e       	mul	r5, r31
    1a36:	30 0d       	add	r19, r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	53 2e       	mov	r5, r19
    1a3c:	13 c0       	rjmp	.+38     	; 0x1a64 <vfprintf+0xca>
    1a3e:	8a e0       	ldi	r24, 0x0A	; 10
    1a40:	38 9e       	mul	r3, r24
    1a42:	30 0d       	add	r19, r0
    1a44:	11 24       	eor	r1, r1
    1a46:	33 2e       	mov	r3, r19
    1a48:	20 62       	ori	r18, 0x20	; 32
    1a4a:	0c c0       	rjmp	.+24     	; 0x1a64 <vfprintf+0xca>
    1a4c:	8e 32       	cpi	r24, 0x2E	; 46
    1a4e:	21 f4       	brne	.+8      	; 0x1a58 <vfprintf+0xbe>
    1a50:	26 fd       	sbrc	r18, 6
    1a52:	6b c1       	rjmp	.+726    	; 0x1d2a <vfprintf+0x390>
    1a54:	20 64       	ori	r18, 0x40	; 64
    1a56:	06 c0       	rjmp	.+12     	; 0x1a64 <vfprintf+0xca>
    1a58:	8c 36       	cpi	r24, 0x6C	; 108
    1a5a:	11 f4       	brne	.+4      	; 0x1a60 <vfprintf+0xc6>
    1a5c:	20 68       	ori	r18, 0x80	; 128
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <vfprintf+0xca>
    1a60:	88 36       	cpi	r24, 0x68	; 104
    1a62:	41 f4       	brne	.+16     	; 0x1a74 <vfprintf+0xda>
    1a64:	f6 01       	movw	r30, r12
    1a66:	93 fd       	sbrc	r25, 3
    1a68:	85 91       	lpm	r24, Z+
    1a6a:	93 ff       	sbrs	r25, 3
    1a6c:	81 91       	ld	r24, Z+
    1a6e:	6f 01       	movw	r12, r30
    1a70:	81 11       	cpse	r24, r1
    1a72:	c1 cf       	rjmp	.-126    	; 0x19f6 <vfprintf+0x5c>
    1a74:	98 2f       	mov	r25, r24
    1a76:	9f 7d       	andi	r25, 0xDF	; 223
    1a78:	95 54       	subi	r25, 0x45	; 69
    1a7a:	93 30       	cpi	r25, 0x03	; 3
    1a7c:	28 f4       	brcc	.+10     	; 0x1a88 <vfprintf+0xee>
    1a7e:	0c 5f       	subi	r16, 0xFC	; 252
    1a80:	1f 4f       	sbci	r17, 0xFF	; 255
    1a82:	ff e3       	ldi	r31, 0x3F	; 63
    1a84:	f9 83       	std	Y+1, r31	; 0x01
    1a86:	0d c0       	rjmp	.+26     	; 0x1aa2 <vfprintf+0x108>
    1a88:	83 36       	cpi	r24, 0x63	; 99
    1a8a:	31 f0       	breq	.+12     	; 0x1a98 <vfprintf+0xfe>
    1a8c:	83 37       	cpi	r24, 0x73	; 115
    1a8e:	71 f0       	breq	.+28     	; 0x1aac <vfprintf+0x112>
    1a90:	83 35       	cpi	r24, 0x53	; 83
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <vfprintf+0xfc>
    1a94:	5b c0       	rjmp	.+182    	; 0x1b4c <vfprintf+0x1b2>
    1a96:	22 c0       	rjmp	.+68     	; 0x1adc <vfprintf+0x142>
    1a98:	f8 01       	movw	r30, r16
    1a9a:	80 81       	ld	r24, Z
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	0e 5f       	subi	r16, 0xFE	; 254
    1aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa2:	44 24       	eor	r4, r4
    1aa4:	43 94       	inc	r4
    1aa6:	51 2c       	mov	r5, r1
    1aa8:	54 01       	movw	r10, r8
    1aaa:	15 c0       	rjmp	.+42     	; 0x1ad6 <vfprintf+0x13c>
    1aac:	38 01       	movw	r6, r16
    1aae:	f2 e0       	ldi	r31, 0x02	; 2
    1ab0:	6f 0e       	add	r6, r31
    1ab2:	71 1c       	adc	r7, r1
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	a0 80       	ld	r10, Z
    1ab8:	b1 80       	ldd	r11, Z+1	; 0x01
    1aba:	26 ff       	sbrs	r18, 6
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <vfprintf+0x12a>
    1abe:	65 2d       	mov	r22, r5
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <vfprintf+0x12e>
    1ac4:	6f ef       	ldi	r22, 0xFF	; 255
    1ac6:	7f ef       	ldi	r23, 0xFF	; 255
    1ac8:	c5 01       	movw	r24, r10
    1aca:	2c 87       	std	Y+12, r18	; 0x0c
    1acc:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <strnlen>
    1ad0:	2c 01       	movw	r4, r24
    1ad2:	83 01       	movw	r16, r6
    1ad4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ad6:	2f 77       	andi	r18, 0x7F	; 127
    1ad8:	22 2e       	mov	r2, r18
    1ada:	17 c0       	rjmp	.+46     	; 0x1b0a <vfprintf+0x170>
    1adc:	38 01       	movw	r6, r16
    1ade:	f2 e0       	ldi	r31, 0x02	; 2
    1ae0:	6f 0e       	add	r6, r31
    1ae2:	71 1c       	adc	r7, r1
    1ae4:	f8 01       	movw	r30, r16
    1ae6:	a0 80       	ld	r10, Z
    1ae8:	b1 80       	ldd	r11, Z+1	; 0x01
    1aea:	26 ff       	sbrs	r18, 6
    1aec:	03 c0       	rjmp	.+6      	; 0x1af4 <vfprintf+0x15a>
    1aee:	65 2d       	mov	r22, r5
    1af0:	70 e0       	ldi	r23, 0x00	; 0
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <vfprintf+0x15e>
    1af4:	6f ef       	ldi	r22, 0xFF	; 255
    1af6:	7f ef       	ldi	r23, 0xFF	; 255
    1af8:	c5 01       	movw	r24, r10
    1afa:	2c 87       	std	Y+12, r18	; 0x0c
    1afc:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <strnlen_P>
    1b00:	2c 01       	movw	r4, r24
    1b02:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b04:	20 68       	ori	r18, 0x80	; 128
    1b06:	22 2e       	mov	r2, r18
    1b08:	83 01       	movw	r16, r6
    1b0a:	23 fc       	sbrc	r2, 3
    1b0c:	1b c0       	rjmp	.+54     	; 0x1b44 <vfprintf+0x1aa>
    1b0e:	83 2d       	mov	r24, r3
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	48 16       	cp	r4, r24
    1b14:	59 06       	cpc	r5, r25
    1b16:	b0 f4       	brcc	.+44     	; 0x1b44 <vfprintf+0x1aa>
    1b18:	b7 01       	movw	r22, r14
    1b1a:	80 e2       	ldi	r24, 0x20	; 32
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <fputc>
    1b22:	3a 94       	dec	r3
    1b24:	f4 cf       	rjmp	.-24     	; 0x1b0e <vfprintf+0x174>
    1b26:	f5 01       	movw	r30, r10
    1b28:	27 fc       	sbrc	r2, 7
    1b2a:	85 91       	lpm	r24, Z+
    1b2c:	27 fe       	sbrs	r2, 7
    1b2e:	81 91       	ld	r24, Z+
    1b30:	5f 01       	movw	r10, r30
    1b32:	b7 01       	movw	r22, r14
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <fputc>
    1b3a:	31 10       	cpse	r3, r1
    1b3c:	3a 94       	dec	r3
    1b3e:	f1 e0       	ldi	r31, 0x01	; 1
    1b40:	4f 1a       	sub	r4, r31
    1b42:	51 08       	sbc	r5, r1
    1b44:	41 14       	cp	r4, r1
    1b46:	51 04       	cpc	r5, r1
    1b48:	71 f7       	brne	.-36     	; 0x1b26 <vfprintf+0x18c>
    1b4a:	e5 c0       	rjmp	.+458    	; 0x1d16 <vfprintf+0x37c>
    1b4c:	84 36       	cpi	r24, 0x64	; 100
    1b4e:	11 f0       	breq	.+4      	; 0x1b54 <vfprintf+0x1ba>
    1b50:	89 36       	cpi	r24, 0x69	; 105
    1b52:	39 f5       	brne	.+78     	; 0x1ba2 <vfprintf+0x208>
    1b54:	f8 01       	movw	r30, r16
    1b56:	27 ff       	sbrs	r18, 7
    1b58:	07 c0       	rjmp	.+14     	; 0x1b68 <vfprintf+0x1ce>
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	0c 5f       	subi	r16, 0xFC	; 252
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	08 c0       	rjmp	.+16     	; 0x1b78 <vfprintf+0x1de>
    1b68:	60 81       	ld	r22, Z
    1b6a:	71 81       	ldd	r23, Z+1	; 0x01
    1b6c:	07 2e       	mov	r0, r23
    1b6e:	00 0c       	add	r0, r0
    1b70:	88 0b       	sbc	r24, r24
    1b72:	99 0b       	sbc	r25, r25
    1b74:	0e 5f       	subi	r16, 0xFE	; 254
    1b76:	1f 4f       	sbci	r17, 0xFF	; 255
    1b78:	2f 76       	andi	r18, 0x6F	; 111
    1b7a:	72 2e       	mov	r7, r18
    1b7c:	97 ff       	sbrs	r25, 7
    1b7e:	09 c0       	rjmp	.+18     	; 0x1b92 <vfprintf+0x1f8>
    1b80:	90 95       	com	r25
    1b82:	80 95       	com	r24
    1b84:	70 95       	com	r23
    1b86:	61 95       	neg	r22
    1b88:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8e:	20 68       	ori	r18, 0x80	; 128
    1b90:	72 2e       	mov	r7, r18
    1b92:	2a e0       	ldi	r18, 0x0A	; 10
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	a4 01       	movw	r20, r8
    1b98:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__ultoa_invert>
    1b9c:	a8 2e       	mov	r10, r24
    1b9e:	a8 18       	sub	r10, r8
    1ba0:	44 c0       	rjmp	.+136    	; 0x1c2a <vfprintf+0x290>
    1ba2:	85 37       	cpi	r24, 0x75	; 117
    1ba4:	29 f4       	brne	.+10     	; 0x1bb0 <vfprintf+0x216>
    1ba6:	2f 7e       	andi	r18, 0xEF	; 239
    1ba8:	b2 2e       	mov	r11, r18
    1baa:	2a e0       	ldi	r18, 0x0A	; 10
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	25 c0       	rjmp	.+74     	; 0x1bfa <vfprintf+0x260>
    1bb0:	f2 2f       	mov	r31, r18
    1bb2:	f9 7f       	andi	r31, 0xF9	; 249
    1bb4:	bf 2e       	mov	r11, r31
    1bb6:	8f 36       	cpi	r24, 0x6F	; 111
    1bb8:	c1 f0       	breq	.+48     	; 0x1bea <vfprintf+0x250>
    1bba:	18 f4       	brcc	.+6      	; 0x1bc2 <vfprintf+0x228>
    1bbc:	88 35       	cpi	r24, 0x58	; 88
    1bbe:	79 f0       	breq	.+30     	; 0x1bde <vfprintf+0x244>
    1bc0:	b4 c0       	rjmp	.+360    	; 0x1d2a <vfprintf+0x390>
    1bc2:	80 37       	cpi	r24, 0x70	; 112
    1bc4:	19 f0       	breq	.+6      	; 0x1bcc <vfprintf+0x232>
    1bc6:	88 37       	cpi	r24, 0x78	; 120
    1bc8:	21 f0       	breq	.+8      	; 0x1bd2 <vfprintf+0x238>
    1bca:	af c0       	rjmp	.+350    	; 0x1d2a <vfprintf+0x390>
    1bcc:	2f 2f       	mov	r18, r31
    1bce:	20 61       	ori	r18, 0x10	; 16
    1bd0:	b2 2e       	mov	r11, r18
    1bd2:	b4 fe       	sbrs	r11, 4
    1bd4:	0d c0       	rjmp	.+26     	; 0x1bf0 <vfprintf+0x256>
    1bd6:	8b 2d       	mov	r24, r11
    1bd8:	84 60       	ori	r24, 0x04	; 4
    1bda:	b8 2e       	mov	r11, r24
    1bdc:	09 c0       	rjmp	.+18     	; 0x1bf0 <vfprintf+0x256>
    1bde:	24 ff       	sbrs	r18, 4
    1be0:	0a c0       	rjmp	.+20     	; 0x1bf6 <vfprintf+0x25c>
    1be2:	9f 2f       	mov	r25, r31
    1be4:	96 60       	ori	r25, 0x06	; 6
    1be6:	b9 2e       	mov	r11, r25
    1be8:	06 c0       	rjmp	.+12     	; 0x1bf6 <vfprintf+0x25c>
    1bea:	28 e0       	ldi	r18, 0x08	; 8
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	05 c0       	rjmp	.+10     	; 0x1bfa <vfprintf+0x260>
    1bf0:	20 e1       	ldi	r18, 0x10	; 16
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <vfprintf+0x260>
    1bf6:	20 e1       	ldi	r18, 0x10	; 16
    1bf8:	32 e0       	ldi	r19, 0x02	; 2
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	b7 fe       	sbrs	r11, 7
    1bfe:	07 c0       	rjmp	.+14     	; 0x1c0e <vfprintf+0x274>
    1c00:	60 81       	ld	r22, Z
    1c02:	71 81       	ldd	r23, Z+1	; 0x01
    1c04:	82 81       	ldd	r24, Z+2	; 0x02
    1c06:	93 81       	ldd	r25, Z+3	; 0x03
    1c08:	0c 5f       	subi	r16, 0xFC	; 252
    1c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0c:	06 c0       	rjmp	.+12     	; 0x1c1a <vfprintf+0x280>
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	0e 5f       	subi	r16, 0xFE	; 254
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1a:	a4 01       	movw	r20, r8
    1c1c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__ultoa_invert>
    1c20:	a8 2e       	mov	r10, r24
    1c22:	a8 18       	sub	r10, r8
    1c24:	fb 2d       	mov	r31, r11
    1c26:	ff 77       	andi	r31, 0x7F	; 127
    1c28:	7f 2e       	mov	r7, r31
    1c2a:	76 fe       	sbrs	r7, 6
    1c2c:	0b c0       	rjmp	.+22     	; 0x1c44 <vfprintf+0x2aa>
    1c2e:	37 2d       	mov	r19, r7
    1c30:	3e 7f       	andi	r19, 0xFE	; 254
    1c32:	a5 14       	cp	r10, r5
    1c34:	50 f4       	brcc	.+20     	; 0x1c4a <vfprintf+0x2b0>
    1c36:	74 fe       	sbrs	r7, 4
    1c38:	0a c0       	rjmp	.+20     	; 0x1c4e <vfprintf+0x2b4>
    1c3a:	72 fc       	sbrc	r7, 2
    1c3c:	08 c0       	rjmp	.+16     	; 0x1c4e <vfprintf+0x2b4>
    1c3e:	37 2d       	mov	r19, r7
    1c40:	3e 7e       	andi	r19, 0xEE	; 238
    1c42:	05 c0       	rjmp	.+10     	; 0x1c4e <vfprintf+0x2b4>
    1c44:	ba 2c       	mov	r11, r10
    1c46:	37 2d       	mov	r19, r7
    1c48:	03 c0       	rjmp	.+6      	; 0x1c50 <vfprintf+0x2b6>
    1c4a:	ba 2c       	mov	r11, r10
    1c4c:	01 c0       	rjmp	.+2      	; 0x1c50 <vfprintf+0x2b6>
    1c4e:	b5 2c       	mov	r11, r5
    1c50:	34 ff       	sbrs	r19, 4
    1c52:	0d c0       	rjmp	.+26     	; 0x1c6e <vfprintf+0x2d4>
    1c54:	fe 01       	movw	r30, r28
    1c56:	ea 0d       	add	r30, r10
    1c58:	f1 1d       	adc	r31, r1
    1c5a:	80 81       	ld	r24, Z
    1c5c:	80 33       	cpi	r24, 0x30	; 48
    1c5e:	11 f4       	brne	.+4      	; 0x1c64 <vfprintf+0x2ca>
    1c60:	39 7e       	andi	r19, 0xE9	; 233
    1c62:	09 c0       	rjmp	.+18     	; 0x1c76 <vfprintf+0x2dc>
    1c64:	32 ff       	sbrs	r19, 2
    1c66:	06 c0       	rjmp	.+12     	; 0x1c74 <vfprintf+0x2da>
    1c68:	b3 94       	inc	r11
    1c6a:	b3 94       	inc	r11
    1c6c:	04 c0       	rjmp	.+8      	; 0x1c76 <vfprintf+0x2dc>
    1c6e:	83 2f       	mov	r24, r19
    1c70:	86 78       	andi	r24, 0x86	; 134
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <vfprintf+0x2dc>
    1c74:	b3 94       	inc	r11
    1c76:	33 fd       	sbrc	r19, 3
    1c78:	13 c0       	rjmp	.+38     	; 0x1ca0 <vfprintf+0x306>
    1c7a:	30 ff       	sbrs	r19, 0
    1c7c:	06 c0       	rjmp	.+12     	; 0x1c8a <vfprintf+0x2f0>
    1c7e:	5a 2c       	mov	r5, r10
    1c80:	b3 14       	cp	r11, r3
    1c82:	18 f4       	brcc	.+6      	; 0x1c8a <vfprintf+0x2f0>
    1c84:	53 0c       	add	r5, r3
    1c86:	5b 18       	sub	r5, r11
    1c88:	b3 2c       	mov	r11, r3
    1c8a:	b3 14       	cp	r11, r3
    1c8c:	68 f4       	brcc	.+26     	; 0x1ca8 <vfprintf+0x30e>
    1c8e:	b7 01       	movw	r22, r14
    1c90:	80 e2       	ldi	r24, 0x20	; 32
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	3c 87       	std	Y+12, r19	; 0x0c
    1c96:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <fputc>
    1c9a:	b3 94       	inc	r11
    1c9c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c9e:	f5 cf       	rjmp	.-22     	; 0x1c8a <vfprintf+0x2f0>
    1ca0:	b3 14       	cp	r11, r3
    1ca2:	10 f4       	brcc	.+4      	; 0x1ca8 <vfprintf+0x30e>
    1ca4:	3b 18       	sub	r3, r11
    1ca6:	01 c0       	rjmp	.+2      	; 0x1caa <vfprintf+0x310>
    1ca8:	31 2c       	mov	r3, r1
    1caa:	34 ff       	sbrs	r19, 4
    1cac:	12 c0       	rjmp	.+36     	; 0x1cd2 <vfprintf+0x338>
    1cae:	b7 01       	movw	r22, r14
    1cb0:	80 e3       	ldi	r24, 0x30	; 48
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	3c 87       	std	Y+12, r19	; 0x0c
    1cb6:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <fputc>
    1cba:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cbc:	32 ff       	sbrs	r19, 2
    1cbe:	17 c0       	rjmp	.+46     	; 0x1cee <vfprintf+0x354>
    1cc0:	31 fd       	sbrc	r19, 1
    1cc2:	03 c0       	rjmp	.+6      	; 0x1cca <vfprintf+0x330>
    1cc4:	88 e7       	ldi	r24, 0x78	; 120
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <vfprintf+0x334>
    1cca:	88 e5       	ldi	r24, 0x58	; 88
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	b7 01       	movw	r22, r14
    1cd0:	0c c0       	rjmp	.+24     	; 0x1cea <vfprintf+0x350>
    1cd2:	83 2f       	mov	r24, r19
    1cd4:	86 78       	andi	r24, 0x86	; 134
    1cd6:	59 f0       	breq	.+22     	; 0x1cee <vfprintf+0x354>
    1cd8:	31 ff       	sbrs	r19, 1
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <vfprintf+0x346>
    1cdc:	8b e2       	ldi	r24, 0x2B	; 43
    1cde:	01 c0       	rjmp	.+2      	; 0x1ce2 <vfprintf+0x348>
    1ce0:	80 e2       	ldi	r24, 0x20	; 32
    1ce2:	37 fd       	sbrc	r19, 7
    1ce4:	8d e2       	ldi	r24, 0x2D	; 45
    1ce6:	b7 01       	movw	r22, r14
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <fputc>
    1cee:	a5 14       	cp	r10, r5
    1cf0:	38 f4       	brcc	.+14     	; 0x1d00 <vfprintf+0x366>
    1cf2:	b7 01       	movw	r22, r14
    1cf4:	80 e3       	ldi	r24, 0x30	; 48
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <fputc>
    1cfc:	5a 94       	dec	r5
    1cfe:	f7 cf       	rjmp	.-18     	; 0x1cee <vfprintf+0x354>
    1d00:	aa 94       	dec	r10
    1d02:	f4 01       	movw	r30, r8
    1d04:	ea 0d       	add	r30, r10
    1d06:	f1 1d       	adc	r31, r1
    1d08:	80 81       	ld	r24, Z
    1d0a:	b7 01       	movw	r22, r14
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <fputc>
    1d12:	a1 10       	cpse	r10, r1
    1d14:	f5 cf       	rjmp	.-22     	; 0x1d00 <vfprintf+0x366>
    1d16:	33 20       	and	r3, r3
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <vfprintf+0x382>
    1d1a:	51 ce       	rjmp	.-862    	; 0x19be <vfprintf+0x24>
    1d1c:	b7 01       	movw	r22, r14
    1d1e:	80 e2       	ldi	r24, 0x20	; 32
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <fputc>
    1d26:	3a 94       	dec	r3
    1d28:	f6 cf       	rjmp	.-20     	; 0x1d16 <vfprintf+0x37c>
    1d2a:	f7 01       	movw	r30, r14
    1d2c:	86 81       	ldd	r24, Z+6	; 0x06
    1d2e:	97 81       	ldd	r25, Z+7	; 0x07
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <vfprintf+0x39c>
    1d32:	8f ef       	ldi	r24, 0xFF	; 255
    1d34:	9f ef       	ldi	r25, 0xFF	; 255
    1d36:	2c 96       	adiw	r28, 0x0c	; 12
    1d38:	e2 e1       	ldi	r30, 0x12	; 18
    1d3a:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__epilogue_restores__>

00001d3e <strnlen_P>:
    1d3e:	fc 01       	movw	r30, r24
    1d40:	05 90       	lpm	r0, Z+
    1d42:	61 50       	subi	r22, 0x01	; 1
    1d44:	70 40       	sbci	r23, 0x00	; 0
    1d46:	01 10       	cpse	r0, r1
    1d48:	d8 f7       	brcc	.-10     	; 0x1d40 <strnlen_P+0x2>
    1d4a:	80 95       	com	r24
    1d4c:	90 95       	com	r25
    1d4e:	8e 0f       	add	r24, r30
    1d50:	9f 1f       	adc	r25, r31
    1d52:	08 95       	ret

00001d54 <strnlen>:
    1d54:	fc 01       	movw	r30, r24
    1d56:	61 50       	subi	r22, 0x01	; 1
    1d58:	70 40       	sbci	r23, 0x00	; 0
    1d5a:	01 90       	ld	r0, Z+
    1d5c:	01 10       	cpse	r0, r1
    1d5e:	d8 f7       	brcc	.-10     	; 0x1d56 <strnlen+0x2>
    1d60:	80 95       	com	r24
    1d62:	90 95       	com	r25
    1d64:	8e 0f       	add	r24, r30
    1d66:	9f 1f       	adc	r25, r31
    1d68:	08 95       	ret

00001d6a <fputc>:
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	fb 01       	movw	r30, r22
    1d74:	23 81       	ldd	r18, Z+3	; 0x03
    1d76:	21 fd       	sbrc	r18, 1
    1d78:	03 c0       	rjmp	.+6      	; 0x1d80 <fputc+0x16>
    1d7a:	8f ef       	ldi	r24, 0xFF	; 255
    1d7c:	9f ef       	ldi	r25, 0xFF	; 255
    1d7e:	28 c0       	rjmp	.+80     	; 0x1dd0 <fputc+0x66>
    1d80:	22 ff       	sbrs	r18, 2
    1d82:	16 c0       	rjmp	.+44     	; 0x1db0 <fputc+0x46>
    1d84:	46 81       	ldd	r20, Z+6	; 0x06
    1d86:	57 81       	ldd	r21, Z+7	; 0x07
    1d88:	24 81       	ldd	r18, Z+4	; 0x04
    1d8a:	35 81       	ldd	r19, Z+5	; 0x05
    1d8c:	42 17       	cp	r20, r18
    1d8e:	53 07       	cpc	r21, r19
    1d90:	44 f4       	brge	.+16     	; 0x1da2 <fputc+0x38>
    1d92:	a0 81       	ld	r26, Z
    1d94:	b1 81       	ldd	r27, Z+1	; 0x01
    1d96:	9d 01       	movw	r18, r26
    1d98:	2f 5f       	subi	r18, 0xFF	; 255
    1d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9c:	31 83       	std	Z+1, r19	; 0x01
    1d9e:	20 83       	st	Z, r18
    1da0:	8c 93       	st	X, r24
    1da2:	26 81       	ldd	r18, Z+6	; 0x06
    1da4:	37 81       	ldd	r19, Z+7	; 0x07
    1da6:	2f 5f       	subi	r18, 0xFF	; 255
    1da8:	3f 4f       	sbci	r19, 0xFF	; 255
    1daa:	37 83       	std	Z+7, r19	; 0x07
    1dac:	26 83       	std	Z+6, r18	; 0x06
    1dae:	10 c0       	rjmp	.+32     	; 0x1dd0 <fputc+0x66>
    1db0:	eb 01       	movw	r28, r22
    1db2:	09 2f       	mov	r16, r25
    1db4:	18 2f       	mov	r17, r24
    1db6:	00 84       	ldd	r0, Z+8	; 0x08
    1db8:	f1 85       	ldd	r31, Z+9	; 0x09
    1dba:	e0 2d       	mov	r30, r0
    1dbc:	09 95       	icall
    1dbe:	89 2b       	or	r24, r25
    1dc0:	e1 f6       	brne	.-72     	; 0x1d7a <fputc+0x10>
    1dc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc6:	01 96       	adiw	r24, 0x01	; 1
    1dc8:	9f 83       	std	Y+7, r25	; 0x07
    1dca:	8e 83       	std	Y+6, r24	; 0x06
    1dcc:	81 2f       	mov	r24, r17
    1dce:	90 2f       	mov	r25, r16
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	08 95       	ret

00001dda <__ultoa_invert>:
    1dda:	fa 01       	movw	r30, r20
    1ddc:	aa 27       	eor	r26, r26
    1dde:	28 30       	cpi	r18, 0x08	; 8
    1de0:	51 f1       	breq	.+84     	; 0x1e36 <__ultoa_invert+0x5c>
    1de2:	20 31       	cpi	r18, 0x10	; 16
    1de4:	81 f1       	breq	.+96     	; 0x1e46 <__ultoa_invert+0x6c>
    1de6:	e8 94       	clt
    1de8:	6f 93       	push	r22
    1dea:	6e 7f       	andi	r22, 0xFE	; 254
    1dec:	6e 5f       	subi	r22, 0xFE	; 254
    1dee:	7f 4f       	sbci	r23, 0xFF	; 255
    1df0:	8f 4f       	sbci	r24, 0xFF	; 255
    1df2:	9f 4f       	sbci	r25, 0xFF	; 255
    1df4:	af 4f       	sbci	r26, 0xFF	; 255
    1df6:	b1 e0       	ldi	r27, 0x01	; 1
    1df8:	3e d0       	rcall	.+124    	; 0x1e76 <__ultoa_invert+0x9c>
    1dfa:	b4 e0       	ldi	r27, 0x04	; 4
    1dfc:	3c d0       	rcall	.+120    	; 0x1e76 <__ultoa_invert+0x9c>
    1dfe:	67 0f       	add	r22, r23
    1e00:	78 1f       	adc	r23, r24
    1e02:	89 1f       	adc	r24, r25
    1e04:	9a 1f       	adc	r25, r26
    1e06:	a1 1d       	adc	r26, r1
    1e08:	68 0f       	add	r22, r24
    1e0a:	79 1f       	adc	r23, r25
    1e0c:	8a 1f       	adc	r24, r26
    1e0e:	91 1d       	adc	r25, r1
    1e10:	a1 1d       	adc	r26, r1
    1e12:	6a 0f       	add	r22, r26
    1e14:	71 1d       	adc	r23, r1
    1e16:	81 1d       	adc	r24, r1
    1e18:	91 1d       	adc	r25, r1
    1e1a:	a1 1d       	adc	r26, r1
    1e1c:	20 d0       	rcall	.+64     	; 0x1e5e <__ultoa_invert+0x84>
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <__ultoa_invert+0x48>
    1e20:	68 94       	set
    1e22:	3f 91       	pop	r19
    1e24:	2a e0       	ldi	r18, 0x0A	; 10
    1e26:	26 9f       	mul	r18, r22
    1e28:	11 24       	eor	r1, r1
    1e2a:	30 19       	sub	r19, r0
    1e2c:	30 5d       	subi	r19, 0xD0	; 208
    1e2e:	31 93       	st	Z+, r19
    1e30:	de f6       	brtc	.-74     	; 0x1de8 <__ultoa_invert+0xe>
    1e32:	cf 01       	movw	r24, r30
    1e34:	08 95       	ret
    1e36:	46 2f       	mov	r20, r22
    1e38:	47 70       	andi	r20, 0x07	; 7
    1e3a:	40 5d       	subi	r20, 0xD0	; 208
    1e3c:	41 93       	st	Z+, r20
    1e3e:	b3 e0       	ldi	r27, 0x03	; 3
    1e40:	0f d0       	rcall	.+30     	; 0x1e60 <__ultoa_invert+0x86>
    1e42:	c9 f7       	brne	.-14     	; 0x1e36 <__ultoa_invert+0x5c>
    1e44:	f6 cf       	rjmp	.-20     	; 0x1e32 <__ultoa_invert+0x58>
    1e46:	46 2f       	mov	r20, r22
    1e48:	4f 70       	andi	r20, 0x0F	; 15
    1e4a:	40 5d       	subi	r20, 0xD0	; 208
    1e4c:	4a 33       	cpi	r20, 0x3A	; 58
    1e4e:	18 f0       	brcs	.+6      	; 0x1e56 <__ultoa_invert+0x7c>
    1e50:	49 5d       	subi	r20, 0xD9	; 217
    1e52:	31 fd       	sbrc	r19, 1
    1e54:	40 52       	subi	r20, 0x20	; 32
    1e56:	41 93       	st	Z+, r20
    1e58:	02 d0       	rcall	.+4      	; 0x1e5e <__ultoa_invert+0x84>
    1e5a:	a9 f7       	brne	.-22     	; 0x1e46 <__ultoa_invert+0x6c>
    1e5c:	ea cf       	rjmp	.-44     	; 0x1e32 <__ultoa_invert+0x58>
    1e5e:	b4 e0       	ldi	r27, 0x04	; 4
    1e60:	a6 95       	lsr	r26
    1e62:	97 95       	ror	r25
    1e64:	87 95       	ror	r24
    1e66:	77 95       	ror	r23
    1e68:	67 95       	ror	r22
    1e6a:	ba 95       	dec	r27
    1e6c:	c9 f7       	brne	.-14     	; 0x1e60 <__ultoa_invert+0x86>
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	61 05       	cpc	r22, r1
    1e72:	71 05       	cpc	r23, r1
    1e74:	08 95       	ret
    1e76:	9b 01       	movw	r18, r22
    1e78:	ac 01       	movw	r20, r24
    1e7a:	0a 2e       	mov	r0, r26
    1e7c:	06 94       	lsr	r0
    1e7e:	57 95       	ror	r21
    1e80:	47 95       	ror	r20
    1e82:	37 95       	ror	r19
    1e84:	27 95       	ror	r18
    1e86:	ba 95       	dec	r27
    1e88:	c9 f7       	brne	.-14     	; 0x1e7c <__ultoa_invert+0xa2>
    1e8a:	62 0f       	add	r22, r18
    1e8c:	73 1f       	adc	r23, r19
    1e8e:	84 1f       	adc	r24, r20
    1e90:	95 1f       	adc	r25, r21
    1e92:	a0 1d       	adc	r26, r0
    1e94:	08 95       	ret

00001e96 <eeprom_read_byte>:
    1e96:	f9 99       	sbic	0x1f, 1	; 31
    1e98:	fe cf       	rjmp	.-4      	; 0x1e96 <eeprom_read_byte>
    1e9a:	92 bd       	out	0x22, r25	; 34
    1e9c:	81 bd       	out	0x21, r24	; 33
    1e9e:	f8 9a       	sbi	0x1f, 0	; 31
    1ea0:	99 27       	eor	r25, r25
    1ea2:	80 b5       	in	r24, 0x20	; 32
    1ea4:	08 95       	ret

00001ea6 <eeprom_update_byte>:
    1ea6:	26 2f       	mov	r18, r22

00001ea8 <eeprom_update_r18>:
    1ea8:	f9 99       	sbic	0x1f, 1	; 31
    1eaa:	fe cf       	rjmp	.-4      	; 0x1ea8 <eeprom_update_r18>
    1eac:	92 bd       	out	0x22, r25	; 34
    1eae:	81 bd       	out	0x21, r24	; 33
    1eb0:	f8 9a       	sbi	0x1f, 0	; 31
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	00 b4       	in	r0, 0x20	; 32
    1eb6:	02 16       	cp	r0, r18
    1eb8:	39 f0       	breq	.+14     	; 0x1ec8 <eeprom_update_r18+0x20>
    1eba:	1f ba       	out	0x1f, r1	; 31
    1ebc:	20 bd       	out	0x20, r18	; 32
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	fa 9a       	sbi	0x1f, 2	; 31
    1ec4:	f9 9a       	sbi	0x1f, 1	; 31
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	08 95       	ret

00001eca <__prologue_saves__>:
    1eca:	2f 92       	push	r2
    1ecc:	3f 92       	push	r3
    1ece:	4f 92       	push	r4
    1ed0:	5f 92       	push	r5
    1ed2:	6f 92       	push	r6
    1ed4:	7f 92       	push	r7
    1ed6:	8f 92       	push	r8
    1ed8:	9f 92       	push	r9
    1eda:	af 92       	push	r10
    1edc:	bf 92       	push	r11
    1ede:	cf 92       	push	r12
    1ee0:	df 92       	push	r13
    1ee2:	ef 92       	push	r14
    1ee4:	ff 92       	push	r15
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	ca 1b       	sub	r28, r26
    1ef4:	db 0b       	sbc	r29, r27
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	09 94       	ijmp

00001f02 <__epilogue_restores__>:
    1f02:	2a 88       	ldd	r2, Y+18	; 0x12
    1f04:	39 88       	ldd	r3, Y+17	; 0x11
    1f06:	48 88       	ldd	r4, Y+16	; 0x10
    1f08:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f10:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f12:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f14:	b9 84       	ldd	r11, Y+9	; 0x09
    1f16:	c8 84       	ldd	r12, Y+8	; 0x08
    1f18:	df 80       	ldd	r13, Y+7	; 0x07
    1f1a:	ee 80       	ldd	r14, Y+6	; 0x06
    1f1c:	fd 80       	ldd	r15, Y+5	; 0x05
    1f1e:	0c 81       	ldd	r16, Y+4	; 0x04
    1f20:	1b 81       	ldd	r17, Y+3	; 0x03
    1f22:	aa 81       	ldd	r26, Y+2	; 0x02
    1f24:	b9 81       	ldd	r27, Y+1	; 0x01
    1f26:	ce 0f       	add	r28, r30
    1f28:	d1 1d       	adc	r29, r1
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	ed 01       	movw	r28, r26
    1f36:	08 95       	ret

00001f38 <_exit>:
    1f38:	f8 94       	cli

00001f3a <__stop_program>:
    1f3a:	ff cf       	rjmp	.-2      	; 0x1f3a <__stop_program>
