
can2usb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  0000140e  000014a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000140e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dd  0080017e  0080017e  00001520  2**0
                  ALLOC
  3 .comment      00000041  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a358  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022ef  00000000  00000000  0000bcf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025d2  00000000  00000000  0000dfe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c40  00000000  00000000  000105b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002698  00000000  00000000  000111f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004961  00000000  00000000  00013890  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  000181f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_16>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_18>
      4c:	0c 94 16 08 	jmp	0x102c	; 0x102c <__vector_19>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	43 04       	cpc	r4, r3
      ba:	46 08       	sbc	r4, r6

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	ee e0       	ldi	r30, 0x0E	; 14
      d0:	f4 e1       	ldi	r31, 0x14	; 20
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	ae 37       	cpi	r26, 0x7E	; 126
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	22 e0       	ldi	r18, 0x02	; 2
      e0:	ae e7       	ldi	r26, 0x7E	; 126
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	ab 35       	cpi	r26, 0x5B	; 91
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
      ee:	10 e0       	ldi	r17, 0x00	; 0
      f0:	ce e5       	ldi	r28, 0x5E	; 94
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
      f6:	21 97       	sbiw	r28, 0x01	; 1
      f8:	fe 01       	movw	r30, r28
      fa:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__tablejump2__>
      fe:	cc 35       	cpi	r28, 0x5C	; 92
     100:	d1 07       	cpc	r29, r17
     102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
     104:	0e 94 49 09 	call	0x1292	; 0x1292 <main>
     108:	0c 94 05 0a 	jmp	0x140a	; 0x140a <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <_ZN11CAN_MCP25153endEv>:
// each interrupt source. When an interrupt occurs, the INT pin is driven low by the MCP2515
// and will remain low until the interrupt is cleared by the MCU. An interrupt can not be
// cleared if the respective condition still prevails.
void CAN_MCP2515::setInterrupts(uint8_t mask, uint8_t writeVal)
{
  modifyAddress(MCP2515_CANINTE, mask, writeVal);
     110:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN8SPIClass3endEv>
     114:	08 95       	ret

00000116 <_ZN11CAN_MCP25155_initEv>:
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
     11a:	ec 01       	movw	r28, r24
     11c:	61 e0       	ldi	r22, 0x01	; 1
     11e:	8a 81       	ldd	r24, Y+2	; 0x02
     120:	0e 94 30 06 	call	0xc60	; 0xc60 <pinMode>
     124:	61 e0       	ldi	r22, 0x01	; 1
     126:	8a 81       	ldd	r24, Y+2	; 0x02
     128:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     12c:	df 91       	pop	r29
     12e:	cf 91       	pop	r28
     130:	08 95       	ret

00000132 <_ZN11CAN_MCP2515C1Eh>:
     132:	24 e0       	ldi	r18, 0x04	; 4
     134:	31 e0       	ldi	r19, 0x01	; 1
     136:	fc 01       	movw	r30, r24
     138:	31 83       	std	Z+1, r19	; 0x01
     13a:	20 83       	st	Z, r18
     13c:	62 83       	std	Z+2, r22	; 0x02
     13e:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN11CAN_MCP25155_initEv>
     142:	08 95       	ret

00000144 <_ZN11CAN_MCP25155resetEv>:
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	ec 01       	movw	r28, r24
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	8a 81       	ldd	r24, Y+2	; 0x02
     14e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     152:	80 ec       	ldi	r24, 0xC0	; 192
     154:	8e bd       	out	0x2e, r24	; 46
     156:	00 00       	nop
     158:	0d b4       	in	r0, 0x2d	; 45
     15a:	07 fe       	sbrs	r0, 7
     15c:	fd cf       	rjmp	.-6      	; 0x158 <_ZN11CAN_MCP25155resetEv+0x14>
     15e:	8e b5       	in	r24, 0x2e	; 46
     160:	61 e0       	ldi	r22, 0x01	; 1
     162:	8a 81       	ldd	r24, Y+2	; 0x02
     164:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	08 95       	ret

0000016e <_ZN11CAN_MCP251512writeAddressEhh>:
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	ec 01       	movw	r28, r24
     178:	06 2f       	mov	r16, r22
     17a:	14 2f       	mov	r17, r20
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	8a 81       	ldd	r24, Y+2	; 0x02
     180:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     184:	82 e0       	ldi	r24, 0x02	; 2
     186:	8e bd       	out	0x2e, r24	; 46
     188:	00 00       	nop
     18a:	0d b4       	in	r0, 0x2d	; 45
     18c:	07 fe       	sbrs	r0, 7
     18e:	fd cf       	rjmp	.-6      	; 0x18a <_ZN11CAN_MCP251512writeAddressEhh+0x1c>
     190:	8e b5       	in	r24, 0x2e	; 46
     192:	0e bd       	out	0x2e, r16	; 46
     194:	00 00       	nop
     196:	0d b4       	in	r0, 0x2d	; 45
     198:	07 fe       	sbrs	r0, 7
     19a:	fd cf       	rjmp	.-6      	; 0x196 <_ZN11CAN_MCP251512writeAddressEhh+0x28>
     19c:	8e b5       	in	r24, 0x2e	; 46
     19e:	1e bd       	out	0x2e, r17	; 46
     1a0:	00 00       	nop
     1a2:	0d b4       	in	r0, 0x2d	; 45
     1a4:	07 fe       	sbrs	r0, 7
     1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <_ZN11CAN_MCP251512writeAddressEhh+0x34>
     1a8:	8e b5       	in	r24, 0x2e	; 46
     1aa:	61 e0       	ldi	r22, 0x01	; 1
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	1f 91       	pop	r17
     1b8:	0f 91       	pop	r16
     1ba:	08 95       	ret

000001bc <_ZN11CAN_MCP251513modifyAddressEhhh>:
     1bc:	ff 92       	push	r15
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	ec 01       	movw	r28, r24
     1c8:	f6 2e       	mov	r15, r22
     1ca:	04 2f       	mov	r16, r20
     1cc:	12 2f       	mov	r17, r18
     1ce:	60 e0       	ldi	r22, 0x00	; 0
     1d0:	8a 81       	ldd	r24, Y+2	; 0x02
     1d2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     1d6:	85 e0       	ldi	r24, 0x05	; 5
     1d8:	8e bd       	out	0x2e, r24	; 46
     1da:	00 00       	nop
     1dc:	0d b4       	in	r0, 0x2d	; 45
     1de:	07 fe       	sbrs	r0, 7
     1e0:	fd cf       	rjmp	.-6      	; 0x1dc <_ZN11CAN_MCP251513modifyAddressEhhh+0x20>
     1e2:	8e b5       	in	r24, 0x2e	; 46
     1e4:	fe bc       	out	0x2e, r15	; 46
     1e6:	00 00       	nop
     1e8:	0d b4       	in	r0, 0x2d	; 45
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <_ZN11CAN_MCP251513modifyAddressEhhh+0x2c>
     1ee:	8e b5       	in	r24, 0x2e	; 46
     1f0:	0e bd       	out	0x2e, r16	; 46
     1f2:	00 00       	nop
     1f4:	0d b4       	in	r0, 0x2d	; 45
     1f6:	07 fe       	sbrs	r0, 7
     1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <_ZN11CAN_MCP251513modifyAddressEhhh+0x38>
     1fa:	8e b5       	in	r24, 0x2e	; 46
     1fc:	1e bd       	out	0x2e, r17	; 46
     1fe:	00 00       	nop
     200:	0d b4       	in	r0, 0x2d	; 45
     202:	07 fe       	sbrs	r0, 7
     204:	fd cf       	rjmp	.-6      	; 0x200 <_ZN11CAN_MCP251513modifyAddressEhhh+0x44>
     206:	8e b5       	in	r24, 0x2e	; 46
     208:	61 e0       	ldi	r22, 0x01	; 1
     20a:	8a 81       	ldd	r24, Y+2	; 0x02
     20c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	1f 91       	pop	r17
     216:	0f 91       	pop	r16
     218:	ff 90       	pop	r15
     21a:	08 95       	ret

0000021c <_ZN11CAN_MCP251510readStatusEv>:
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	ec 01       	movw	r28, r24
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	8a 81       	ldd	r24, Y+2	; 0x02
     228:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     22c:	80 ea       	ldi	r24, 0xA0	; 160
     22e:	8e bd       	out	0x2e, r24	; 46
     230:	00 00       	nop
     232:	0d b4       	in	r0, 0x2d	; 45
     234:	07 fe       	sbrs	r0, 7
     236:	fd cf       	rjmp	.-6      	; 0x232 <_ZN11CAN_MCP251510readStatusEv+0x16>
     238:	8e b5       	in	r24, 0x2e	; 46
     23a:	8f ef       	ldi	r24, 0xFF	; 255
     23c:	8e bd       	out	0x2e, r24	; 46
     23e:	00 00       	nop
     240:	0d b4       	in	r0, 0x2d	; 45
     242:	07 fe       	sbrs	r0, 7
     244:	fd cf       	rjmp	.-6      	; 0x240 <_ZN11CAN_MCP251510readStatusEv+0x24>
     246:	1e b5       	in	r17, 0x2e	; 46
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	8a 81       	ldd	r24, Y+2	; 0x02
     24c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     250:	81 2f       	mov	r24, r17
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	08 95       	ret

0000025a <_ZN11CAN_MCP25159availableEv>:
     25a:	0e 94 0e 01 	call	0x21c	; 0x21c <_ZN11CAN_MCP251510readStatusEv>
     25e:	83 70       	andi	r24, 0x03	; 3
     260:	08 95       	ret

00000262 <_ZN11CAN_MCP25154readEv>:
     262:	bf 92       	push	r11
     264:	cf 92       	push	r12
     266:	df 92       	push	r13
     268:	ef 92       	push	r14
     26a:	ff 92       	push	r15
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	ec 01       	movw	r28, r24
     276:	8b 01       	movw	r16, r22
     278:	cb 01       	movw	r24, r22
     27a:	0e 94 0e 01 	call	0x21c	; 0x21c <_ZN11CAN_MCP251510readStatusEv>
     27e:	80 fd       	sbrc	r24, 0
     280:	06 c0       	rjmp	.+12     	; 0x28e <_ZN11CAN_MCP25154readEv+0x2c>
     282:	81 fd       	sbrc	r24, 1
     284:	09 c0       	rjmp	.+18     	; 0x298 <_ZN11CAN_MCP25154readEv+0x36>
     286:	88 85       	ldd	r24, Y+8	; 0x08
     288:	8e 7f       	andi	r24, 0xFE	; 254
     28a:	88 87       	std	Y+8, r24	; 0x08
     28c:	ec c0       	rjmp	.+472    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     28e:	0f 2e       	mov	r0, r31
     290:	f0 e9       	ldi	r31, 0x90	; 144
     292:	ff 2e       	mov	r15, r31
     294:	f0 2d       	mov	r31, r0
     296:	04 c0       	rjmp	.+8      	; 0x2a0 <_ZN11CAN_MCP25154readEv+0x3e>
     298:	0f 2e       	mov	r0, r31
     29a:	f4 e9       	ldi	r31, 0x94	; 148
     29c:	ff 2e       	mov	r15, r31
     29e:	f0 2d       	mov	r31, r0
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	f8 01       	movw	r30, r16
     2a4:	82 81       	ldd	r24, Z+2	; 0x02
     2a6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     2aa:	fe bc       	out	0x2e, r15	; 46
     2ac:	00 00       	nop
     2ae:	0d b4       	in	r0, 0x2d	; 45
     2b0:	07 fe       	sbrs	r0, 7
     2b2:	fd cf       	rjmp	.-6      	; 0x2ae <_ZN11CAN_MCP25154readEv+0x4c>
     2b4:	8e b5       	in	r24, 0x2e	; 46
     2b6:	8f ef       	ldi	r24, 0xFF	; 255
     2b8:	8e bd       	out	0x2e, r24	; 46
     2ba:	00 00       	nop
     2bc:	0d b4       	in	r0, 0x2d	; 45
     2be:	07 fe       	sbrs	r0, 7
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <_ZN11CAN_MCP25154readEv+0x5a>
     2c2:	fe b4       	in	r15, 0x2e	; 46
     2c4:	8f ef       	ldi	r24, 0xFF	; 255
     2c6:	8e bd       	out	0x2e, r24	; 46
     2c8:	00 00       	nop
     2ca:	0d b4       	in	r0, 0x2d	; 45
     2cc:	07 fe       	sbrs	r0, 7
     2ce:	fd cf       	rjmp	.-6      	; 0x2ca <_ZN11CAN_MCP25154readEv+0x68>
     2d0:	ee b4       	in	r14, 0x2e	; 46
     2d2:	8f ef       	ldi	r24, 0xFF	; 255
     2d4:	8e bd       	out	0x2e, r24	; 46
     2d6:	00 00       	nop
     2d8:	0d b4       	in	r0, 0x2d	; 45
     2da:	07 fe       	sbrs	r0, 7
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <_ZN11CAN_MCP25154readEv+0x76>
     2de:	ce b4       	in	r12, 0x2e	; 46
     2e0:	8f ef       	ldi	r24, 0xFF	; 255
     2e2:	8e bd       	out	0x2e, r24	; 46
     2e4:	00 00       	nop
     2e6:	0d b4       	in	r0, 0x2d	; 45
     2e8:	07 fe       	sbrs	r0, 7
     2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <_ZN11CAN_MCP25154readEv+0x84>
     2ec:	be b4       	in	r11, 0x2e	; 46
     2ee:	8f ef       	ldi	r24, 0xFF	; 255
     2f0:	8e bd       	out	0x2e, r24	; 46
     2f2:	00 00       	nop
     2f4:	0d b4       	in	r0, 0x2d	; 45
     2f6:	07 fe       	sbrs	r0, 7
     2f8:	fd cf       	rjmp	.-6      	; 0x2f4 <_ZN11CAN_MCP25154readEv+0x92>
     2fa:	de b4       	in	r13, 0x2e	; 46
     2fc:	2d 2d       	mov	r18, r13
     2fe:	2f 70       	andi	r18, 0x0F	; 15
     300:	92 2f       	mov	r25, r18
     302:	92 95       	swap	r25
     304:	90 7f       	andi	r25, 0xF0	; 240
     306:	8d 85       	ldd	r24, Y+13	; 0x0d
     308:	8f 70       	andi	r24, 0x0F	; 15
     30a:	89 2b       	or	r24, r25
     30c:	8d 87       	std	Y+13, r24	; 0x0d
     30e:	22 23       	and	r18, r18
     310:	09 f4       	brne	.+2      	; 0x314 <_ZN11CAN_MCP25154readEv+0xb2>
     312:	94 c0       	rjmp	.+296    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     314:	fe 01       	movw	r30, r28
     316:	70 96       	adiw	r30, 0x10	; 16
     318:	40 e0       	ldi	r20, 0x00	; 0
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	9f ef       	ldi	r25, 0xFF	; 255
     31e:	9e bd       	out	0x2e, r25	; 46
     320:	00 00       	nop
     322:	0d b4       	in	r0, 0x2d	; 45
     324:	07 fe       	sbrs	r0, 7
     326:	fd cf       	rjmp	.-6      	; 0x322 <_ZN11CAN_MCP25154readEv+0xc0>
     328:	8e b5       	in	r24, 0x2e	; 46
     32a:	81 93       	st	Z+, r24
     32c:	4f 5f       	subi	r20, 0xFF	; 255
     32e:	5f 4f       	sbci	r21, 0xFF	; 255
     330:	2d 85       	ldd	r18, Y+13	; 0x0d
     332:	22 95       	swap	r18
     334:	2f 70       	andi	r18, 0x0F	; 15
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	42 17       	cp	r20, r18
     33a:	53 07       	cpc	r21, r19
     33c:	84 f3       	brlt	.-32     	; 0x31e <_ZN11CAN_MCP25154readEv+0xbc>
     33e:	61 e0       	ldi	r22, 0x01	; 1
     340:	f8 01       	movw	r30, r16
     342:	82 81       	ldd	r24, Z+2	; 0x02
     344:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     348:	2e 2d       	mov	r18, r14
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	a9 01       	movw	r20, r18
     34e:	55 95       	asr	r21
     350:	47 95       	ror	r20
     352:	55 95       	asr	r21
     354:	47 95       	ror	r20
     356:	55 95       	asr	r21
     358:	47 95       	ror	r20
     35a:	88 85       	ldd	r24, Y+8	; 0x08
     35c:	40 fb       	bst	r20, 0
     35e:	82 f9       	bld	r24, 2
     360:	88 87       	std	Y+8, r24	; 0x08
     362:	82 ff       	sbrs	r24, 2
     364:	40 c0       	rjmp	.+128    	; 0x3e6 <_ZN11CAN_MCP25154readEv+0x184>
     366:	8e 2d       	mov	r24, r14
     368:	80 7e       	andi	r24, 0xE0	; 224
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	a0 e0       	ldi	r26, 0x00	; 0
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	8c 01       	movw	r16, r24
     372:	9d 01       	movw	r18, r26
     374:	0f 2e       	mov	r0, r31
     376:	fd e0       	ldi	r31, 0x0D	; 13
     378:	00 0f       	add	r16, r16
     37a:	11 1f       	adc	r17, r17
     37c:	22 1f       	adc	r18, r18
     37e:	33 1f       	adc	r19, r19
     380:	fa 95       	dec	r31
     382:	d1 f7       	brne	.-12     	; 0x378 <_ZN11CAN_MCP25154readEv+0x116>
     384:	f0 2d       	mov	r31, r0
     386:	4f 2d       	mov	r20, r15
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	db 01       	movw	r26, r22
     390:	ca 01       	movw	r24, r20
     392:	07 2e       	mov	r0, r23
     394:	75 e1       	ldi	r23, 0x15	; 21
     396:	88 0f       	add	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	aa 1f       	adc	r26, r26
     39c:	bb 1f       	adc	r27, r27
     39e:	7a 95       	dec	r23
     3a0:	d1 f7       	brne	.-12     	; 0x396 <_ZN11CAN_MCP25154readEv+0x134>
     3a2:	70 2d       	mov	r23, r0
     3a4:	80 2b       	or	r24, r16
     3a6:	91 2b       	or	r25, r17
     3a8:	a2 2b       	or	r26, r18
     3aa:	b3 2b       	or	r27, r19
     3ac:	2e 2d       	mov	r18, r14
     3ae:	23 70       	andi	r18, 0x03	; 3
     3b0:	a2 2b       	or	r26, r18
     3b2:	9c 29       	or	r25, r12
     3b4:	8b 29       	or	r24, r11
     3b6:	88 83       	st	Y, r24
     3b8:	99 83       	std	Y+1, r25	; 0x01
     3ba:	aa 83       	std	Y+2, r26	; 0x02
     3bc:	9b 2f       	mov	r25, r27
     3be:	9f 71       	andi	r25, 0x1F	; 31
     3c0:	8b 81       	ldd	r24, Y+3	; 0x03
     3c2:	80 7e       	andi	r24, 0xE0	; 224
     3c4:	89 2b       	or	r24, r25
     3c6:	8b 83       	std	Y+3, r24	; 0x03
     3c8:	8d 2d       	mov	r24, r13
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	08 2e       	mov	r0, r24
     3ce:	89 2f       	mov	r24, r25
     3d0:	00 0c       	add	r0, r0
     3d2:	88 1f       	adc	r24, r24
     3d4:	99 0b       	sbc	r25, r25
     3d6:	00 0c       	add	r0, r0
     3d8:	88 1f       	adc	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	98 85       	ldd	r25, Y+8	; 0x08
     3de:	80 fb       	bst	r24, 0
     3e0:	91 f9       	bld	r25, 1
     3e2:	98 87       	std	Y+8, r25	; 0x08
     3e4:	27 c0       	rjmp	.+78     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3e6:	8f 2d       	mov	r24, r15
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	88 0f       	add	r24, r24
     3f0:	99 1f       	adc	r25, r25
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	09 2e       	mov	r0, r25
     3f8:	00 0c       	add	r0, r0
     3fa:	aa 0b       	sbc	r26, r26
     3fc:	bb 0b       	sbc	r27, r27
     3fe:	e6 94       	lsr	r14
     400:	e6 94       	lsr	r14
     402:	e6 94       	lsr	r14
     404:	e6 94       	lsr	r14
     406:	e6 94       	lsr	r14
     408:	8e 29       	or	r24, r14
     40a:	88 83       	st	Y, r24
     40c:	99 83       	std	Y+1, r25	; 0x01
     40e:	aa 83       	std	Y+2, r26	; 0x02
     410:	9b 2f       	mov	r25, r27
     412:	9f 71       	andi	r25, 0x1F	; 31
     414:	8b 81       	ldd	r24, Y+3	; 0x03
     416:	80 7e       	andi	r24, 0xE0	; 224
     418:	89 2b       	or	r24, r25
     41a:	8b 83       	std	Y+3, r24	; 0x03
     41c:	35 95       	asr	r19
     41e:	27 95       	ror	r18
     420:	35 95       	asr	r19
     422:	27 95       	ror	r18
     424:	35 95       	asr	r19
     426:	27 95       	ror	r18
     428:	35 95       	asr	r19
     42a:	27 95       	ror	r18
     42c:	88 85       	ldd	r24, Y+8	; 0x08
     42e:	20 fb       	bst	r18, 0
     430:	81 f9       	bld	r24, 1
     432:	88 87       	std	Y+8, r24	; 0x08
     434:	88 85       	ldd	r24, Y+8	; 0x08
     436:	81 60       	ori	r24, 0x01	; 1
     438:	88 87       	std	Y+8, r24	; 0x08
     43a:	15 c0       	rjmp	.+42     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	f8 01       	movw	r30, r16
     440:	82 81       	ldd	r24, Z+2	; 0x02
     442:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     446:	2e 2d       	mov	r18, r14
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	a9 01       	movw	r20, r18
     44c:	55 95       	asr	r21
     44e:	47 95       	ror	r20
     450:	55 95       	asr	r21
     452:	47 95       	ror	r20
     454:	55 95       	asr	r21
     456:	47 95       	ror	r20
     458:	88 85       	ldd	r24, Y+8	; 0x08
     45a:	40 fb       	bst	r20, 0
     45c:	82 f9       	bld	r24, 2
     45e:	88 87       	std	Y+8, r24	; 0x08
     460:	82 fd       	sbrc	r24, 2
     462:	81 cf       	rjmp	.-254    	; 0x366 <_ZN11CAN_MCP25154readEv+0x104>
     464:	c0 cf       	rjmp	.-128    	; 0x3e6 <_ZN11CAN_MCP25154readEv+0x184>
     466:	ce 01       	movw	r24, r28
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	ff 90       	pop	r15
     472:	ef 90       	pop	r14
     474:	df 90       	pop	r13
     476:	cf 90       	pop	r12
     478:	bf 90       	pop	r11
     47a:	08 95       	ret

0000047c <_ZN11CAN_MCP25155writeERK9CAN_Frame>:
     47c:	9f 92       	push	r9
     47e:	af 92       	push	r10
     480:	bf 92       	push	r11
     482:	cf 92       	push	r12
     484:	df 92       	push	r13
     486:	ef 92       	push	r14
     488:	ff 92       	push	r15
     48a:	0f 93       	push	r16
     48c:	1f 93       	push	r17
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	8c 01       	movw	r16, r24
     494:	eb 01       	movw	r28, r22
     496:	0e 94 0e 01 	call	0x21c	; 0x21c <_ZN11CAN_MCP251510readStatusEv>
     49a:	82 ff       	sbrs	r24, 2
     49c:	cd c0       	rjmp	.+410    	; 0x638 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x1bc>
     49e:	84 ff       	sbrs	r24, 4
     4a0:	0b c0       	rjmp	.+22     	; 0x4b8 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x3c>
     4a2:	86 fd       	sbrc	r24, 6
     4a4:	c7 c0       	rjmp	.+398    	; 0x634 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x1b8>
     4a6:	0f 2e       	mov	r0, r31
     4a8:	f4 e8       	ldi	r31, 0x84	; 132
     4aa:	ef 2e       	mov	r14, r31
     4ac:	f0 2d       	mov	r31, r0
     4ae:	0f 2e       	mov	r0, r31
     4b0:	f4 e4       	ldi	r31, 0x44	; 68
     4b2:	bf 2e       	mov	r11, r31
     4b4:	f0 2d       	mov	r31, r0
     4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x4c>
     4b8:	0f 2e       	mov	r0, r31
     4ba:	f2 e8       	ldi	r31, 0x82	; 130
     4bc:	ef 2e       	mov	r14, r31
     4be:	f0 2d       	mov	r31, r0
     4c0:	0f 2e       	mov	r0, r31
     4c2:	f2 e4       	ldi	r31, 0x42	; 66
     4c4:	bf 2e       	mov	r11, r31
     4c6:	f0 2d       	mov	r31, r0
     4c8:	fd 84       	ldd	r15, Y+13	; 0x0d
     4ca:	f6 94       	lsr	r15
     4cc:	f6 94       	lsr	r15
     4ce:	f6 94       	lsr	r15
     4d0:	f6 94       	lsr	r15
     4d2:	28 85       	ldd	r18, Y+8	; 0x08
     4d4:	22 ff       	sbrs	r18, 2
     4d6:	33 c0       	rjmp	.+102    	; 0x53e <_ZN11CAN_MCP25155writeERK9CAN_Frame+0xc2>
     4d8:	07 c0       	rjmp	.+14     	; 0x4e8 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x6c>
     4da:	0f 2e       	mov	r0, r31
     4dc:	f1 e8       	ldi	r31, 0x81	; 129
     4de:	ef 2e       	mov	r14, r31
     4e0:	f0 2d       	mov	r31, r0
     4e2:	68 94       	set
     4e4:	bb 24       	eor	r11, r11
     4e6:	b6 f8       	bld	r11, 6
     4e8:	d8 80       	ld	r13, Y
     4ea:	3b 81       	ldd	r19, Y+3	; 0x03
     4ec:	8d 2d       	mov	r24, r13
     4ee:	99 81       	ldd	r25, Y+1	; 0x01
     4f0:	aa 81       	ldd	r26, Y+2	; 0x02
     4f2:	b3 2f       	mov	r27, r19
     4f4:	bf 71       	andi	r27, 0x1F	; 31
     4f6:	ac 01       	movw	r20, r24
     4f8:	bd 01       	movw	r22, r26
     4fa:	03 2e       	mov	r0, r19
     4fc:	35 e1       	ldi	r19, 0x15	; 21
     4fe:	76 95       	lsr	r23
     500:	67 95       	ror	r22
     502:	57 95       	ror	r21
     504:	47 95       	ror	r20
     506:	3a 95       	dec	r19
     508:	d1 f7       	brne	.-12     	; 0x4fe <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x82>
     50a:	30 2d       	mov	r19, r0
     50c:	c4 2e       	mov	r12, r20
     50e:	ac 01       	movw	r20, r24
     510:	bd 01       	movw	r22, r26
     512:	03 2e       	mov	r0, r19
     514:	3d e0       	ldi	r19, 0x0D	; 13
     516:	76 95       	lsr	r23
     518:	67 95       	ror	r22
     51a:	57 95       	ror	r21
     51c:	47 95       	ror	r20
     51e:	3a 95       	dec	r19
     520:	d1 f7       	brne	.-12     	; 0x516 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x9a>
     522:	30 2d       	mov	r19, r0
     524:	40 7e       	andi	r20, 0xE0	; 224
     526:	3a 2f       	mov	r19, r26
     528:	33 70       	andi	r19, 0x03	; 3
     52a:	34 2b       	or	r19, r20
     52c:	38 60       	ori	r19, 0x08	; 8
     52e:	93 2e       	mov	r9, r19
     530:	a9 2e       	mov	r10, r25
     532:	21 ff       	sbrs	r18, 1
     534:	25 c0       	rjmp	.+74     	; 0x580 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x104>
     536:	8f 2d       	mov	r24, r15
     538:	80 64       	ori	r24, 0x40	; 64
     53a:	f8 2e       	mov	r15, r24
     53c:	21 c0       	rjmp	.+66     	; 0x580 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x104>
     53e:	88 81       	ld	r24, Y
     540:	99 81       	ldd	r25, Y+1	; 0x01
     542:	aa 81       	ldd	r26, Y+2	; 0x02
     544:	3b 81       	ldd	r19, Y+3	; 0x03
     546:	b3 2f       	mov	r27, r19
     548:	bf 71       	andi	r27, 0x1F	; 31
     54a:	ac 01       	movw	r20, r24
     54c:	bd 01       	movw	r22, r26
     54e:	68 94       	set
     550:	12 f8       	bld	r1, 2
     552:	76 95       	lsr	r23
     554:	67 95       	ror	r22
     556:	57 95       	ror	r21
     558:	47 95       	ror	r20
     55a:	16 94       	lsr	r1
     55c:	d1 f7       	brne	.-12     	; 0x552 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0xd6>
     55e:	c4 2e       	mov	r12, r20
     560:	98 2e       	mov	r9, r24
     562:	99 0c       	add	r9, r9
     564:	99 0c       	add	r9, r9
     566:	99 0c       	add	r9, r9
     568:	99 0c       	add	r9, r9
     56a:	99 0c       	add	r9, r9
     56c:	21 ff       	sbrs	r18, 1
     56e:	06 c0       	rjmp	.+12     	; 0x57c <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x100>
     570:	e9 2d       	mov	r30, r9
     572:	e0 61       	ori	r30, 0x10	; 16
     574:	9e 2e       	mov	r9, r30
     576:	d1 2c       	mov	r13, r1
     578:	a1 2c       	mov	r10, r1
     57a:	02 c0       	rjmp	.+4      	; 0x580 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x104>
     57c:	d1 2c       	mov	r13, r1
     57e:	a1 2c       	mov	r10, r1
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	f8 01       	movw	r30, r16
     584:	82 81       	ldd	r24, Z+2	; 0x02
     586:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     58a:	be bc       	out	0x2e, r11	; 46
     58c:	00 00       	nop
     58e:	0d b4       	in	r0, 0x2d	; 45
     590:	07 fe       	sbrs	r0, 7
     592:	fd cf       	rjmp	.-6      	; 0x58e <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x112>
     594:	8e b5       	in	r24, 0x2e	; 46
     596:	ce bc       	out	0x2e, r12	; 46
     598:	00 00       	nop
     59a:	0d b4       	in	r0, 0x2d	; 45
     59c:	07 fe       	sbrs	r0, 7
     59e:	fd cf       	rjmp	.-6      	; 0x59a <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x11e>
     5a0:	8e b5       	in	r24, 0x2e	; 46
     5a2:	9e bc       	out	0x2e, r9	; 46
     5a4:	00 00       	nop
     5a6:	0d b4       	in	r0, 0x2d	; 45
     5a8:	07 fe       	sbrs	r0, 7
     5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x12a>
     5ac:	8e b5       	in	r24, 0x2e	; 46
     5ae:	ae bc       	out	0x2e, r10	; 46
     5b0:	00 00       	nop
     5b2:	0d b4       	in	r0, 0x2d	; 45
     5b4:	07 fe       	sbrs	r0, 7
     5b6:	fd cf       	rjmp	.-6      	; 0x5b2 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x136>
     5b8:	8e b5       	in	r24, 0x2e	; 46
     5ba:	de bc       	out	0x2e, r13	; 46
     5bc:	00 00       	nop
     5be:	0d b4       	in	r0, 0x2d	; 45
     5c0:	07 fe       	sbrs	r0, 7
     5c2:	fd cf       	rjmp	.-6      	; 0x5be <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x142>
     5c4:	8e b5       	in	r24, 0x2e	; 46
     5c6:	fe bc       	out	0x2e, r15	; 46
     5c8:	00 00       	nop
     5ca:	0d b4       	in	r0, 0x2d	; 45
     5cc:	07 fe       	sbrs	r0, 7
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x14e>
     5d0:	8e b5       	in	r24, 0x2e	; 46
     5d2:	8d 85       	ldd	r24, Y+13	; 0x0d
     5d4:	82 95       	swap	r24
     5d6:	8f 70       	andi	r24, 0x0F	; 15
     5d8:	a1 f0       	breq	.+40     	; 0x602 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x186>
     5da:	fe 01       	movw	r30, r28
     5dc:	70 96       	adiw	r30, 0x10	; 16
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	81 91       	ld	r24, Z+
     5e4:	8e bd       	out	0x2e, r24	; 46
     5e6:	00 00       	nop
     5e8:	0d b4       	in	r0, 0x2d	; 45
     5ea:	07 fe       	sbrs	r0, 7
     5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x16c>
     5ee:	8e b5       	in	r24, 0x2e	; 46
     5f0:	4f 5f       	subi	r20, 0xFF	; 255
     5f2:	5f 4f       	sbci	r21, 0xFF	; 255
     5f4:	2d 85       	ldd	r18, Y+13	; 0x0d
     5f6:	22 95       	swap	r18
     5f8:	2f 70       	andi	r18, 0x0F	; 15
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	42 17       	cp	r20, r18
     5fe:	53 07       	cpc	r21, r19
     600:	84 f3       	brlt	.-32     	; 0x5e2 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x166>
     602:	61 e0       	ldi	r22, 0x01	; 1
     604:	f8 01       	movw	r30, r16
     606:	82 81       	ldd	r24, Z+2	; 0x02
     608:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	f8 01       	movw	r30, r16
     610:	82 81       	ldd	r24, Z+2	; 0x02
     612:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     616:	ee bc       	out	0x2e, r14	; 46
     618:	00 00       	nop
     61a:	0d b4       	in	r0, 0x2d	; 45
     61c:	07 fe       	sbrs	r0, 7
     61e:	fd cf       	rjmp	.-6      	; 0x61a <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x19e>
     620:	8e b5       	in	r24, 0x2e	; 46
     622:	61 e0       	ldi	r22, 0x01	; 1
     624:	f8 01       	movw	r30, r16
     626:	82 81       	ldd	r24, Z+2	; 0x02
     628:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     62c:	8d 85       	ldd	r24, Y+13	; 0x0d
     62e:	82 95       	swap	r24
     630:	8f 70       	andi	r24, 0x0F	; 15
     632:	12 c0       	rjmp	.+36     	; 0x658 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x1dc>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	10 c0       	rjmp	.+32     	; 0x658 <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x1dc>
     638:	fd 84       	ldd	r15, Y+13	; 0x0d
     63a:	f6 94       	lsr	r15
     63c:	f6 94       	lsr	r15
     63e:	f6 94       	lsr	r15
     640:	f6 94       	lsr	r15
     642:	28 85       	ldd	r18, Y+8	; 0x08
     644:	22 fd       	sbrc	r18, 2
     646:	49 cf       	rjmp	.-366    	; 0x4da <_ZN11CAN_MCP25155writeERK9CAN_Frame+0x5e>
     648:	0f 2e       	mov	r0, r31
     64a:	f1 e8       	ldi	r31, 0x81	; 129
     64c:	ef 2e       	mov	r14, r31
     64e:	f0 2d       	mov	r31, r0
     650:	68 94       	set
     652:	bb 24       	eor	r11, r11
     654:	b6 f8       	bld	r11, 6
     656:	73 cf       	rjmp	.-282    	; 0x53e <_ZN11CAN_MCP25155writeERK9CAN_Frame+0xc2>
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	df 90       	pop	r13
     666:	cf 90       	pop	r12
     668:	bf 90       	pop	r11
     66a:	af 90       	pop	r10
     66c:	9f 90       	pop	r9
     66e:	08 95       	ret

00000670 <_ZN11CAN_MCP25157setModeEh>:
     670:	26 2f       	mov	r18, r22
     672:	40 ee       	ldi	r20, 0xE0	; 224
     674:	6f e0       	ldi	r22, 0x0F	; 15
     676:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN11CAN_MCP251513modifyAddressEhhh>
     67a:	08 95       	ret

0000067c <_ZN11CAN_MCP251510setBitrateEm>:
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	ec 01       	movw	r28, r24
     682:	41 e0       	ldi	r20, 0x01	; 1
     684:	6a e2       	ldi	r22, 0x2A	; 42
     686:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN11CAN_MCP251512writeAddressEhh>
     68a:	48 eb       	ldi	r20, 0xB8	; 184
     68c:	69 e2       	ldi	r22, 0x29	; 41
     68e:	ce 01       	movw	r24, r28
     690:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN11CAN_MCP251512writeAddressEhh>
     694:	45 e0       	ldi	r20, 0x05	; 5
     696:	68 e2       	ldi	r22, 0x28	; 40
     698:	ce 01       	movw	r24, r28
     69a:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN11CAN_MCP251512writeAddressEhh>
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <_ZN11CAN_MCP251512clearFiltersEv>:
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	ec 01       	movw	r28, r24
     6aa:	20 e6       	ldi	r18, 0x60	; 96
     6ac:	40 e6       	ldi	r20, 0x60	; 96
     6ae:	60 e6       	ldi	r22, 0x60	; 96
     6b0:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN11CAN_MCP251513modifyAddressEhhh>
     6b4:	20 e6       	ldi	r18, 0x60	; 96
     6b6:	40 e6       	ldi	r20, 0x60	; 96
     6b8:	60 e7       	ldi	r22, 0x70	; 112
     6ba:	ce 01       	movw	r24, r28
     6bc:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN11CAN_MCP251513modifyAddressEhhh>
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <_ZN11CAN_MCP251514clearRxBuffersEv>:
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	ec 01       	movw	r28, r24
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	8a 81       	ldd	r24, Y+2	; 0x02
     6d0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	8e bd       	out	0x2e, r24	; 46
     6d8:	00 00       	nop
     6da:	0d b4       	in	r0, 0x2d	; 45
     6dc:	07 fe       	sbrs	r0, 7
     6de:	fd cf       	rjmp	.-6      	; 0x6da <_ZN11CAN_MCP251514clearRxBuffersEv+0x14>
     6e0:	8e b5       	in	r24, 0x2e	; 46
     6e2:	81 e6       	ldi	r24, 0x61	; 97
     6e4:	8e bd       	out	0x2e, r24	; 46
     6e6:	00 00       	nop
     6e8:	0d b4       	in	r0, 0x2d	; 45
     6ea:	07 fe       	sbrs	r0, 7
     6ec:	fd cf       	rjmp	.-6      	; 0x6e8 <_ZN11CAN_MCP251514clearRxBuffersEv+0x22>
     6ee:	8e b5       	in	r24, 0x2e	; 46
     6f0:	9d e0       	ldi	r25, 0x0D	; 13
     6f2:	1e bc       	out	0x2e, r1	; 46
     6f4:	00 00       	nop
     6f6:	0d b4       	in	r0, 0x2d	; 45
     6f8:	07 fe       	sbrs	r0, 7
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <_ZN11CAN_MCP251514clearRxBuffersEv+0x30>
     6fc:	2e b5       	in	r18, 0x2e	; 46
     6fe:	91 50       	subi	r25, 0x01	; 1
     700:	c1 f7       	brne	.-16     	; 0x6f2 <_ZN11CAN_MCP251514clearRxBuffersEv+0x2c>
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	8a 81       	ldd	r24, Y+2	; 0x02
     706:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	8a 81       	ldd	r24, Y+2	; 0x02
     70e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	8e bd       	out	0x2e, r24	; 46
     716:	00 00       	nop
     718:	0d b4       	in	r0, 0x2d	; 45
     71a:	07 fe       	sbrs	r0, 7
     71c:	fd cf       	rjmp	.-6      	; 0x718 <_ZN11CAN_MCP251514clearRxBuffersEv+0x52>
     71e:	8e b5       	in	r24, 0x2e	; 46
     720:	81 e7       	ldi	r24, 0x71	; 113
     722:	8e bd       	out	0x2e, r24	; 46
     724:	00 00       	nop
     726:	0d b4       	in	r0, 0x2d	; 45
     728:	07 fe       	sbrs	r0, 7
     72a:	fd cf       	rjmp	.-6      	; 0x726 <_ZN11CAN_MCP251514clearRxBuffersEv+0x60>
     72c:	8e b5       	in	r24, 0x2e	; 46
     72e:	9d e0       	ldi	r25, 0x0D	; 13
     730:	1e bc       	out	0x2e, r1	; 46
     732:	00 00       	nop
     734:	0d b4       	in	r0, 0x2d	; 45
     736:	07 fe       	sbrs	r0, 7
     738:	fd cf       	rjmp	.-6      	; 0x734 <_ZN11CAN_MCP251514clearRxBuffersEv+0x6e>
     73a:	2e b5       	in	r18, 0x2e	; 46
     73c:	91 50       	subi	r25, 0x01	; 1
     73e:	c1 f7       	brne	.-16     	; 0x730 <_ZN11CAN_MCP251514clearRxBuffersEv+0x6a>
     740:	61 e0       	ldi	r22, 0x01	; 1
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <_ZN11CAN_MCP251514clearTxBuffersEv>:
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	ec 01       	movw	r28, r24
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	8a 81       	ldd	r24, Y+2	; 0x02
     758:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	8e bd       	out	0x2e, r24	; 46
     760:	00 00       	nop
     762:	0d b4       	in	r0, 0x2d	; 45
     764:	07 fe       	sbrs	r0, 7
     766:	fd cf       	rjmp	.-6      	; 0x762 <_ZN11CAN_MCP251514clearTxBuffersEv+0x14>
     768:	8e b5       	in	r24, 0x2e	; 46
     76a:	81 e3       	ldi	r24, 0x31	; 49
     76c:	8e bd       	out	0x2e, r24	; 46
     76e:	00 00       	nop
     770:	0d b4       	in	r0, 0x2d	; 45
     772:	07 fe       	sbrs	r0, 7
     774:	fd cf       	rjmp	.-6      	; 0x770 <_ZN11CAN_MCP251514clearTxBuffersEv+0x22>
     776:	8e b5       	in	r24, 0x2e	; 46
     778:	9d e0       	ldi	r25, 0x0D	; 13
     77a:	1e bc       	out	0x2e, r1	; 46
     77c:	00 00       	nop
     77e:	0d b4       	in	r0, 0x2d	; 45
     780:	07 fe       	sbrs	r0, 7
     782:	fd cf       	rjmp	.-6      	; 0x77e <_ZN11CAN_MCP251514clearTxBuffersEv+0x30>
     784:	2e b5       	in	r18, 0x2e	; 46
     786:	91 50       	subi	r25, 0x01	; 1
     788:	c1 f7       	brne	.-16     	; 0x77a <_ZN11CAN_MCP251514clearTxBuffersEv+0x2c>
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	8a 81       	ldd	r24, Y+2	; 0x02
     78e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	8a 81       	ldd	r24, Y+2	; 0x02
     796:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     79a:	82 e0       	ldi	r24, 0x02	; 2
     79c:	8e bd       	out	0x2e, r24	; 46
     79e:	00 00       	nop
     7a0:	0d b4       	in	r0, 0x2d	; 45
     7a2:	07 fe       	sbrs	r0, 7
     7a4:	fd cf       	rjmp	.-6      	; 0x7a0 <_ZN11CAN_MCP251514clearTxBuffersEv+0x52>
     7a6:	8e b5       	in	r24, 0x2e	; 46
     7a8:	81 e4       	ldi	r24, 0x41	; 65
     7aa:	8e bd       	out	0x2e, r24	; 46
     7ac:	00 00       	nop
     7ae:	0d b4       	in	r0, 0x2d	; 45
     7b0:	07 fe       	sbrs	r0, 7
     7b2:	fd cf       	rjmp	.-6      	; 0x7ae <_ZN11CAN_MCP251514clearTxBuffersEv+0x60>
     7b4:	8e b5       	in	r24, 0x2e	; 46
     7b6:	9d e0       	ldi	r25, 0x0D	; 13
     7b8:	1e bc       	out	0x2e, r1	; 46
     7ba:	00 00       	nop
     7bc:	0d b4       	in	r0, 0x2d	; 45
     7be:	07 fe       	sbrs	r0, 7
     7c0:	fd cf       	rjmp	.-6      	; 0x7bc <_ZN11CAN_MCP251514clearTxBuffersEv+0x6e>
     7c2:	2e b5       	in	r18, 0x2e	; 46
     7c4:	91 50       	subi	r25, 0x01	; 1
     7c6:	c1 f7       	brne	.-16     	; 0x7b8 <_ZN11CAN_MCP251514clearTxBuffersEv+0x6a>
     7c8:	61 e0       	ldi	r22, 0x01	; 1
     7ca:	8a 81       	ldd	r24, Y+2	; 0x02
     7cc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	8a 81       	ldd	r24, Y+2	; 0x02
     7d4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	8e bd       	out	0x2e, r24	; 46
     7dc:	00 00       	nop
     7de:	0d b4       	in	r0, 0x2d	; 45
     7e0:	07 fe       	sbrs	r0, 7
     7e2:	fd cf       	rjmp	.-6      	; 0x7de <_ZN11CAN_MCP251514clearTxBuffersEv+0x90>
     7e4:	8e b5       	in	r24, 0x2e	; 46
     7e6:	81 e5       	ldi	r24, 0x51	; 81
     7e8:	8e bd       	out	0x2e, r24	; 46
     7ea:	00 00       	nop
     7ec:	0d b4       	in	r0, 0x2d	; 45
     7ee:	07 fe       	sbrs	r0, 7
     7f0:	fd cf       	rjmp	.-6      	; 0x7ec <_ZN11CAN_MCP251514clearTxBuffersEv+0x9e>
     7f2:	8e b5       	in	r24, 0x2e	; 46
     7f4:	9d e0       	ldi	r25, 0x0D	; 13
     7f6:	1e bc       	out	0x2e, r1	; 46
     7f8:	00 00       	nop
     7fa:	0d b4       	in	r0, 0x2d	; 45
     7fc:	07 fe       	sbrs	r0, 7
     7fe:	fd cf       	rjmp	.-6      	; 0x7fa <_ZN11CAN_MCP251514clearTxBuffersEv+0xac>
     800:	2e b5       	in	r18, 0x2e	; 46
     802:	91 50       	subi	r25, 0x01	; 1
     804:	c1 f7       	brne	.-16     	; 0x7f6 <_ZN11CAN_MCP251514clearTxBuffersEv+0xa8>
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	8a 81       	ldd	r24, Y+2	; 0x02
     80a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	08 95       	ret

00000814 <_ZN11CAN_MCP25155beginEmh>:
     814:	cf 92       	push	r12
     816:	df 92       	push	r13
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
     824:	6a 01       	movw	r12, r20
     826:	7b 01       	movw	r14, r22
     828:	12 2f       	mov	r17, r18
     82a:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN8SPIClass5beginEv>
     82e:	ce 01       	movw	r24, r28
     830:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN11CAN_MCP25155resetEv>
     834:	ce 01       	movw	r24, r28
     836:	0e 94 63 03 	call	0x6c6	; 0x6c6 <_ZN11CAN_MCP251514clearRxBuffersEv>
     83a:	ce 01       	movw	r24, r28
     83c:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN11CAN_MCP251514clearTxBuffersEv>
     840:	ce 01       	movw	r24, r28
     842:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN11CAN_MCP251512clearFiltersEv>
     846:	b7 01       	movw	r22, r14
     848:	a6 01       	movw	r20, r12
     84a:	ce 01       	movw	r24, r28
     84c:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN11CAN_MCP251510setBitrateEm>
     850:	61 2f       	mov	r22, r17
     852:	ce 01       	movw	r24, r28
     854:	0e 94 38 03 	call	0x670	; 0x670 <_ZN11CAN_MCP25157setModeEh>
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	df 90       	pop	r13
     864:	cf 90       	pop	r12
     866:	08 95       	ret

00000868 <_ZN11CAN_MCP25155beginEm>:
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	0e 94 0a 04 	call	0x814	; 0x814 <_ZN11CAN_MCP25155beginEmh>
     86e:	08 95       	ret

00000870 <_ZN11CAN_MCP25155flushEv>:
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	ec 01       	movw	r28, r24
     876:	0e 94 63 03 	call	0x6c6	; 0x6c6 <_ZN11CAN_MCP251514clearRxBuffersEv>
     87a:	ce 01       	movw	r24, r28
     87c:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN11CAN_MCP251514clearTxBuffersEv>
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <_GLOBAL__sub_I__ZN11CAN_MCP2515C2Ev>:
  Bit 1: RX1IE: Receive Buffer 1 Full Interrupt Enable bit
  Bit 0: RX0IE: Receive Buffer 0 Full Interrupt Enable bit
  */
}

CAN_MCP2515 CAN(10); // Create CAN channel using pin 10 for SPI chip select
     886:	6a e0       	ldi	r22, 0x0A	; 10
     888:	8e e7       	ldi	r24, 0x7E	; 126
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 99 00 	call	0x132	; 0x132 <_ZN11CAN_MCP2515C1Eh>
     890:	08 95       	ret

00000892 <_Z12generateHashm>:
	num = num - num / 10 * 10;
return char ('0' + num);
}

#ifndef hex2usb
uint16_t generateHash(uint32_t uid){
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
  uint16_t highbyte = uid >> 16;
     896:	8c 01       	movw	r16, r24
     898:	22 27       	eor	r18, r18
     89a:	33 27       	eor	r19, r19
  uint16_t lowbyte = uid;
  uint16_t hash = highbyte ^ lowbyte;
     89c:	60 27       	eor	r22, r16
     89e:	71 27       	eor	r23, r17
  bitWrite(hash, 7, 0);
     8a0:	cb 01       	movw	r24, r22
     8a2:	8f 77       	andi	r24, 0x7F	; 127
  bitWrite(hash, 8, 1);
  bitWrite(hash, 9, 1);
  return hash;
}
     8a4:	93 60       	ori	r25, 0x03	; 3
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	08 95       	ret

000008ac <_Z12sendCanFrame9CAN_Frame>:

void sendCanFrame(CAN_Frame frame){
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
  frame.extended = 1;
     8b4:	8d 85       	ldd	r24, Y+13	; 0x0d
     8b6:	84 60       	ori	r24, 0x04	; 4
     8b8:	8d 87       	std	Y+13, r24	; 0x0d
  frame.id = frame.cmd;
     8ba:	89 85       	ldd	r24, Y+9	; 0x09
  frame.id = (frame.id << 17) | frame.hash;
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	a0 e0       	ldi	r26, 0x00	; 0
     8c0:	b0 e0       	ldi	r27, 0x00	; 0
     8c2:	07 2e       	mov	r0, r23
     8c4:	71 e1       	ldi	r23, 0x11	; 17
     8c6:	88 0f       	add	r24, r24
     8c8:	99 1f       	adc	r25, r25
     8ca:	aa 1f       	adc	r26, r26
     8cc:	bb 1f       	adc	r27, r27
     8ce:	7a 95       	dec	r23
     8d0:	d1 f7       	brne	.-12     	; 0x8c6 <_Z12sendCanFrame9CAN_Frame+0x1a>
     8d2:	70 2d       	mov	r23, r0
     8d4:	4a 85       	ldd	r20, Y+10	; 0x0a
     8d6:	5b 85       	ldd	r21, Y+11	; 0x0b
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	84 2b       	or	r24, r20
     8de:	95 2b       	or	r25, r21
     8e0:	a6 2b       	or	r26, r22
     8e2:	b7 2b       	or	r27, r23
     8e4:	3b 2f       	mov	r19, r27
     8e6:	3f 71       	andi	r19, 0x1F	; 31
     8e8:	28 85       	ldd	r18, Y+8	; 0x08
     8ea:	20 7e       	andi	r18, 0xE0	; 224
     8ec:	23 2b       	or	r18, r19
     8ee:	28 87       	std	Y+8, r18	; 0x08
  bitWrite(frame.id, 16, frame.resp_bit);
     8f0:	2c 85       	ldd	r18, Y+12	; 0x0c
     8f2:	22 23       	and	r18, r18
     8f4:	59 f0       	breq	.+22     	; 0x90c <__stack+0xd>
     8f6:	a1 60       	ori	r26, 0x01	; 1
     8f8:	8d 83       	std	Y+5, r24	; 0x05
     8fa:	9e 83       	std	Y+6, r25	; 0x06
     8fc:	af 83       	std	Y+7, r26	; 0x07
     8fe:	9b 2f       	mov	r25, r27
     900:	9f 71       	andi	r25, 0x1F	; 31
     902:	88 85       	ldd	r24, Y+8	; 0x08
     904:	80 7e       	andi	r24, 0xE0	; 224
     906:	89 2b       	or	r24, r25
     908:	88 87       	std	Y+8, r24	; 0x08
     90a:	0b c0       	rjmp	.+22     	; 0x922 <__stack+0x23>
     90c:	ae 7f       	andi	r26, 0xFE	; 254
     90e:	bf 71       	andi	r27, 0x1F	; 31
     910:	8d 83       	std	Y+5, r24	; 0x05
     912:	9e 83       	std	Y+6, r25	; 0x06
     914:	af 83       	std	Y+7, r26	; 0x07
     916:	9b 2f       	mov	r25, r27
     918:	9f 71       	andi	r25, 0x1F	; 31
     91a:	88 85       	ldd	r24, Y+8	; 0x08
     91c:	80 7e       	andi	r24, 0xE0	; 224
     91e:	89 2b       	or	r24, r25
     920:	88 87       	std	Y+8, r24	; 0x08
  CAN.write(frame);
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	8e e7       	ldi	r24, 0x7E	; 126
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN11CAN_MCP25155writeERK9CAN_Frame>
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <_Z11getCanFramev>:

CAN_Frame getCanFrame(){
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ec 01       	movw	r28, r24
  CAN_Frame frame = CAN.read();
     93c:	6e e7       	ldi	r22, 0x7E	; 126
     93e:	71 e0       	ldi	r23, 0x01	; 1
     940:	0e 94 31 01 	call	0x262	; 0x262 <_ZN11CAN_MCP25154readEv>
  frame.cmd = frame.id >> 17;
     944:	88 81       	ld	r24, Y
     946:	99 81       	ldd	r25, Y+1	; 0x01
     948:	aa 81       	ldd	r26, Y+2	; 0x02
     94a:	2b 81       	ldd	r18, Y+3	; 0x03
     94c:	b2 2f       	mov	r27, r18
     94e:	bf 71       	andi	r27, 0x1F	; 31
     950:	ac 01       	movw	r20, r24
     952:	bd 01       	movw	r22, r26
     954:	03 2e       	mov	r0, r19
     956:	31 e1       	ldi	r19, 0x11	; 17
     958:	76 95       	lsr	r23
     95a:	67 95       	ror	r22
     95c:	57 95       	ror	r21
     95e:	47 95       	ror	r20
     960:	3a 95       	dec	r19
     962:	d1 f7       	brne	.-12     	; 0x958 <_Z11getCanFramev+0x22>
     964:	30 2d       	mov	r19, r0
     966:	4c 83       	std	Y+4, r20	; 0x04
  frame.resp_bit = bitRead(frame.id, 16);
     968:	8a 2f       	mov	r24, r26
     96a:	81 70       	andi	r24, 0x01	; 1
     96c:	8f 83       	std	Y+7, r24	; 0x07
  return frame;
}
     96e:	ce 01       	movw	r24, r28
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
     976:	cf 93       	push	r28
  uint8_t sreg = SREG;
     978:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
     97a:	f8 94       	cli
  if (!initialized) {
     97c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <_ZN8SPIClass11initializedE>
     980:	81 11       	cpse	r24, r1
     982:	27 c0       	rjmp	.+78     	; 0x9d2 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
     984:	ea e9       	ldi	r30, 0x9A	; 154
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
     98a:	e6 e8       	ldi	r30, 0x86	; 134
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
     990:	e8 2f       	mov	r30, r24
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	e2 55       	subi	r30, 0x52	; 82
     99a:	ff 4f       	sbci	r31, 0xFF	; 255
     99c:	a5 91       	lpm	r26, Z+
     99e:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
     9a0:	ec 91       	ld	r30, X
     9a2:	e9 23       	and	r30, r25
     9a4:	21 f4       	brne	.+8      	; 0x9ae <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	8a e0       	ldi	r24, 0x0A	; 10
     9aa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	8a e0       	ldi	r24, 0x0A	; 10
     9b2:	0e 94 30 06 	call	0xc60	; 0xc60 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
     9b6:	8c b5       	in	r24, 0x2c	; 44
     9b8:	80 61       	ori	r24, 0x10	; 16
     9ba:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     9bc:	8c b5       	in	r24, 0x2c	; 44
     9be:	80 64       	ori	r24, 0x40	; 64
     9c0:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	8d e0       	ldi	r24, 0x0D	; 13
     9c6:	0e 94 30 06 	call	0xc60	; 0xc60 <pinMode>
    pinMode(MOSI, OUTPUT);
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	8b e0       	ldi	r24, 0x0B	; 11
     9ce:	0e 94 30 06 	call	0xc60	; 0xc60 <pinMode>
  }
  initialized++; // reference count
     9d2:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <_ZN8SPIClass11initializedE>
     9d6:	8f 5f       	subi	r24, 0xFF	; 255
     9d8:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <_ZN8SPIClass11initializedE>
  SREG = sreg;
     9dc:	cf bf       	out	0x3f, r28	; 63
}
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  uint8_t sreg = SREG;
     9e2:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
     9e4:	f8 94       	cli
  // Decrease the reference counter
  if (initialized)
     9e6:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <_ZN8SPIClass11initializedE>
     9ea:	88 23       	and	r24, r24
     9ec:	29 f0       	breq	.+10     	; 0x9f8 <_ZN8SPIClass3endEv+0x16>
    initialized--;
     9ee:	81 50       	subi	r24, 0x01	; 1
     9f0:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <_ZN8SPIClass11initializedE>
  // If there are no more references disable SPI
  if (!initialized) {
     9f4:	81 11       	cpse	r24, r1
     9f6:	05 c0       	rjmp	.+10     	; 0xa02 <_ZN8SPIClass3endEv+0x20>
    SPCR &= ~_BV(SPE);
     9f8:	8c b5       	in	r24, 0x2c	; 44
     9fa:	8f 7b       	andi	r24, 0xBF	; 191
     9fc:	8c bd       	out	0x2c, r24	; 44
    interruptMode = 0;
     9fe:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <_ZN8SPIClass13interruptModeE>
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
     a02:	9f bf       	out	0x3f, r25	; 63
     a04:	08 95       	ret

00000a06 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     a06:	26 e0       	ldi	r18, 0x06	; 6
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	52 ec       	ldi	r21, 0xC2	; 194
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	85 eb       	ldi	r24, 0xB5	; 181
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN14HardwareSerial5beginEmh>
void setup()
{
  Serial.begin(115200);
  while (!Serial);

  Serial.println("--------------------------------------");
     a18:	60 e1       	ldi	r22, 0x10	; 16
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	85 eb       	ldi	r24, 0xB5	; 181
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN5Print7printlnEPKc>
  Serial.println("CAN Monitor-Interface");
     a24:	67 e3       	ldi	r22, 0x37	; 55
     a26:	71 e0       	ldi	r23, 0x01	; 1
     a28:	85 eb       	ldi	r24, 0xB5	; 181
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN5Print7printlnEPKc>
  Serial.println("--------------------------------------");
     a30:	60 e1       	ldi	r22, 0x10	; 16
     a32:	71 e0       	ldi	r23, 0x01	; 1
     a34:	85 eb       	ldi	r24, 0xB5	; 181
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN5Print7printlnEPKc>
  Serial.println("100 Ready");  //Set CAN speed. Note: Speed is now 500kbit/s so adjust your CAN monitor
     a3c:	6d e4       	ldi	r22, 0x4D	; 77
     a3e:	71 e0       	ldi	r23, 0x01	; 1
     a40:	85 eb       	ldi	r24, 0xB5	; 181
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN5Print7printlnEPKc>
    CAN_MCP2515(uint8_t CS_Pin);

    // Initializes CAN communications into Normal mode. Note it also starts SPI communications
    inline void begin (uint32_t bitrate)
    {
      begin(bitrate, MCP2515_MODE_NORMAL);
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	40 e9       	ldi	r20, 0x90	; 144
     a4c:	50 ed       	ldi	r21, 0xD0	; 208
     a4e:	63 e0       	ldi	r22, 0x03	; 3
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	8e e7       	ldi	r24, 0x7E	; 126
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	0e 94 0a 04 	call	0x814	; 0x814 <_ZN11CAN_MCP25155beginEmh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a5a:	2f ef       	ldi	r18, 0xFF	; 255
     a5c:	89 e6       	ldi	r24, 0x69	; 105
     a5e:	98 e1       	ldi	r25, 0x18	; 24
     a60:	21 50       	subi	r18, 0x01	; 1
     a62:	80 40       	sbci	r24, 0x00	; 0
     a64:	90 40       	sbci	r25, 0x00	; 0
     a66:	e1 f7       	brne	.-8      	; 0xa60 <setup+0x5a>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <setup+0x64>
     a6a:	00 00       	nop
  CAN.begin(CAN_BPS_250K);
  _delay_ms(500);  // Delay added just so we can have time to open up //serial Monitor and CAN bus monitor. It can be removed later...
  hash = generateHash(UID+99);
     a6c:	63 e6       	ldi	r22, 0x63	; 99
     a6e:	79 e0       	ldi	r23, 0x09	; 9
     a70:	80 e5       	ldi	r24, 0x50	; 80
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 49 04 	call	0x892	; 0x892 <_Z12generateHashm>
     a78:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <hash+0x1>
     a7c:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <hash>
     a80:	08 95       	ret

00000a82 <_Z10printFramev>:
    sendCanFrame(outgoingMsg);
  }
  printFrame();
}

void printFrame(){
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
  Serial.print(incomingMsg.hash, HEX);
     a88:	cb e9       	ldi	r28, 0x9B	; 155
     a8a:	d1 e0       	ldi	r29, 0x01	; 1
     a8c:	6d 81       	ldd	r22, Y+5	; 0x05
     a8e:	7e 81       	ldd	r23, Y+6	; 0x06
     a90:	40 e1       	ldi	r20, 0x10	; 16
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	85 eb       	ldi	r24, 0xB5	; 181
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN5Print5printEji>
  Serial.print(" ");
     a9c:	6b e5       	ldi	r22, 0x5B	; 91
     a9e:	71 e0       	ldi	r23, 0x01	; 1
     aa0:	85 eb       	ldi	r24, 0xB5	; 181
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN5Print5printEPKc>
  Serial.print(incomingMsg.cmd, HEX);
     aa8:	40 e1       	ldi	r20, 0x10	; 16
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	6c 81       	ldd	r22, Y+4	; 0x04
     aae:	85 eb       	ldi	r24, 0xB5	; 181
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN5Print5printEhi>
  Serial.print(" ");
     ab6:	6b e5       	ldi	r22, 0x5B	; 91
     ab8:	71 e0       	ldi	r23, 0x01	; 1
     aba:	85 eb       	ldi	r24, 0xB5	; 181
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN5Print5printEPKc>
  if (incomingMsg.resp_bit==true)
     ac2:	8f 81       	ldd	r24, Y+7	; 0x07
     ac4:	88 23       	and	r24, r24
     ac6:	39 f0       	breq	.+14     	; 0xad6 <_Z10printFramev+0x54>
    Serial.print("R ");
     ac8:	67 e5       	ldi	r22, 0x57	; 87
     aca:	71 e0       	ldi	r23, 0x01	; 1
     acc:	85 eb       	ldi	r24, 0xB5	; 181
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN5Print5printEPKc>
     ad4:	06 c0       	rjmp	.+12     	; 0xae2 <_Z10printFramev+0x60>
  else
    Serial.print("  ");
     ad6:	6a e5       	ldi	r22, 0x5A	; 90
     ad8:	71 e0       	ldi	r23, 0x01	; 1
     ada:	85 eb       	ldi	r24, 0xB5	; 181
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN5Print5printEPKc>
  Serial.print(incomingMsg.length, HEX);
     ae2:	c8 ea       	ldi	r28, 0xA8	; 168
     ae4:	d1 e0       	ldi	r29, 0x01	; 1
     ae6:	68 81       	ld	r22, Y
     ae8:	62 95       	swap	r22
     aea:	6f 70       	andi	r22, 0x0F	; 15
     aec:	40 e1       	ldi	r20, 0x10	; 16
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	85 eb       	ldi	r24, 0xB5	; 181
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN5Print5printEhi>
  Serial.print(" ");
     af8:	6b e5       	ldi	r22, 0x5B	; 91
     afa:	71 e0       	ldi	r23, 0x01	; 1
     afc:	85 eb       	ldi	r24, 0xB5	; 181
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN5Print5printEPKc>
  for (byte i=0; i<incomingMsg.length; i++)
     b04:	88 81       	ld	r24, Y
     b06:	82 95       	swap	r24
     b08:	8f 70       	andi	r24, 0x0F	; 15
     b0a:	e9 f0       	breq	.+58     	; 0xb46 <_Z10printFramev+0xc4>
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	10 e0       	ldi	r17, 0x00	; 0
  {
    Serial.print(incomingMsg.data[i], HEX);
     b12:	f9 01       	movw	r30, r18
     b14:	e5 56       	subi	r30, 0x65	; 101
     b16:	fe 4f       	sbci	r31, 0xFE	; 254
     b18:	40 e1       	ldi	r20, 0x10	; 16
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	60 89       	ldd	r22, Z+16	; 0x10
     b1e:	85 eb       	ldi	r24, 0xB5	; 181
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN5Print5printEhi>
    Serial.print(" ");
     b26:	6b e5       	ldi	r22, 0x5B	; 91
     b28:	71 e0       	ldi	r23, 0x01	; 1
     b2a:	85 eb       	ldi	r24, 0xB5	; 181
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN5Print5printEPKc>
    Serial.print("R ");
  else
    Serial.print("  ");
  Serial.print(incomingMsg.length, HEX);
  Serial.print(" ");
  for (byte i=0; i<incomingMsg.length; i++)
     b32:	1f 5f       	subi	r17, 0xFF	; 255
     b34:	21 2f       	mov	r18, r17
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	88 81       	ld	r24, Y
     b3a:	82 95       	swap	r24
     b3c:	8f 70       	andi	r24, 0x0F	; 15
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	28 17       	cp	r18, r24
     b42:	39 07       	cpc	r19, r25
     b44:	34 f3       	brlt	.-52     	; 0xb12 <_Z10printFramev+0x90>
  {
    Serial.print(incomingMsg.data[i], HEX);
    Serial.print(" ");
  }
  Serial.println();
     b46:	85 eb       	ldi	r24, 0xB5	; 181
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN5Print7printlnEv>
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	08 95       	ret

00000b56 <_Z14processRXFramev>:
    processRXFrame();
  }
}

void processRXFrame()
{
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	68 97       	sbiw	r28, 0x18	; 24
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
  incomingMsg = getCanFrame();
     b6a:	ce 01       	movw	r24, r28
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	0e 94 9b 04 	call	0x936	; 0x936 <_Z11getCanFramev>
     b72:	88 e1       	ldi	r24, 0x18	; 24
     b74:	fe 01       	movw	r30, r28
     b76:	31 96       	adiw	r30, 0x01	; 1
     b78:	ab e9       	ldi	r26, 0x9B	; 155
     b7a:	b1 e0       	ldi	r27, 0x01	; 1
     b7c:	01 90       	ld	r0, Z+
     b7e:	0d 92       	st	X+, r0
     b80:	8a 95       	dec	r24
     b82:	e1 f7       	brne	.-8      	; 0xb7c <_Z14processRXFramev+0x26>
  if ((incomingMsg.cmd == PING) && (incomingMsg.resp_bit == false)) {
     b84:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <incomingMsg+0x4>
     b88:	88 31       	cpi	r24, 0x18	; 24
     b8a:	71 f5       	brne	.+92     	; 0xbe8 <_Z14processRXFramev+0x92>
     b8c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <incomingMsg+0x7>
     b90:	81 11       	cpse	r24, r1
     b92:	2a c0       	rjmp	.+84     	; 0xbe8 <_Z14processRXFramev+0x92>
    outgoingMsg.cmd = PING;
     b94:	e3 e8       	ldi	r30, 0x83	; 131
     b96:	f1 e0       	ldi	r31, 0x01	; 1
     b98:	88 e1       	ldi	r24, 0x18	; 24
     b9a:	84 83       	std	Z+4, r24	; 0x04
    outgoingMsg.hash = hash;
     b9c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <hash>
     ba0:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <hash+0x1>
     ba4:	96 83       	std	Z+6, r25	; 0x06
     ba6:	85 83       	std	Z+5, r24	; 0x05
    outgoingMsg.resp_bit = true;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	87 83       	std	Z+7, r24	; 0x07
    outgoingMsg.length = 0;
     bac:	e0 e9       	ldi	r30, 0x90	; 144
     bae:	f1 e0       	ldi	r31, 0x01	; 1
     bb0:	80 81       	ld	r24, Z
     bb2:	8f 70       	andi	r24, 0x0F	; 15
     bb4:	80 83       	st	Z, r24
    sendCanFrame(outgoingMsg);
     bb6:	8d b7       	in	r24, 0x3d	; 61
     bb8:	9e b7       	in	r25, 0x3e	; 62
     bba:	48 97       	sbiw	r24, 0x18	; 24
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	9e bf       	out	0x3e, r25	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	8d bf       	out	0x3d, r24	; 61
     bc6:	ad b7       	in	r26, 0x3d	; 61
     bc8:	be b7       	in	r27, 0x3e	; 62
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	88 e1       	ldi	r24, 0x18	; 24
     bce:	e3 e8       	ldi	r30, 0x83	; 131
     bd0:	f1 e0       	ldi	r31, 0x01	; 1
     bd2:	01 90       	ld	r0, Z+
     bd4:	0d 92       	st	X+, r0
     bd6:	8a 95       	dec	r24
     bd8:	e1 f7       	brne	.-8      	; 0xbd2 <_Z14processRXFramev+0x7c>
     bda:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z12sendCanFrame9CAN_Frame>
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	cd bf       	out	0x3d, r28	; 61
  }
  printFrame();
     be8:	0e 94 41 05 	call	0xa82	; 0xa82 <_Z10printFramev>
}
     bec:	68 96       	adiw	r28, 0x18	; 24
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <loop>:
}

// Test rapid fire ping/pong of extended frames
void loop()
{
  if (CAN.available())
     bfe:	8e e7       	ldi	r24, 0x7E	; 126
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN11CAN_MCP25159availableEv>
     c06:	81 11       	cpse	r24, r1
  {
    // Process
    processRXFrame();
     c08:	0e 94 ab 05 	call	0xb56	; 0xb56 <_Z14processRXFramev>
     c0c:	08 95       	ret

00000c0e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     c0e:	83 30       	cpi	r24, 0x03	; 3
     c10:	81 f0       	breq	.+32     	; 0xc32 <turnOffPWM+0x24>
     c12:	28 f4       	brcc	.+10     	; 0xc1e <turnOffPWM+0x10>
     c14:	81 30       	cpi	r24, 0x01	; 1
     c16:	99 f0       	breq	.+38     	; 0xc3e <turnOffPWM+0x30>
     c18:	82 30       	cpi	r24, 0x02	; 2
     c1a:	a1 f0       	breq	.+40     	; 0xc44 <turnOffPWM+0x36>
     c1c:	08 95       	ret
     c1e:	87 30       	cpi	r24, 0x07	; 7
     c20:	a9 f0       	breq	.+42     	; 0xc4c <turnOffPWM+0x3e>
     c22:	88 30       	cpi	r24, 0x08	; 8
     c24:	b9 f0       	breq	.+46     	; 0xc54 <turnOffPWM+0x46>
     c26:	84 30       	cpi	r24, 0x04	; 4
     c28:	d1 f4       	brne	.+52     	; 0xc5e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     c2a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     c2e:	8f 7d       	andi	r24, 0xDF	; 223
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     c32:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     c36:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     c38:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     c3c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     c3e:	84 b5       	in	r24, 0x24	; 36
     c40:	8f 77       	andi	r24, 0x7F	; 127
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     c44:	84 b5       	in	r24, 0x24	; 36
     c46:	8f 7d       	andi	r24, 0xDF	; 223
     c48:	84 bd       	out	0x24, r24	; 36
     c4a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     c4c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     c50:	8f 77       	andi	r24, 0x7F	; 127
     c52:	03 c0       	rjmp	.+6      	; 0xc5a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     c54:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     c58:	8f 7d       	andi	r24, 0xDF	; 223
     c5a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     c5e:	08 95       	ret

00000c60 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	fc 01       	movw	r30, r24
     c68:	e4 58       	subi	r30, 0x84	; 132
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     c6e:	fc 01       	movw	r30, r24
     c70:	e0 57       	subi	r30, 0x70	; 112
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     c76:	88 23       	and	r24, r24
     c78:	49 f1       	breq	.+82     	; 0xccc <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	fc 01       	movw	r30, r24
     c82:	e2 55       	subi	r30, 0x52	; 82
     c84:	ff 4f       	sbci	r31, 0xFF	; 255
     c86:	a5 91       	lpm	r26, Z+
     c88:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     c8a:	8c 55       	subi	r24, 0x5C	; 92
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	fc 01       	movw	r30, r24
     c90:	c5 91       	lpm	r28, Z+
     c92:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
     c94:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
     c96:	61 11       	cpse	r22, r1
     c98:	08 c0       	rjmp	.+16     	; 0xcaa <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
     c9a:	f8 94       	cli
		*reg &= ~bit;
     c9c:	8c 91       	ld	r24, X
     c9e:	20 95       	com	r18
     ca0:	82 23       	and	r24, r18
     ca2:	8c 93       	st	X, r24
		*out &= ~bit;
     ca4:	88 81       	ld	r24, Y
     ca6:	82 23       	and	r24, r18
     ca8:	0a c0       	rjmp	.+20     	; 0xcbe <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     caa:	62 30       	cpi	r22, 0x02	; 2
     cac:	51 f4       	brne	.+20     	; 0xcc2 <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
     cae:	f8 94       	cli
		*reg &= ~bit;
     cb0:	8c 91       	ld	r24, X
     cb2:	32 2f       	mov	r19, r18
     cb4:	30 95       	com	r19
     cb6:	83 23       	and	r24, r19
     cb8:	8c 93       	st	X, r24
		*out |= bit;
     cba:	88 81       	ld	r24, Y
     cbc:	82 2b       	or	r24, r18
     cbe:	88 83       	st	Y, r24
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
     cc2:	f8 94       	cli
		*reg |= bit;
     cc4:	8c 91       	ld	r24, X
     cc6:	82 2b       	or	r24, r18
     cc8:	8c 93       	st	X, r24
		SREG = oldSREG;
     cca:	9f bf       	out	0x3f, r25	; 63
	}
}
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	08 95       	ret

00000cd2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	1f 92       	push	r1
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	f9 01       	movw	r30, r18
     ce6:	e8 59       	subi	r30, 0x98	; 152
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     cec:	f9 01       	movw	r30, r18
     cee:	e4 58       	subi	r30, 0x84	; 132
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     cf4:	f9 01       	movw	r30, r18
     cf6:	e0 57       	subi	r30, 0x70	; 112
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     cfc:	00 23       	and	r16, r16
     cfe:	c9 f0       	breq	.+50     	; 0xd32 <digitalWrite+0x60>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     d00:	88 23       	and	r24, r24
     d02:	21 f0       	breq	.+8      	; 0xd0c <digitalWrite+0x3a>
     d04:	69 83       	std	Y+1, r22	; 0x01
     d06:	0e 94 07 06 	call	0xc0e	; 0xc0e <turnOffPWM>
     d0a:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
     d0c:	e0 2f       	mov	r30, r16
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	ee 0f       	add	r30, r30
     d12:	ff 1f       	adc	r31, r31
     d14:	ec 55       	subi	r30, 0x5C	; 92
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	a5 91       	lpm	r26, Z+
     d1a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     d1c:	9f b7       	in	r25, 0x3f	; 63
	cli();
     d1e:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     d20:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     d22:	61 11       	cpse	r22, r1
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <digitalWrite+0x5a>
		*out &= ~bit;
     d26:	10 95       	com	r17
     d28:	81 23       	and	r24, r17
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <digitalWrite+0x5c>
	} else {
		*out |= bit;
     d2c:	81 2b       	or	r24, r17
     d2e:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
     d30:	9f bf       	out	0x3f, r25	; 63
}
     d32:	0f 90       	pop	r0
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	08 95       	ret

00000d3e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     d3e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     d40:	81 8d       	ldd	r24, Z+25	; 0x19
     d42:	22 8d       	ldd	r18, Z+26	; 0x1a
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	80 5c       	subi	r24, 0xC0	; 192
     d48:	9f 4f       	sbci	r25, 0xFF	; 255
     d4a:	82 1b       	sub	r24, r18
     d4c:	91 09       	sbc	r25, r1
}
     d4e:	8f 73       	andi	r24, 0x3F	; 63
     d50:	99 27       	eor	r25, r25
     d52:	08 95       	ret

00000d54 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     d54:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     d56:	91 8d       	ldd	r25, Z+25	; 0x19
     d58:	82 8d       	ldd	r24, Z+26	; 0x1a
     d5a:	98 17       	cp	r25, r24
     d5c:	31 f0       	breq	.+12     	; 0xd6a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     d5e:	82 8d       	ldd	r24, Z+26	; 0x1a
     d60:	e8 0f       	add	r30, r24
     d62:	f1 1d       	adc	r31, r1
     d64:	85 8d       	ldd	r24, Z+29	; 0x1d
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d6a:	8f ef       	ldi	r24, 0xFF	; 255
     d6c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     d6e:	08 95       	ret

00000d70 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     d70:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     d72:	91 8d       	ldd	r25, Z+25	; 0x19
     d74:	82 8d       	ldd	r24, Z+26	; 0x1a
     d76:	98 17       	cp	r25, r24
     d78:	61 f0       	breq	.+24     	; 0xd92 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     d7a:	82 8d       	ldd	r24, Z+26	; 0x1a
     d7c:	df 01       	movw	r26, r30
     d7e:	a8 0f       	add	r26, r24
     d80:	b1 1d       	adc	r27, r1
     d82:	5d 96       	adiw	r26, 0x1d	; 29
     d84:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     d86:	92 8d       	ldd	r25, Z+26	; 0x1a
     d88:	9f 5f       	subi	r25, 0xFF	; 255
     d8a:	9f 73       	andi	r25, 0x3F	; 63
     d8c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     d96:	08 95       	ret

00000d98 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     d98:	8c e3       	ldi	r24, 0x3C	; 60
     d9a:	98 e0       	ldi	r25, 0x08	; 8
     d9c:	89 2b       	or	r24, r25
     d9e:	49 f0       	breq	.+18     	; 0xdb2 <_Z14serialEventRunv+0x1a>
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	89 2b       	or	r24, r25
     da6:	29 f0       	breq	.+10     	; 0xdb2 <_Z14serialEventRunv+0x1a>
     da8:	0e 94 3c 08 	call	0x1078	; 0x1078 <_Z17Serial0_availablev>
     dac:	81 11       	cpse	r24, r1
     dae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     db2:	08 95       	ret

00000db4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     db4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     db6:	84 8d       	ldd	r24, Z+28	; 0x1c
     db8:	df 01       	movw	r26, r30
     dba:	a8 0f       	add	r26, r24
     dbc:	b1 1d       	adc	r27, r1
     dbe:	a3 5a       	subi	r26, 0xA3	; 163
     dc0:	bf 4f       	sbci	r27, 0xFF	; 255
     dc2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     dc4:	84 8d       	ldd	r24, Z+28	; 0x1c
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	8f 73       	andi	r24, 0x3F	; 63
     dcc:	99 27       	eor	r25, r25
     dce:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     dd0:	a6 89       	ldd	r26, Z+22	; 0x16
     dd2:	b7 89       	ldd	r27, Z+23	; 0x17
     dd4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     dd6:	a0 89       	ldd	r26, Z+16	; 0x10
     dd8:	b1 89       	ldd	r27, Z+17	; 0x11
     dda:	8c 91       	ld	r24, X
     ddc:	80 64       	ori	r24, 0x40	; 64
     dde:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     de0:	93 8d       	ldd	r25, Z+27	; 0x1b
     de2:	84 8d       	ldd	r24, Z+28	; 0x1c
     de4:	98 13       	cpse	r25, r24
     de6:	06 c0       	rjmp	.+12     	; 0xdf4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     de8:	02 88       	ldd	r0, Z+18	; 0x12
     dea:	f3 89       	ldd	r31, Z+19	; 0x13
     dec:	e0 2d       	mov	r30, r0
     dee:	80 81       	ld	r24, Z
     df0:	8f 7d       	andi	r24, 0xDF	; 223
     df2:	80 83       	st	Z, r24
     df4:	08 95       	ret

00000df6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     dfc:	88 8d       	ldd	r24, Y+24	; 0x18
     dfe:	88 23       	and	r24, r24
     e00:	c9 f0       	breq	.+50     	; 0xe34 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     e02:	ea 89       	ldd	r30, Y+18	; 0x12
     e04:	fb 89       	ldd	r31, Y+19	; 0x13
     e06:	80 81       	ld	r24, Z
     e08:	85 fd       	sbrc	r24, 5
     e0a:	05 c0       	rjmp	.+10     	; 0xe16 <_ZN14HardwareSerial5flushEv+0x20>
     e0c:	a8 89       	ldd	r26, Y+16	; 0x10
     e0e:	b9 89       	ldd	r27, Y+17	; 0x11
     e10:	8c 91       	ld	r24, X
     e12:	86 fd       	sbrc	r24, 6
     e14:	0f c0       	rjmp	.+30     	; 0xe34 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	07 fc       	sbrc	r0, 7
     e1a:	f5 cf       	rjmp	.-22     	; 0xe06 <_ZN14HardwareSerial5flushEv+0x10>
     e1c:	80 81       	ld	r24, Z
     e1e:	85 ff       	sbrs	r24, 5
     e20:	f2 cf       	rjmp	.-28     	; 0xe06 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     e22:	a8 89       	ldd	r26, Y+16	; 0x10
     e24:	b9 89       	ldd	r27, Y+17	; 0x11
     e26:	8c 91       	ld	r24, X
     e28:	85 ff       	sbrs	r24, 5
     e2a:	ed cf       	rjmp	.-38     	; 0xe06 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     e2c:	ce 01       	movw	r24, r28
     e2e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     e32:	e7 cf       	rjmp	.-50     	; 0xe02 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ff 92       	push	r15
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	1f 92       	push	r1
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	6c 01       	movw	r12, r24
  _written = true;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	d6 01       	movw	r26, r12
     e54:	58 96       	adiw	r26, 0x18	; 24
     e56:	8c 93       	st	X, r24
     e58:	58 97       	sbiw	r26, 0x18	; 24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     e5a:	5b 96       	adiw	r26, 0x1b	; 27
     e5c:	9c 91       	ld	r25, X
     e5e:	5b 97       	sbiw	r26, 0x1b	; 27
     e60:	5c 96       	adiw	r26, 0x1c	; 28
     e62:	8c 91       	ld	r24, X
     e64:	5c 97       	sbiw	r26, 0x1c	; 28
     e66:	98 13       	cpse	r25, r24
     e68:	07 c0       	rjmp	.+14     	; 0xe78 <_ZN14HardwareSerial5writeEh+0x3e>
     e6a:	50 96       	adiw	r26, 0x10	; 16
     e6c:	ed 91       	ld	r30, X+
     e6e:	fc 91       	ld	r31, X
     e70:	51 97       	sbiw	r26, 0x11	; 17
     e72:	80 81       	ld	r24, Z
     e74:	85 fd       	sbrc	r24, 5
     e76:	2e c0       	rjmp	.+92     	; 0xed4 <_ZN14HardwareSerial5writeEh+0x9a>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     e78:	f6 01       	movw	r30, r12
     e7a:	03 8d       	ldd	r16, Z+27	; 0x1b
     e7c:	10 e0       	ldi	r17, 0x00	; 0
     e7e:	0f 5f       	subi	r16, 0xFF	; 255
     e80:	1f 4f       	sbci	r17, 0xFF	; 255
     e82:	0f 73       	andi	r16, 0x3F	; 63
     e84:	11 27       	eor	r17, r17
     e86:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     e88:	f6 01       	movw	r30, r12
     e8a:	84 8d       	ldd	r24, Z+28	; 0x1c
     e8c:	f8 12       	cpse	r15, r24
     e8e:	11 c0       	rjmp	.+34     	; 0xeb2 <_ZN14HardwareSerial5writeEh+0x78>
    if (bit_is_clear(SREG, SREG_I)) {
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	07 fc       	sbrc	r0, 7
     e94:	f9 cf       	rjmp	.-14     	; 0xe88 <_ZN14HardwareSerial5writeEh+0x4e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     e96:	d6 01       	movw	r26, r12
     e98:	50 96       	adiw	r26, 0x10	; 16
     e9a:	ed 91       	ld	r30, X+
     e9c:	fc 91       	ld	r31, X
     e9e:	51 97       	sbiw	r26, 0x11	; 17
     ea0:	80 81       	ld	r24, Z
     ea2:	85 ff       	sbrs	r24, 5
     ea4:	f1 cf       	rjmp	.-30     	; 0xe88 <_ZN14HardwareSerial5writeEh+0x4e>
	_tx_udr_empty_irq();
     ea6:	c6 01       	movw	r24, r12
     ea8:	69 83       	std	Y+1, r22	; 0x01
     eaa:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     eae:	69 81       	ldd	r22, Y+1	; 0x01
     eb0:	eb cf       	rjmp	.-42     	; 0xe88 <_ZN14HardwareSerial5writeEh+0x4e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     eb2:	83 8d       	ldd	r24, Z+27	; 0x1b
     eb4:	e8 0f       	add	r30, r24
     eb6:	f1 1d       	adc	r31, r1
     eb8:	e3 5a       	subi	r30, 0xA3	; 163
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	60 83       	st	Z, r22
  _tx_buffer_head = i;
     ebe:	d6 01       	movw	r26, r12
     ec0:	5b 96       	adiw	r26, 0x1b	; 27
     ec2:	0c 93       	st	X, r16
     ec4:	5b 97       	sbiw	r26, 0x1b	; 27
	
  sbi(*_ucsrb, UDRIE0);
     ec6:	52 96       	adiw	r26, 0x12	; 18
     ec8:	ed 91       	ld	r30, X+
     eca:	fc 91       	ld	r31, X
     ecc:	53 97       	sbiw	r26, 0x13	; 19
     ece:	80 81       	ld	r24, Z
     ed0:	80 62       	ori	r24, 0x20	; 32
     ed2:	0c c0       	rjmp	.+24     	; 0xeec <_ZN14HardwareSerial5writeEh+0xb2>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     ed4:	d6 01       	movw	r26, r12
     ed6:	56 96       	adiw	r26, 0x16	; 22
     ed8:	ed 91       	ld	r30, X+
     eda:	fc 91       	ld	r31, X
     edc:	57 97       	sbiw	r26, 0x17	; 23
     ede:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     ee0:	50 96       	adiw	r26, 0x10	; 16
     ee2:	ed 91       	ld	r30, X+
     ee4:	fc 91       	ld	r31, X
     ee6:	51 97       	sbiw	r26, 0x11	; 17
     ee8:	80 81       	ld	r24, Z
     eea:	80 64       	ori	r24, 0x40	; 64
     eec:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0f 90       	pop	r0
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	08 95       	ret

00000f04 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     f04:	bf 92       	push	r11
     f06:	cf 92       	push	r12
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	ec 01       	movw	r28, r24
     f14:	6a 01       	movw	r12, r20
     f16:	7b 01       	movw	r14, r22
     f18:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     f1a:	e8 89       	ldd	r30, Y+16	; 0x10
     f1c:	f9 89       	ldd	r31, Y+17	; 0x11
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f22:	41 15       	cp	r20, r1
     f24:	81 ee       	ldi	r24, 0xE1	; 225
     f26:	58 07       	cpc	r21, r24
     f28:	61 05       	cpc	r22, r1
     f2a:	71 05       	cpc	r23, r1
     f2c:	a1 f0       	breq	.+40     	; 0xf56 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	79 e0       	ldi	r23, 0x09	; 9
     f32:	8d e3       	ldi	r24, 0x3D	; 61
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	a7 01       	movw	r20, r14
     f38:	96 01       	movw	r18, r12
     f3a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__udivmodsi4>
     f3e:	21 50       	subi	r18, 0x01	; 1
     f40:	31 09       	sbc	r19, r1
     f42:	41 09       	sbc	r20, r1
     f44:	51 09       	sbc	r21, r1
     f46:	56 95       	lsr	r21
     f48:	47 95       	ror	r20
     f4a:	37 95       	ror	r19
     f4c:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     f4e:	21 15       	cp	r18, r1
     f50:	80 e1       	ldi	r24, 0x10	; 16
     f52:	38 07       	cpc	r19, r24
     f54:	98 f0       	brcs	.+38     	; 0xf7c <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
     f56:	e8 89       	ldd	r30, Y+16	; 0x10
     f58:	f9 89       	ldd	r31, Y+17	; 0x11
     f5a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     f5c:	60 e8       	ldi	r22, 0x80	; 128
     f5e:	74 e8       	ldi	r23, 0x84	; 132
     f60:	8e e1       	ldi	r24, 0x1E	; 30
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	a7 01       	movw	r20, r14
     f66:	96 01       	movw	r18, r12
     f68:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__udivmodsi4>
     f6c:	21 50       	subi	r18, 0x01	; 1
     f6e:	31 09       	sbc	r19, r1
     f70:	41 09       	sbc	r20, r1
     f72:	51 09       	sbc	r21, r1
     f74:	56 95       	lsr	r21
     f76:	47 95       	ror	r20
     f78:	37 95       	ror	r19
     f7a:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     f7c:	ec 85       	ldd	r30, Y+12	; 0x0c
     f7e:	fd 85       	ldd	r31, Y+13	; 0x0d
     f80:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     f82:	ee 85       	ldd	r30, Y+14	; 0x0e
     f84:	ff 85       	ldd	r31, Y+15	; 0x0f
     f86:	20 83       	st	Z, r18

  _written = false;
     f88:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     f8a:	ec 89       	ldd	r30, Y+20	; 0x14
     f8c:	fd 89       	ldd	r31, Y+21	; 0x15
     f8e:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     f90:	ea 89       	ldd	r30, Y+18	; 0x12
     f92:	fb 89       	ldd	r31, Y+19	; 0x13
     f94:	80 81       	ld	r24, Z
     f96:	80 61       	ori	r24, 0x10	; 16
     f98:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     f9a:	ea 89       	ldd	r30, Y+18	; 0x12
     f9c:	fb 89       	ldd	r31, Y+19	; 0x13
     f9e:	80 81       	ld	r24, Z
     fa0:	88 60       	ori	r24, 0x08	; 8
     fa2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     fa4:	ea 89       	ldd	r30, Y+18	; 0x12
     fa6:	fb 89       	ldd	r31, Y+19	; 0x13
     fa8:	80 81       	ld	r24, Z
     faa:	80 68       	ori	r24, 0x80	; 128
     fac:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     fae:	ea 89       	ldd	r30, Y+18	; 0x12
     fb0:	fb 89       	ldd	r31, Y+19	; 0x13
     fb2:	80 81       	ld	r24, Z
     fb4:	8f 7d       	andi	r24, 0xDF	; 223
     fb6:	80 83       	st	Z, r24
}
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	df 90       	pop	r13
     fc2:	cf 90       	pop	r12
     fc4:	bf 90       	pop	r11
     fc6:	08 95       	ret

00000fc8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	2f 93       	push	r18
     fd4:	8f 93       	push	r24
     fd6:	9f 93       	push	r25
     fd8:	ef 93       	push	r30
     fda:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     fdc:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <Serial+0x10>
     fe0:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <Serial+0x11>
     fe4:	80 81       	ld	r24, Z
     fe6:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <Serial+0x16>
     fea:	f0 91 cc 01 	lds	r31, 0x01CC	; 0x8001cc <Serial+0x17>
     fee:	82 fd       	sbrc	r24, 2
     ff0:	12 c0       	rjmp	.+36     	; 0x1016 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     ff2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     ff4:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <Serial+0x19>
     ff8:	8f 5f       	subi	r24, 0xFF	; 255
     ffa:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     ffc:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <Serial+0x1a>
    1000:	82 17       	cp	r24, r18
    1002:	51 f0       	breq	.+20     	; 0x1018 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1004:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <Serial+0x19>
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	eb 54       	subi	r30, 0x4B	; 75
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1010:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <Serial+0x19>
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1016:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1018:	ff 91       	pop	r31
    101a:	ef 91       	pop	r30
    101c:	9f 91       	pop	r25
    101e:	8f 91       	pop	r24
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	0f 90       	pop	r0
    1028:	1f 90       	pop	r1
    102a:	18 95       	reti

0000102c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    102c:	1f 92       	push	r1
    102e:	0f 92       	push	r0
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	0f 92       	push	r0
    1034:	11 24       	eor	r1, r1
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	4f 93       	push	r20
    103c:	5f 93       	push	r21
    103e:	6f 93       	push	r22
    1040:	7f 93       	push	r23
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    104e:	85 eb       	ldi	r24, 0xB5	; 181
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1056:	ff 91       	pop	r31
    1058:	ef 91       	pop	r30
    105a:	bf 91       	pop	r27
    105c:	af 91       	pop	r26
    105e:	9f 91       	pop	r25
    1060:	8f 91       	pop	r24
    1062:	7f 91       	pop	r23
    1064:	6f 91       	pop	r22
    1066:	5f 91       	pop	r21
    1068:	4f 91       	pop	r20
    106a:	3f 91       	pop	r19
    106c:	2f 91       	pop	r18
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	0f 90       	pop	r0
    1074:	1f 90       	pop	r1
    1076:	18 95       	reti

00001078 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1078:	85 eb       	ldi	r24, 0xB5	; 181
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_ZN14HardwareSerial9availableEv>
    1080:	21 e0       	ldi	r18, 0x01	; 1
    1082:	89 2b       	or	r24, r25
    1084:	09 f4       	brne	.+2      	; 0x1088 <_Z17Serial0_availablev+0x10>
    1086:	20 e0       	ldi	r18, 0x00	; 0
}
    1088:	82 2f       	mov	r24, r18
    108a:	08 95       	ret

0000108c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    108c:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <Serial+0x3>
    1090:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <Serial+0x2>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1094:	88 ee       	ldi	r24, 0xE8	; 232
    1096:	93 e0       	ldi	r25, 0x03	; 3
    1098:	a0 e0       	ldi	r26, 0x00	; 0
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <Serial+0x4>
    10a0:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <Serial+0x5>
    10a4:	a0 93 bb 01 	sts	0x01BB, r26	; 0x8001bb <Serial+0x6>
    10a8:	b0 93 bc 01 	sts	0x01BC, r27	; 0x8001bc <Serial+0x7>
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    10ac:	81 e6       	ldi	r24, 0x61	; 97
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <Serial+0x1>
    10b4:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <Serial>
    10b8:	85 ec       	ldi	r24, 0xC5	; 197
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <Serial+0xd>
    10c0:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <Serial+0xc>
    10c4:	84 ec       	ldi	r24, 0xC4	; 196
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <Serial+0xf>
    10cc:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <Serial+0xe>
    10d0:	80 ec       	ldi	r24, 0xC0	; 192
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <Serial+0x11>
    10d8:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Serial+0x10>
    10dc:	81 ec       	ldi	r24, 0xC1	; 193
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <Serial+0x13>
    10e4:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Serial+0x12>
    10e8:	82 ec       	ldi	r24, 0xC2	; 194
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <Serial+0x15>
    10f0:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <Serial+0x14>
    10f4:	86 ec       	ldi	r24, 0xC6	; 198
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <Serial+0x17>
    10fc:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <Serial+0x16>
    1100:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <Serial+0x19>
    1104:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <Serial+0x1a>
    1108:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <Serial+0x1b>
    110c:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <Serial+0x1c>
    1110:	08 95       	ret

00001112 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	7c 01       	movw	r14, r24
    1124:	6a 01       	movw	r12, r20
    1126:	eb 01       	movw	r28, r22
  size_t n = 0;
    1128:	00 e0       	ldi	r16, 0x00	; 0
    112a:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    112c:	0c 15       	cp	r16, r12
    112e:	1d 05       	cpc	r17, r13
    1130:	71 f0       	breq	.+28     	; 0x114e <_ZN5Print5writeEPKhj+0x3c>
    if (write(*buffer++)) n++;
    1132:	69 91       	ld	r22, Y+
    1134:	d7 01       	movw	r26, r14
    1136:	ed 91       	ld	r30, X+
    1138:	fc 91       	ld	r31, X
    113a:	01 90       	ld	r0, Z+
    113c:	f0 81       	ld	r31, Z
    113e:	e0 2d       	mov	r30, r0
    1140:	c7 01       	movw	r24, r14
    1142:	09 95       	icall
    1144:	89 2b       	or	r24, r25
    1146:	19 f0       	breq	.+6      	; 0x114e <_ZN5Print5writeEPKhj+0x3c>
    1148:	0f 5f       	subi	r16, 0xFF	; 255
    114a:	1f 4f       	sbci	r17, 0xFF	; 255
    114c:	ef cf       	rjmp	.-34     	; 0x112c <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
    114e:	c8 01       	movw	r24, r16
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	df 90       	pop	r13
    115e:	cf 90       	pop	r12
    1160:	08 95       	ret

00001162 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1162:	61 15       	cp	r22, r1
    1164:	71 05       	cpc	r23, r1
    1166:	81 f0       	breq	.+32     	; 0x1188 <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
    1168:	db 01       	movw	r26, r22
    116a:	0d 90       	ld	r0, X+
    116c:	00 20       	and	r0, r0
    116e:	e9 f7       	brne	.-6      	; 0x116a <_ZN5Print5writeEPKc+0x8>
    1170:	ad 01       	movw	r20, r26
    1172:	41 50       	subi	r20, 0x01	; 1
    1174:	51 09       	sbc	r21, r1
    1176:	46 1b       	sub	r20, r22
    1178:	57 0b       	sbc	r21, r23
    117a:	dc 01       	movw	r26, r24
    117c:	ed 91       	ld	r30, X+
    117e:	fc 91       	ld	r31, X
    1180:	02 80       	ldd	r0, Z+2	; 0x02
    1182:	f3 81       	ldd	r31, Z+3	; 0x03
    1184:	e0 2d       	mov	r30, r0
    1186:	09 94       	ijmp
    }
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	08 95       	ret

0000118e <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    118e:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <_ZN5Print5writeEPKc>

00001192 <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
    1192:	6d e6       	ldi	r22, 0x6D	; 109
    1194:	71 e0       	ldi	r23, 0x01	; 1
    1196:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <_ZN5Print5writeEPKc>

0000119a <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    11a4:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN5Print5writeEPKc>
    11a8:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    11aa:	ce 01       	movw	r24, r28
    11ac:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN5Print7printlnEv>
  return n;
}
    11b0:	80 0f       	add	r24, r16
    11b2:	91 1f       	adc	r25, r17
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	08 95       	ret

000011be <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    11be:	8f 92       	push	r8
    11c0:	9f 92       	push	r9
    11c2:	af 92       	push	r10
    11c4:	bf 92       	push	r11
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	a1 97       	sbiw	r28, 0x21	; 33
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	7c 01       	movw	r14, r24
    11e6:	f4 2f       	mov	r31, r20
    11e8:	d5 2e       	mov	r13, r21
    11ea:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    11ec:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	08 f4       	brcc	.+2      	; 0x11f4 <_ZN5Print11printNumberEmh+0x36>
    11f2:	2a e0       	ldi	r18, 0x0A	; 10
    11f4:	8e 01       	movw	r16, r28
    11f6:	0f 5d       	subi	r16, 0xDF	; 223
    11f8:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    11fa:	82 2e       	mov	r8, r18
    11fc:	91 2c       	mov	r9, r1
    11fe:	a1 2c       	mov	r10, r1
    1200:	b1 2c       	mov	r11, r1
    1202:	6f 2f       	mov	r22, r31
    1204:	7d 2d       	mov	r23, r13
    1206:	a5 01       	movw	r20, r10
    1208:	94 01       	movw	r18, r8
    120a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__udivmodsi4>
    n /= base;
    120e:	f2 2f       	mov	r31, r18
    1210:	d3 2e       	mov	r13, r19
    1212:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1214:	01 50       	subi	r16, 0x01	; 1
    1216:	11 09       	sbc	r17, r1
    1218:	6a 30       	cpi	r22, 0x0A	; 10
    121a:	14 f4       	brge	.+4      	; 0x1220 <_ZN5Print11printNumberEmh+0x62>
    121c:	e0 e3       	ldi	r30, 0x30	; 48
    121e:	01 c0       	rjmp	.+2      	; 0x1222 <_ZN5Print11printNumberEmh+0x64>
    1220:	e7 e3       	ldi	r30, 0x37	; 55
    1222:	e6 0f       	add	r30, r22
    1224:	d8 01       	movw	r26, r16
    1226:	ec 93       	st	X, r30
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1228:	23 2b       	or	r18, r19
    122a:	24 2b       	or	r18, r20
    122c:	25 2b       	or	r18, r21
    122e:	49 f7       	brne	.-46     	; 0x1202 <_ZN5Print11printNumberEmh+0x44>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1230:	b8 01       	movw	r22, r16
    1232:	c7 01       	movw	r24, r14
    1234:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN5Print5writeEPKc>
}
    1238:	a1 96       	adiw	r28, 0x21	; 33
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	bf 90       	pop	r11
    1254:	af 90       	pop	r10
    1256:	9f 90       	pop	r9
    1258:	8f 90       	pop	r8
    125a:	08 95       	ret

0000125c <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    125c:	21 15       	cp	r18, r1
    125e:	31 05       	cpc	r19, r1
    1260:	41 f4       	brne	.+16     	; 0x1272 <_ZN5Print5printEmi+0x16>
    1262:	dc 01       	movw	r26, r24
    1264:	ed 91       	ld	r30, X+
    1266:	fc 91       	ld	r31, X
    1268:	01 90       	ld	r0, Z+
    126a:	f0 81       	ld	r31, Z
    126c:	e0 2d       	mov	r30, r0
    126e:	64 2f       	mov	r22, r20
    1270:	09 94       	ijmp
  else return printNumber(n, base);
    1272:	0c 94 df 08 	jmp	0x11be	; 0x11be <_ZN5Print11printNumberEmh>

00001276 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1276:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    1278:	46 2f       	mov	r20, r22
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	0c 94 2e 09 	jmp	0x125c	; 0x125c <_ZN5Print5printEmi>

00001284 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    1284:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    1286:	ab 01       	movw	r20, r22
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	0c 94 2e 09 	jmp	0x125c	; 0x125c <_ZN5Print5printEmi>

00001290 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1290:	08 95       	ret

00001292 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1292:	0e 94 a2 09 	call	0x1344	; 0x1344 <init>

	initVariant();
    1296:	0e 94 48 09 	call	0x1290	; 0x1290 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    129a:	0e 94 03 05 	call	0xa06	; 0xa06 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    129e:	cc ec       	ldi	r28, 0xCC	; 204
    12a0:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    12a2:	0e 94 ff 05 	call	0xbfe	; 0xbfe <loop>
		if (serialEventRun) serialEventRun();
    12a6:	20 97       	sbiw	r28, 0x00	; 0
    12a8:	e1 f3       	breq	.-8      	; 0x12a2 <main+0x10>
    12aa:	0e 94 cc 06 	call	0xd98	; 0xd98 <_Z14serialEventRunv>
    12ae:	f9 cf       	rjmp	.-14     	; 0x12a2 <main+0x10>

000012b0 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	8f 93       	push	r24
    12c0:	9f 93       	push	r25
    12c2:	af 93       	push	r26
    12c4:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    12c6:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <timer0_millis>
    12ca:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <timer0_millis+0x1>
    12ce:	a0 91 55 02 	lds	r26, 0x0255	; 0x800255 <timer0_millis+0x2>
    12d2:	b0 91 56 02 	lds	r27, 0x0256	; 0x800256 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    12d6:	30 91 52 02 	lds	r19, 0x0252	; 0x800252 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    12da:	23 e0       	ldi	r18, 0x03	; 3
    12dc:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    12de:	2d 37       	cpi	r18, 0x7D	; 125
    12e0:	20 f4       	brcc	.+8      	; 0x12ea <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	a1 1d       	adc	r26, r1
    12e6:	b1 1d       	adc	r27, r1
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    12ea:	26 e8       	ldi	r18, 0x86	; 134
    12ec:	23 0f       	add	r18, r19
		m += 1;
    12ee:	02 96       	adiw	r24, 0x02	; 2
    12f0:	a1 1d       	adc	r26, r1
    12f2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    12f4:	20 93 52 02 	sts	0x0252, r18	; 0x800252 <timer0_fract>
	timer0_millis = m;
    12f8:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <timer0_millis>
    12fc:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <timer0_millis+0x1>
    1300:	a0 93 55 02 	sts	0x0255, r26	; 0x800255 <timer0_millis+0x2>
    1304:	b0 93 56 02 	sts	0x0256, r27	; 0x800256 <timer0_millis+0x3>
	timer0_overflow_count++;
    1308:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <timer0_overflow_count>
    130c:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <timer0_overflow_count+0x1>
    1310:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <timer0_overflow_count+0x2>
    1314:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <timer0_overflow_count+0x3>
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	a1 1d       	adc	r26, r1
    131c:	b1 1d       	adc	r27, r1
    131e:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <timer0_overflow_count>
    1322:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <timer0_overflow_count+0x1>
    1326:	a0 93 59 02 	sts	0x0259, r26	; 0x800259 <timer0_overflow_count+0x2>
    132a:	b0 93 5a 02 	sts	0x025A, r27	; 0x80025a <timer0_overflow_count+0x3>
}
    132e:	bf 91       	pop	r27
    1330:	af 91       	pop	r26
    1332:	9f 91       	pop	r25
    1334:	8f 91       	pop	r24
    1336:	3f 91       	pop	r19
    1338:	2f 91       	pop	r18
    133a:	0f 90       	pop	r0
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	0f 90       	pop	r0
    1340:	1f 90       	pop	r1
    1342:	18 95       	reti

00001344 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1344:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1346:	84 b5       	in	r24, 0x24	; 36
    1348:	82 60       	ori	r24, 0x02	; 2
    134a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    134c:	84 b5       	in	r24, 0x24	; 36
    134e:	81 60       	ori	r24, 0x01	; 1
    1350:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1352:	85 b5       	in	r24, 0x25	; 37
    1354:	82 60       	ori	r24, 0x02	; 2
    1356:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1358:	85 b5       	in	r24, 0x25	; 37
    135a:	81 60       	ori	r24, 0x01	; 1
    135c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    135e:	ee e6       	ldi	r30, 0x6E	; 110
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	81 60       	ori	r24, 0x01	; 1
    1366:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1368:	e1 e8       	ldi	r30, 0x81	; 129
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    136e:	80 81       	ld	r24, Z
    1370:	82 60       	ori	r24, 0x02	; 2
    1372:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1374:	80 81       	ld	r24, Z
    1376:	81 60       	ori	r24, 0x01	; 1
    1378:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    137a:	e0 e8       	ldi	r30, 0x80	; 128
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	81 60       	ori	r24, 0x01	; 1
    1382:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1384:	e1 eb       	ldi	r30, 0xB1	; 177
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	84 60       	ori	r24, 0x04	; 4
    138c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    138e:	e0 eb       	ldi	r30, 0xB0	; 176
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	81 60       	ori	r24, 0x01	; 1
    1396:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1398:	ea e7       	ldi	r30, 0x7A	; 122
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	84 60       	ori	r24, 0x04	; 4
    13a0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    13a2:	80 81       	ld	r24, Z
    13a4:	82 60       	ori	r24, 0x02	; 2
    13a6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    13a8:	80 81       	ld	r24, Z
    13aa:	81 60       	ori	r24, 0x01	; 1
    13ac:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    13ae:	80 81       	ld	r24, Z
    13b0:	80 68       	ori	r24, 0x80	; 128
    13b2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    13b4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    13b8:	08 95       	ret

000013ba <__udivmodsi4>:
    13ba:	a1 e2       	ldi	r26, 0x21	; 33
    13bc:	1a 2e       	mov	r1, r26
    13be:	aa 1b       	sub	r26, r26
    13c0:	bb 1b       	sub	r27, r27
    13c2:	fd 01       	movw	r30, r26
    13c4:	0d c0       	rjmp	.+26     	; 0x13e0 <__udivmodsi4_ep>

000013c6 <__udivmodsi4_loop>:
    13c6:	aa 1f       	adc	r26, r26
    13c8:	bb 1f       	adc	r27, r27
    13ca:	ee 1f       	adc	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	a2 17       	cp	r26, r18
    13d0:	b3 07       	cpc	r27, r19
    13d2:	e4 07       	cpc	r30, r20
    13d4:	f5 07       	cpc	r31, r21
    13d6:	20 f0       	brcs	.+8      	; 0x13e0 <__udivmodsi4_ep>
    13d8:	a2 1b       	sub	r26, r18
    13da:	b3 0b       	sbc	r27, r19
    13dc:	e4 0b       	sbc	r30, r20
    13de:	f5 0b       	sbc	r31, r21

000013e0 <__udivmodsi4_ep>:
    13e0:	66 1f       	adc	r22, r22
    13e2:	77 1f       	adc	r23, r23
    13e4:	88 1f       	adc	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	1a 94       	dec	r1
    13ea:	69 f7       	brne	.-38     	; 0x13c6 <__udivmodsi4_loop>
    13ec:	60 95       	com	r22
    13ee:	70 95       	com	r23
    13f0:	80 95       	com	r24
    13f2:	90 95       	com	r25
    13f4:	9b 01       	movw	r18, r22
    13f6:	ac 01       	movw	r20, r24
    13f8:	bd 01       	movw	r22, r26
    13fa:	cf 01       	movw	r24, r30
    13fc:	08 95       	ret

000013fe <__tablejump2__>:
    13fe:	ee 0f       	add	r30, r30
    1400:	ff 1f       	adc	r31, r31
    1402:	05 90       	lpm	r0, Z+
    1404:	f4 91       	lpm	r31, Z
    1406:	e0 2d       	mov	r30, r0
    1408:	09 94       	ijmp

0000140a <_exit>:
    140a:	f8 94       	cli

0000140c <__stop_program>:
    140c:	ff cf       	rjmp	.-2      	; 0x140c <__stop_program>
