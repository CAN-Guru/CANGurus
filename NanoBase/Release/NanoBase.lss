
NanoBase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000015ee  00001682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  00800128  00800128  000016aa  2**0
                  ALLOC
  3 .comment      00000041  00000000  00000000  000016aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001730  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001489  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9a  00000000  00000000  00002d11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000959  00000000  00000000  000037ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00004104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000781  00000000  00000000  000043bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a79  00000000  00000000  00004b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000055b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__vector_1>
       8:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__vector_2>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__vector_16>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	46 04       	cpc	r4, r6

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ee ee       	ldi	r30, 0xEE	; 238
      ce:	f5 e1       	ldi	r31, 0x15	; 21
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	a8 32       	cpi	r26, 0x28	; 40
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	21 e0       	ldi	r18, 0x01	; 1
      de:	a8 e2       	ldi	r26, 0x28	; 40
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	aa 37       	cpi	r26, 0x7A	; 122
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	cd e5       	ldi	r28, 0x5D	; 93
      f0:	d0 e0       	ldi	r29, 0x00	; 0
      f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
      f4:	21 97       	sbiw	r28, 0x01	; 1
      f6:	fe 01       	movw	r30, r28
      f8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__tablejump2__>
      fc:	cc 35       	cpi	r28, 0x5C	; 92
      fe:	d1 07       	cpc	r29, r17
     100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
     102:	0e 94 9d 0a 	call	0x153a	; 0x153a <main>
     106:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <_ZN11CAN_MCP25153endEv>:
     10e:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <_ZN8SPIClass3endEv>

00000112 <_ZN8SPIClass8transferEh>:
     112:	8e bd       	out	0x2e, r24	; 46
     114:	00 00       	nop
     116:	0d b4       	in	r0, 0x2d	; 45
     118:	07 fe       	sbrs	r0, 7
     11a:	fd cf       	rjmp	.-6      	; 0x116 <_ZN8SPIClass8transferEh+0x4>
     11c:	8e b5       	in	r24, 0x2e	; 46
     11e:	08 95       	ret

00000120 <_ZN11CAN_MCP25155_initEv>:
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	ec 01       	movw	r28, r24
     126:	61 e0       	ldi	r22, 0x01	; 1
     128:	8a 81       	ldd	r24, Y+2	; 0x02
     12a:	0e 94 2d 0a 	call	0x145a	; 0x145a <pinMode>
     12e:	61 e0       	ldi	r22, 0x01	; 1
     130:	8a 81       	ldd	r24, Y+2	; 0x02
     132:	df 91       	pop	r29
     134:	cf 91       	pop	r28
     136:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <digitalWrite>

0000013a <_ZN11CAN_MCP2515C1Ev>:
     13a:	28 e1       	ldi	r18, 0x18	; 24
     13c:	31 e0       	ldi	r19, 0x01	; 1
     13e:	fc 01       	movw	r30, r24
     140:	31 83       	std	Z+1, r19	; 0x01
     142:	20 83       	st	Z, r18
     144:	2a e0       	ldi	r18, 0x0A	; 10
     146:	22 83       	std	Z+2, r18	; 0x02
     148:	0c 94 90 00 	jmp	0x120	; 0x120 <_ZN11CAN_MCP25155_initEv>

0000014c <_ZN11CAN_MCP2515C1Eh>:
     14c:	28 e1       	ldi	r18, 0x18	; 24
     14e:	31 e0       	ldi	r19, 0x01	; 1
     150:	fc 01       	movw	r30, r24
     152:	31 83       	std	Z+1, r19	; 0x01
     154:	20 83       	st	Z, r18
     156:	62 83       	std	Z+2, r22	; 0x02
     158:	0c 94 90 00 	jmp	0x120	; 0x120 <_ZN11CAN_MCP25155_initEv>

0000015c <_ZN11CAN_MCP25155resetEv>:
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	ec 01       	movw	r28, r24
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     16a:	80 ec       	ldi	r24, 0xC0	; 192
     16c:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     170:	61 e0       	ldi	r22, 0x01	; 1
     172:	8a 81       	ldd	r24, Y+2	; 0x02
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <digitalWrite>

0000017c <_ZN11CAN_MCP251512writeAddressEhh>:
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	1f 93       	push	r17
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	1f 92       	push	r1
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
     18c:	7c 01       	movw	r14, r24
     18e:	16 2f       	mov	r17, r22
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	fc 01       	movw	r30, r24
     194:	82 81       	ldd	r24, Z+2	; 0x02
     196:	49 83       	std	Y+1, r20	; 0x01
     198:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     19c:	82 e0       	ldi	r24, 0x02	; 2
     19e:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     1a2:	81 2f       	mov	r24, r17
     1a4:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     1a8:	49 81       	ldd	r20, Y+1	; 0x01
     1aa:	84 2f       	mov	r24, r20
     1ac:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     1b0:	61 e0       	ldi	r22, 0x01	; 1
     1b2:	f7 01       	movw	r30, r14
     1b4:	82 81       	ldd	r24, Z+2	; 0x02
     1b6:	0f 90       	pop	r0
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	1f 91       	pop	r17
     1be:	ff 90       	pop	r15
     1c0:	ef 90       	pop	r14
     1c2:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <digitalWrite>

000001c6 <_ZN11CAN_MCP251513modifyAddressEhhh>:
     1c6:	ef 92       	push	r14
     1c8:	ff 92       	push	r15
     1ca:	1f 93       	push	r17
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <_ZN11CAN_MCP251513modifyAddressEhhh+0xc>
     1d2:	cd b7       	in	r28, 0x3d	; 61
     1d4:	de b7       	in	r29, 0x3e	; 62
     1d6:	7c 01       	movw	r14, r24
     1d8:	16 2f       	mov	r17, r22
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	fc 01       	movw	r30, r24
     1de:	82 81       	ldd	r24, Z+2	; 0x02
     1e0:	2a 83       	std	Y+2, r18	; 0x02
     1e2:	49 83       	std	Y+1, r20	; 0x01
     1e4:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     1e8:	85 e0       	ldi	r24, 0x05	; 5
     1ea:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     1ee:	81 2f       	mov	r24, r17
     1f0:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     1f4:	49 81       	ldd	r20, Y+1	; 0x01
     1f6:	84 2f       	mov	r24, r20
     1f8:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     1fc:	2a 81       	ldd	r18, Y+2	; 0x02
     1fe:	82 2f       	mov	r24, r18
     200:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     204:	61 e0       	ldi	r22, 0x01	; 1
     206:	f7 01       	movw	r30, r14
     208:	82 81       	ldd	r24, Z+2	; 0x02
     20a:	0f 90       	pop	r0
     20c:	0f 90       	pop	r0
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	1f 91       	pop	r17
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <digitalWrite>

0000021c <_ZN11CAN_MCP251510readStatusEv>:
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	ec 01       	movw	r28, r24
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	8a 81       	ldd	r24, Y+2	; 0x02
     228:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     22c:	80 ea       	ldi	r24, 0xA0	; 160
     22e:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     232:	8f ef       	ldi	r24, 0xFF	; 255
     234:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     238:	18 2f       	mov	r17, r24
     23a:	61 e0       	ldi	r22, 0x01	; 1
     23c:	8a 81       	ldd	r24, Y+2	; 0x02
     23e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     242:	81 2f       	mov	r24, r17
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	08 95       	ret

0000024c <_ZN11CAN_MCP25159availableEv>:
     24c:	0e 94 0e 01 	call	0x21c	; 0x21c <_ZN11CAN_MCP251510readStatusEv>
     250:	83 70       	andi	r24, 0x03	; 3
     252:	08 95       	ret

00000254 <_ZN11CAN_MCP25154readEv>:
     254:	4f 92       	push	r4
     256:	5f 92       	push	r5
     258:	6f 92       	push	r6
     25a:	7f 92       	push	r7
     25c:	8f 92       	push	r8
     25e:	9f 92       	push	r9
     260:	af 92       	push	r10
     262:	bf 92       	push	r11
     264:	df 92       	push	r13
     266:	ef 92       	push	r14
     268:	ff 92       	push	r15
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
     274:	4b 01       	movw	r8, r22
     276:	cb 01       	movw	r24, r22
     278:	0e 94 0e 01 	call	0x21c	; 0x21c <_ZN11CAN_MCP251510readStatusEv>
     27c:	80 fd       	sbrc	r24, 0
     27e:	05 c0       	rjmp	.+10     	; 0x28a <_ZN11CAN_MCP25154readEv+0x36>
     280:	81 fd       	sbrc	r24, 1
     282:	05 c0       	rjmp	.+10     	; 0x28e <_ZN11CAN_MCP25154readEv+0x3a>
     284:	88 85       	ldd	r24, Y+8	; 0x08
     286:	8e 7f       	andi	r24, 0xFE	; 254
     288:	a2 c0       	rjmp	.+324    	; 0x3ce <_ZN11CAN_MCP25154readEv+0x17a>
     28a:	10 e9       	ldi	r17, 0x90	; 144
     28c:	01 c0       	rjmp	.+2      	; 0x290 <_ZN11CAN_MCP25154readEv+0x3c>
     28e:	14 e9       	ldi	r17, 0x94	; 148
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	f4 01       	movw	r30, r8
     294:	82 81       	ldd	r24, Z+2	; 0x02
     296:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     29a:	81 2f       	mov	r24, r17
     29c:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
     2a2:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     2a6:	d8 2e       	mov	r13, r24
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     2ae:	e8 2e       	mov	r14, r24
     2b0:	8f ef       	ldi	r24, 0xFF	; 255
     2b2:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     2b6:	08 2f       	mov	r16, r24
     2b8:	8f ef       	ldi	r24, 0xFF	; 255
     2ba:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     2be:	18 2f       	mov	r17, r24
     2c0:	8f ef       	ldi	r24, 0xFF	; 255
     2c2:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     2c6:	f8 2e       	mov	r15, r24
     2c8:	28 2f       	mov	r18, r24
     2ca:	2f 70       	andi	r18, 0x0F	; 15
     2cc:	92 2f       	mov	r25, r18
     2ce:	92 95       	swap	r25
     2d0:	90 7f       	andi	r25, 0xF0	; 240
     2d2:	8d 85       	ldd	r24, Y+13	; 0x0d
     2d4:	8f 70       	andi	r24, 0x0F	; 15
     2d6:	89 2b       	or	r24, r25
     2d8:	8d 87       	std	Y+13, r24	; 0x0d
     2da:	3e 01       	movw	r6, r28
     2dc:	f0 e1       	ldi	r31, 0x10	; 16
     2de:	6f 0e       	add	r6, r31
     2e0:	71 1c       	adc	r7, r1
     2e2:	41 2c       	mov	r4, r1
     2e4:	51 2c       	mov	r5, r1
     2e6:	a2 2e       	mov	r10, r18
     2e8:	b1 2c       	mov	r11, r1
     2ea:	4a 14       	cp	r4, r10
     2ec:	5b 04       	cpc	r5, r11
     2ee:	54 f4       	brge	.+20     	; 0x304 <_ZN11CAN_MCP25154readEv+0xb0>
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     2f6:	f3 01       	movw	r30, r6
     2f8:	81 93       	st	Z+, r24
     2fa:	3f 01       	movw	r6, r30
     2fc:	ff ef       	ldi	r31, 0xFF	; 255
     2fe:	4f 1a       	sub	r4, r31
     300:	5f 0a       	sbc	r5, r31
     302:	f3 cf       	rjmp	.-26     	; 0x2ea <_ZN11CAN_MCP25154readEv+0x96>
     304:	61 e0       	ldi	r22, 0x01	; 1
     306:	f4 01       	movw	r30, r8
     308:	82 81       	ldd	r24, Z+2	; 0x02
     30a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     30e:	2e 2d       	mov	r18, r14
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	c9 01       	movw	r24, r18
     314:	43 e0       	ldi	r20, 0x03	; 3
     316:	95 95       	asr	r25
     318:	87 95       	ror	r24
     31a:	4a 95       	dec	r20
     31c:	e1 f7       	brne	.-8      	; 0x316 <_ZN11CAN_MCP25154readEv+0xc2>
     31e:	e8 85       	ldd	r30, Y+8	; 0x08
     320:	80 fb       	bst	r24, 0
     322:	e2 f9       	bld	r30, 2
     324:	e8 87       	std	Y+8, r30	; 0x08
     326:	fb 81       	ldd	r31, Y+3	; 0x03
     328:	e2 ff       	sbrs	r30, 2
     32a:	32 c0       	rjmp	.+100    	; 0x390 <_ZN11CAN_MCP25154readEv+0x13c>
     32c:	4d 2d       	mov	r20, r13
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	60 e0       	ldi	r22, 0x00	; 0
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	a5 e1       	ldi	r26, 0x15	; 21
     336:	44 0f       	add	r20, r20
     338:	55 1f       	adc	r21, r21
     33a:	66 1f       	adc	r22, r22
     33c:	77 1f       	adc	r23, r23
     33e:	aa 95       	dec	r26
     340:	d1 f7       	brne	.-12     	; 0x336 <_ZN11CAN_MCP25154readEv+0xe2>
     342:	50 2b       	or	r21, r16
     344:	41 2b       	or	r20, r17
     346:	0e 2d       	mov	r16, r14
     348:	00 7e       	andi	r16, 0xE0	; 224
     34a:	10 e0       	ldi	r17, 0x00	; 0
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	bd e0       	ldi	r27, 0x0D	; 13
     352:	00 0f       	add	r16, r16
     354:	11 1f       	adc	r17, r17
     356:	22 1f       	adc	r18, r18
     358:	33 1f       	adc	r19, r19
     35a:	ba 95       	dec	r27
     35c:	d1 f7       	brne	.-12     	; 0x352 <_ZN11CAN_MCP25154readEv+0xfe>
     35e:	40 2b       	or	r20, r16
     360:	51 2b       	or	r21, r17
     362:	62 2b       	or	r22, r18
     364:	73 2b       	or	r23, r19
     366:	8e 2d       	mov	r24, r14
     368:	83 70       	andi	r24, 0x03	; 3
     36a:	68 2b       	or	r22, r24
     36c:	48 83       	st	Y, r20
     36e:	59 83       	std	Y+1, r21	; 0x01
     370:	6a 83       	std	Y+2, r22	; 0x02
     372:	87 2f       	mov	r24, r23
     374:	8f 71       	andi	r24, 0x1F	; 31
     376:	f0 7e       	andi	r31, 0xE0	; 224
     378:	f8 2b       	or	r31, r24
     37a:	fb 83       	std	Y+3, r31	; 0x03
     37c:	8f 2d       	mov	r24, r15
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	16 e0       	ldi	r17, 0x06	; 6
     382:	95 95       	asr	r25
     384:	87 95       	ror	r24
     386:	1a 95       	dec	r17
     388:	e1 f7       	brne	.-8      	; 0x382 <_ZN11CAN_MCP25154readEv+0x12e>
     38a:	80 fb       	bst	r24, 0
     38c:	e1 f9       	bld	r30, 1
     38e:	1c c0       	rjmp	.+56     	; 0x3c8 <_ZN11CAN_MCP25154readEv+0x174>
     390:	48 e0       	ldi	r20, 0x08	; 8
     392:	d4 9e       	mul	r13, r20
     394:	c0 01       	movw	r24, r0
     396:	11 24       	eor	r1, r1
     398:	09 2e       	mov	r0, r25
     39a:	00 0c       	add	r0, r0
     39c:	aa 0b       	sbc	r26, r26
     39e:	bb 0b       	sbc	r27, r27
     3a0:	e2 94       	swap	r14
     3a2:	e6 94       	lsr	r14
     3a4:	47 e0       	ldi	r20, 0x07	; 7
     3a6:	e4 22       	and	r14, r20
     3a8:	8e 29       	or	r24, r14
     3aa:	88 83       	st	Y, r24
     3ac:	99 83       	std	Y+1, r25	; 0x01
     3ae:	aa 83       	std	Y+2, r26	; 0x02
     3b0:	8b 2f       	mov	r24, r27
     3b2:	8f 71       	andi	r24, 0x1F	; 31
     3b4:	f0 7e       	andi	r31, 0xE0	; 224
     3b6:	f8 2b       	or	r31, r24
     3b8:	fb 83       	std	Y+3, r31	; 0x03
     3ba:	54 e0       	ldi	r21, 0x04	; 4
     3bc:	35 95       	asr	r19
     3be:	27 95       	ror	r18
     3c0:	5a 95       	dec	r21
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <_ZN11CAN_MCP25154readEv+0x168>
     3c4:	20 fb       	bst	r18, 0
     3c6:	e1 f9       	bld	r30, 1
     3c8:	e8 87       	std	Y+8, r30	; 0x08
     3ca:	88 85       	ldd	r24, Y+8	; 0x08
     3cc:	81 60       	ori	r24, 0x01	; 1
     3ce:	88 87       	std	Y+8, r24	; 0x08
     3d0:	ce 01       	movw	r24, r28
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	ef 90       	pop	r14
     3de:	df 90       	pop	r13
     3e0:	bf 90       	pop	r11
     3e2:	af 90       	pop	r10
     3e4:	9f 90       	pop	r9
     3e6:	8f 90       	pop	r8
     3e8:	7f 90       	pop	r7
     3ea:	6f 90       	pop	r6
     3ec:	5f 90       	pop	r5
     3ee:	4f 90       	pop	r4
     3f0:	08 95       	ret

000003f2 <_ZN11CAN_MCP25155writeERK9CAN_Frame>:
     3f2:	6f 92       	push	r6
     3f4:	7f 92       	push	r7
     3f6:	9f 92       	push	r9
     3f8:	af 92       	push	r10
     3fa:	bf 92       	push	r11
     3fc:	cf 92       	push	r12
     3fe:	df 92       	push	r13
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	00 d0       	rcall	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	3c 01       	movw	r6, r24
     414:	8b 01       	movw	r16, r22
     416:	0e 94 0e 01 	call	0x21c	; 0x21c <_ZN11CAN_MCP251510readStatusEv>
     41a:	82 ff       	sbrs	r24, 2
     41c:	09 c0       	rjmp	.+18     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     41e:	84 ff       	sbrs	r24, 4
     420:	0c c0       	rjmp	.+24     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     422:	86 fd       	sbrc	r24, 6
     424:	9c c0       	rjmp	.+312    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     426:	24 e8       	ldi	r18, 0x84	; 132
     428:	b2 2e       	mov	r11, r18
     42a:	34 e4       	ldi	r19, 0x44	; 68
     42c:	93 2e       	mov	r9, r19
     42e:	09 c0       	rjmp	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     430:	81 e8       	ldi	r24, 0x81	; 129
     432:	b8 2e       	mov	r11, r24
     434:	90 e4       	ldi	r25, 0x40	; 64
     436:	99 2e       	mov	r9, r25
     438:	04 c0       	rjmp	.+8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43a:	a2 e8       	ldi	r26, 0x82	; 130
     43c:	ba 2e       	mov	r11, r26
     43e:	b2 e4       	ldi	r27, 0x42	; 66
     440:	9b 2e       	mov	r9, r27
     442:	f8 01       	movw	r30, r16
     444:	35 85       	ldd	r19, Z+13	; 0x0d
     446:	32 95       	swap	r19
     448:	3f 70       	andi	r19, 0x0F	; 15
     44a:	20 85       	ldd	r18, Z+8	; 0x08
     44c:	93 81       	ldd	r25, Z+3	; 0x03
     44e:	82 2f       	mov	r24, r18
     450:	82 70       	andi	r24, 0x02	; 2
     452:	22 ff       	sbrs	r18, 2
     454:	24 c0       	rjmp	.+72     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     456:	20 81       	ld	r18, Z
     458:	c2 2e       	mov	r12, r18
     45a:	d1 80       	ldd	r13, Z+1	; 0x01
     45c:	e2 80       	ldd	r14, Z+2	; 0x02
     45e:	9f 71       	andi	r25, 0x1F	; 31
     460:	f9 2e       	mov	r15, r25
     462:	b7 01       	movw	r22, r14
     464:	a6 01       	movw	r20, r12
     466:	e5 e1       	ldi	r30, 0x15	; 21
     468:	76 95       	lsr	r23
     46a:	67 95       	ror	r22
     46c:	57 95       	ror	r21
     46e:	47 95       	ror	r20
     470:	ea 95       	dec	r30
     472:	d1 f7       	brne	.-12     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     474:	a4 2e       	mov	r10, r20
     476:	b7 01       	movw	r22, r14
     478:	a6 01       	movw	r20, r12
     47a:	fd e0       	ldi	r31, 0x0D	; 13
     47c:	76 95       	lsr	r23
     47e:	67 95       	ror	r22
     480:	57 95       	ror	r21
     482:	47 95       	ror	r20
     484:	fa 95       	dec	r31
     486:	d1 f7       	brne	.-12     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     488:	40 7e       	andi	r20, 0xE0	; 224
     48a:	9e 2d       	mov	r25, r14
     48c:	93 70       	andi	r25, 0x03	; 3
     48e:	49 2b       	or	r20, r25
     490:	48 60       	ori	r20, 0x08	; 8
     492:	ed 2c       	mov	r14, r13
     494:	f2 2e       	mov	r15, r18
     496:	88 23       	and	r24, r24
     498:	c9 f0       	breq	.+50     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     49a:	30 64       	ori	r19, 0x40	; 64
     49c:	17 c0       	rjmp	.+46     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     49e:	f8 01       	movw	r30, r16
     4a0:	40 81       	ld	r20, Z
     4a2:	51 81       	ldd	r21, Z+1	; 0x01
     4a4:	62 81       	ldd	r22, Z+2	; 0x02
     4a6:	79 2f       	mov	r23, r25
     4a8:	7f 71       	andi	r23, 0x1F	; 31
     4aa:	6a 01       	movw	r12, r20
     4ac:	7b 01       	movw	r14, r22
     4ae:	93 e0       	ldi	r25, 0x03	; 3
     4b0:	f6 94       	lsr	r15
     4b2:	e7 94       	ror	r14
     4b4:	d7 94       	ror	r13
     4b6:	c7 94       	ror	r12
     4b8:	9a 95       	dec	r25
     4ba:	d1 f7       	brne	.-12     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4bc:	ac 2c       	mov	r10, r12
     4be:	42 95       	swap	r20
     4c0:	44 0f       	add	r20, r20
     4c2:	40 7e       	andi	r20, 0xE0	; 224
     4c4:	81 11       	cpse	r24, r1
     4c6:	40 61       	ori	r20, 0x10	; 16
     4c8:	f1 2c       	mov	r15, r1
     4ca:	e1 2c       	mov	r14, r1
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	f3 01       	movw	r30, r6
     4d0:	82 81       	ldd	r24, Z+2	; 0x02
     4d2:	3a 83       	std	Y+2, r19	; 0x02
     4d4:	49 83       	std	Y+1, r20	; 0x01
     4d6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     4da:	89 2d       	mov	r24, r9
     4dc:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     4e0:	8a 2d       	mov	r24, r10
     4e2:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     4e6:	49 81       	ldd	r20, Y+1	; 0x01
     4e8:	84 2f       	mov	r24, r20
     4ea:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     4ee:	8e 2d       	mov	r24, r14
     4f0:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     4f4:	8f 2d       	mov	r24, r15
     4f6:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     4fa:	3a 81       	ldd	r19, Y+2	; 0x02
     4fc:	83 2f       	mov	r24, r19
     4fe:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     502:	68 01       	movw	r12, r16
     504:	f0 e1       	ldi	r31, 0x10	; 16
     506:	cf 0e       	add	r12, r31
     508:	d1 1c       	adc	r13, r1
     50a:	e1 2c       	mov	r14, r1
     50c:	f1 2c       	mov	r15, r1
     50e:	f8 01       	movw	r30, r16
     510:	85 85       	ldd	r24, Z+13	; 0x0d
     512:	82 95       	swap	r24
     514:	8f 70       	andi	r24, 0x0F	; 15
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	e8 16       	cp	r14, r24
     51a:	f9 06       	cpc	r15, r25
     51c:	4c f4       	brge	.+18     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     51e:	f6 01       	movw	r30, r12
     520:	81 91       	ld	r24, Z+
     522:	6f 01       	movw	r12, r30
     524:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     528:	ff ef       	ldi	r31, 0xFF	; 255
     52a:	ef 1a       	sub	r14, r31
     52c:	ff 0a       	sbc	r15, r31
     52e:	ef cf       	rjmp	.-34     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	f3 01       	movw	r30, r6
     534:	82 81       	ldd	r24, Z+2	; 0x02
     536:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	f3 01       	movw	r30, r6
     53e:	82 81       	ldd	r24, Z+2	; 0x02
     540:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     544:	8b 2d       	mov	r24, r11
     546:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     54a:	61 e0       	ldi	r22, 0x01	; 1
     54c:	f3 01       	movw	r30, r6
     54e:	82 81       	ldd	r24, Z+2	; 0x02
     550:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     554:	f8 01       	movw	r30, r16
     556:	85 85       	ldd	r24, Z+13	; 0x0d
     558:	82 95       	swap	r24
     55a:	8f 70       	andi	r24, 0x0F	; 15
     55c:	01 c0       	rjmp	.+2      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	bf 90       	pop	r11
     576:	af 90       	pop	r10
     578:	9f 90       	pop	r9
     57a:	7f 90       	pop	r7
     57c:	6f 90       	pop	r6
     57e:	08 95       	ret

00000580 <_ZN11CAN_MCP25157setModeEh>:
     580:	26 2f       	mov	r18, r22
     582:	40 ee       	ldi	r20, 0xE0	; 224
     584:	6f e0       	ldi	r22, 0x0F	; 15
     586:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_ZN11CAN_MCP251513modifyAddressEhhh>

0000058a <_ZN11CAN_MCP251510setBitrateEm>:
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	ec 01       	movw	r28, r24
     590:	41 e0       	ldi	r20, 0x01	; 1
     592:	6a e2       	ldi	r22, 0x2A	; 42
     594:	0e 94 be 00 	call	0x17c	; 0x17c <_ZN11CAN_MCP251512writeAddressEhh>
     598:	48 eb       	ldi	r20, 0xB8	; 184
     59a:	69 e2       	ldi	r22, 0x29	; 41
     59c:	ce 01       	movw	r24, r28
     59e:	0e 94 be 00 	call	0x17c	; 0x17c <_ZN11CAN_MCP251512writeAddressEhh>
     5a2:	45 e0       	ldi	r20, 0x05	; 5
     5a4:	68 e2       	ldi	r22, 0x28	; 40
     5a6:	ce 01       	movw	r24, r28
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	0c 94 be 00 	jmp	0x17c	; 0x17c <_ZN11CAN_MCP251512writeAddressEhh>

000005b0 <_ZN11CAN_MCP251512clearFiltersEv>:
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	ec 01       	movw	r28, r24
     5b6:	20 e6       	ldi	r18, 0x60	; 96
     5b8:	40 e6       	ldi	r20, 0x60	; 96
     5ba:	60 e6       	ldi	r22, 0x60	; 96
     5bc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_ZN11CAN_MCP251513modifyAddressEhhh>
     5c0:	20 e6       	ldi	r18, 0x60	; 96
     5c2:	40 e6       	ldi	r20, 0x60	; 96
     5c4:	60 e7       	ldi	r22, 0x70	; 112
     5c6:	ce 01       	movw	r24, r28
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_ZN11CAN_MCP251513modifyAddressEhhh>

000005d0 <_ZN11CAN_MCP251514clearRxBuffersEv>:
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	ec 01       	movw	r28, r24
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	8a 81       	ldd	r24, Y+2	; 0x02
     5dc:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     5e6:	81 e6       	ldi	r24, 0x61	; 97
     5e8:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     5ec:	1d e0       	ldi	r17, 0x0D	; 13
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     5f4:	11 50       	subi	r17, 0x01	; 1
     5f6:	d9 f7       	brne	.-10     	; 0x5ee <_ZN11CAN_MCP251514clearRxBuffersEv+0x1e>
     5f8:	61 e0       	ldi	r22, 0x01	; 1
     5fa:	8a 81       	ldd	r24, Y+2	; 0x02
     5fc:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	8a 81       	ldd	r24, Y+2	; 0x02
     604:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     608:	82 e0       	ldi	r24, 0x02	; 2
     60a:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     60e:	81 e7       	ldi	r24, 0x71	; 113
     610:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     614:	1d e0       	ldi	r17, 0x0D	; 13
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     61c:	11 50       	subi	r17, 0x01	; 1
     61e:	d9 f7       	brne	.-10     	; 0x616 <_ZN11CAN_MCP251514clearRxBuffersEv+0x46>
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	8a 81       	ldd	r24, Y+2	; 0x02
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <digitalWrite>

0000062e <_ZN11CAN_MCP251514clearTxBuffersEv>:
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	ec 01       	movw	r28, r24
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	8a 81       	ldd	r24, Y+2	; 0x02
     63a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     644:	81 e3       	ldi	r24, 0x31	; 49
     646:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     64a:	1d e0       	ldi	r17, 0x0D	; 13
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     652:	11 50       	subi	r17, 0x01	; 1
     654:	d9 f7       	brne	.-10     	; 0x64c <_ZN11CAN_MCP251514clearTxBuffersEv+0x1e>
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	8a 81       	ldd	r24, Y+2	; 0x02
     65a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	8a 81       	ldd	r24, Y+2	; 0x02
     662:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     66c:	81 e4       	ldi	r24, 0x41	; 65
     66e:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     672:	1d e0       	ldi	r17, 0x0D	; 13
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     67a:	11 50       	subi	r17, 0x01	; 1
     67c:	d9 f7       	brne	.-10     	; 0x674 <_ZN11CAN_MCP251514clearTxBuffersEv+0x46>
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	8a 81       	ldd	r24, Y+2	; 0x02
     682:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	8a 81       	ldd	r24, Y+2	; 0x02
     68a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     694:	81 e5       	ldi	r24, 0x51	; 81
     696:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     69a:	1d e0       	ldi	r17, 0x0D	; 13
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     6a2:	11 50       	subi	r17, 0x01	; 1
     6a4:	d9 f7       	brne	.-10     	; 0x69c <_ZN11CAN_MCP251514clearTxBuffersEv+0x6e>
     6a6:	61 e0       	ldi	r22, 0x01	; 1
     6a8:	8a 81       	ldd	r24, Y+2	; 0x02
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <digitalWrite>

000006b4 <_ZN11CAN_MCP25155flushEv>:
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	ec 01       	movw	r28, r24
     6ba:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN11CAN_MCP251514clearRxBuffersEv>
     6be:	ce 01       	movw	r24, r28
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	0c 94 17 03 	jmp	0x62e	; 0x62e <_ZN11CAN_MCP251514clearTxBuffersEv>

000006c8 <_ZN11CAN_MCP251516enableInterruptsEh>:
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	ec 01       	movw	r28, r24
     6d0:	16 2f       	mov	r17, r22
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	8a 81       	ldd	r24, Y+2	; 0x02
     6d6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     6e0:	8b e2       	ldi	r24, 0x2B	; 43
     6e2:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     6e6:	81 2f       	mov	r24, r17
     6e8:	0e 94 89 00 	call	0x112	; 0x112 <_ZN8SPIClass8transferEh>
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	8a 81       	ldd	r24, Y+2	; 0x02
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <digitalWrite>

000006fa <_ZN11CAN_MCP25155beginEmh>:
     6fa:	cf 92       	push	r12
     6fc:	df 92       	push	r13
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	1f 92       	push	r1
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	8c 01       	movw	r16, r24
     712:	6a 01       	movw	r12, r20
     714:	7b 01       	movw	r14, r22
     716:	29 83       	std	Y+1, r18	; 0x01
     718:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_ZN8SPIClass5beginEv>
     71c:	c8 01       	movw	r24, r16
     71e:	0e 94 ae 00 	call	0x15c	; 0x15c <_ZN11CAN_MCP25155resetEv>
     722:	c8 01       	movw	r24, r16
     724:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN11CAN_MCP251514clearRxBuffersEv>
     728:	c8 01       	movw	r24, r16
     72a:	0e 94 17 03 	call	0x62e	; 0x62e <_ZN11CAN_MCP251514clearTxBuffersEv>
     72e:	c8 01       	movw	r24, r16
     730:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN11CAN_MCP251512clearFiltersEv>
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	c8 01       	movw	r24, r16
     738:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN11CAN_MCP251516enableInterruptsEh>
     73c:	b7 01       	movw	r22, r14
     73e:	a6 01       	movw	r20, r12
     740:	c8 01       	movw	r24, r16
     742:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN11CAN_MCP251510setBitrateEm>
     746:	29 81       	ldd	r18, Y+1	; 0x01
     748:	62 2f       	mov	r22, r18
     74a:	c8 01       	movw	r24, r16
     74c:	0f 90       	pop	r0
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	0c 94 c0 02 	jmp	0x580	; 0x580 <_ZN11CAN_MCP25157setModeEh>

00000762 <_ZN11CAN_MCP25155beginEm>:
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <_ZN11CAN_MCP25155beginEmh>

00000768 <_ZN15CAN_MCP2515plusC1Eh>:
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	1f 92       	push	r1
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	8c 01       	movw	r16, r24
     778:	69 83       	std	Y+1, r22	; 0x01
     77a:	0e 94 9d 00 	call	0x13a	; 0x13a <_ZN11CAN_MCP2515C1Ev>
     77e:	88 e0       	ldi	r24, 0x08	; 8
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	f8 01       	movw	r30, r16
     784:	91 83       	std	Z+1, r25	; 0x01
     786:	80 83       	st	Z, r24
     788:	69 81       	ldd	r22, Y+1	; 0x01
     78a:	62 83       	std	Z+2, r22	; 0x02
     78c:	c8 01       	movw	r24, r16
     78e:	0f 90       	pop	r0
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	0c 94 90 00 	jmp	0x120	; 0x120 <_ZN11CAN_MCP25155_initEv>

0000079c <_ZN15CAN_MCP2515plus11can_answer2Ehb>:
     79c:	fc 01       	movw	r30, r24
     79e:	83 81       	ldd	r24, Z+3	; 0x03
     7a0:	94 81       	ldd	r25, Z+4	; 0x04
     7a2:	92 8b       	std	Z+18, r25	; 0x12
     7a4:	81 8b       	std	Z+17, r24	; 0x11
     7a6:	43 8b       	std	Z+19, r20	; 0x13
     7a8:	62 95       	swap	r22
     7aa:	60 7f       	andi	r22, 0xF0	; 240
     7ac:	81 8d       	ldd	r24, Z+25	; 0x19
     7ae:	8f 70       	andi	r24, 0x0F	; 15
     7b0:	68 2b       	or	r22, r24
     7b2:	61 8f       	std	Z+25, r22	; 0x19
     7b4:	8d b7       	in	r24, 0x3d	; 61
     7b6:	9e b7       	in	r25, 0x3e	; 62
     7b8:	48 97       	sbiw	r24, 0x18	; 24
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	9e bf       	out	0x3e, r25	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	8d bf       	out	0x3d, r24	; 61
     7c4:	ad b7       	in	r26, 0x3d	; 61
     7c6:	be b7       	in	r27, 0x3e	; 62
     7c8:	11 96       	adiw	r26, 0x01	; 1
     7ca:	88 e1       	ldi	r24, 0x18	; 24
     7cc:	3c 96       	adiw	r30, 0x0c	; 12
     7ce:	01 90       	ld	r0, Z+
     7d0:	0d 92       	st	X+, r0
     7d2:	8a 95       	dec	r24
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <_ZN15CAN_MCP2515plus11can_answer2Ehb+0x32>
     7d6:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z12sendCanFrame9CAN_Frame>
     7da:	8d b7       	in	r24, 0x3d	; 61
     7dc:	9e b7       	in	r25, 0x3e	; 62
     7de:	48 96       	adiw	r24, 0x18	; 24
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	9e bf       	out	0x3e, r25	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	8d bf       	out	0x3d, r24	; 61
     7ea:	08 95       	ret

000007ec <_ZN15CAN_MCP2515plus10can_answerEh>:
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	0c 94 ce 03 	jmp	0x79c	; 0x79c <_ZN15CAN_MCP2515plus11can_answer2Ehb>

000007f2 <_ZN15CAN_MCP2515plus16configTerminatorEii>:
     7f2:	fc 01       	movw	r30, r24
     7f4:	8d e1       	ldi	r24, 0x1D	; 29
     7f6:	80 8b       	std	Z+16, r24	; 0x10
     7f8:	80 85       	ldd	r24, Z+8	; 0x08
     7fa:	84 8f       	std	Z+28, r24	; 0x1c
     7fc:	81 85       	ldd	r24, Z+9	; 0x09
     7fe:	85 8f       	std	Z+29, r24	; 0x1d
     800:	82 85       	ldd	r24, Z+10	; 0x0a
     802:	86 8f       	std	Z+30, r24	; 0x1e
     804:	83 85       	ldd	r24, Z+11	; 0x0b
     806:	87 8f       	std	Z+31, r24	; 0x1f
     808:	60 a3       	std	Z+32, r22	; 0x20
     80a:	41 a3       	std	Z+33, r20	; 0x21
     80c:	66 e0       	ldi	r22, 0x06	; 6
     80e:	cf 01       	movw	r24, r30
     810:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_ZN15CAN_MCP2515plus10can_answerEh>

00000814 <_ZN15CAN_MCP2515plus15configDataFrameEPhi>:
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	fc 01       	movw	r30, r24
     81a:	8d e1       	ldi	r24, 0x1D	; 29
     81c:	80 8b       	std	Z+16, r24	; 0x10
     81e:	4f 5f       	subi	r20, 0xFF	; 255
     820:	5f 4f       	sbci	r21, 0xFF	; 255
     822:	52 8b       	std	Z+18, r21	; 0x12
     824:	41 8b       	std	Z+17, r20	; 0x11
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	83 8b       	std	Z+19, r24	; 0x13
     82a:	81 8d       	ldd	r24, Z+25	; 0x19
     82c:	8f 70       	andi	r24, 0x0F	; 15
     82e:	80 68       	ori	r24, 0x80	; 128
     830:	81 8f       	std	Z+25, r24	; 0x19
     832:	db 01       	movw	r26, r22
     834:	ef 01       	movw	r28, r30
     836:	6c 96       	adiw	r28, 0x1c	; 28
     838:	cf 01       	movw	r24, r30
     83a:	84 96       	adiw	r24, 0x24	; 36
     83c:	2d 91       	ld	r18, X+
     83e:	29 93       	st	Y+, r18
     840:	c8 17       	cp	r28, r24
     842:	d9 07       	cpc	r29, r25
     844:	d9 f7       	brne	.-10     	; 0x83c <_ZN15CAN_MCP2515plus15configDataFrameEPhi+0x28>
     846:	8d b7       	in	r24, 0x3d	; 61
     848:	9e b7       	in	r25, 0x3e	; 62
     84a:	48 97       	sbiw	r24, 0x18	; 24
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	9e bf       	out	0x3e, r25	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	8d bf       	out	0x3d, r24	; 61
     856:	ad b7       	in	r26, 0x3d	; 61
     858:	be b7       	in	r27, 0x3e	; 62
     85a:	11 96       	adiw	r26, 0x01	; 1
     85c:	88 e1       	ldi	r24, 0x18	; 24
     85e:	3c 96       	adiw	r30, 0x0c	; 12
     860:	01 90       	ld	r0, Z+
     862:	0d 92       	st	X+, r0
     864:	8a 95       	dec	r24
     866:	e1 f7       	brne	.-8      	; 0x860 <_ZN15CAN_MCP2515plus15configDataFrameEPhi+0x4c>
     868:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z12sendCanFrame9CAN_Frame>
     86c:	8d b7       	in	r24, 0x3d	; 61
     86e:	9e b7       	in	r25, 0x3e	; 62
     870:	48 96       	adiw	r24, 0x18	; 24
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	9e bf       	out	0x3e, r25	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	8d bf       	out	0x3d, r24	; 61
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	0c 94 8f 09 	jmp	0x131e	; 0x131e <delay>

0000088c <_GLOBAL__sub_I__ZN11CAN_MCP2515C2Ev>:
     88c:	6a e0       	ldi	r22, 0x0A	; 10
     88e:	84 e6       	ldi	r24, 0x64	; 100
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	0e 94 a6 00 	call	0x14c	; 0x14c <_ZN11CAN_MCP2515C1Eh>
     896:	6a e0       	ldi	r22, 0x0A	; 10
     898:	88 e2       	ldi	r24, 0x28	; 40
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	0c 94 b4 03 	jmp	0x768	; 0x768 <_ZN15CAN_MCP2515plusC1Eh>

000008a0 <_Z13highbyte2chari>:
     8a0:	6a e0       	ldi	r22, 0x0A	; 10
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	0e 94 ad 0a 	call	0x155a	; 0x155a <__divmodhi4>
     8a8:	80 e3       	ldi	r24, 0x30	; 48
     8aa:	86 0f       	add	r24, r22
     8ac:	08 95       	ret

000008ae <_Z12lowbyte2chari>:
     8ae:	6a e0       	ldi	r22, 0x0A	; 10
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	0e 94 ad 0a 	call	0x155a	; 0x155a <__divmodhi4>
     8b6:	80 5d       	subi	r24, 0xD0	; 208
     8b8:	08 95       	ret

000008ba <_Z17what_is_your_namePKhhP9CAN_Frame>:
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	60 5f       	subi	r22, 0xF0	; 240
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	fa 01       	movw	r30, r20
     8c2:	e6 0f       	add	r30, r22
     8c4:	f7 1f       	adc	r31, r23
     8c6:	9c 01       	movw	r18, r24
     8c8:	2d 5f       	subi	r18, 0xFD	; 253
     8ca:	3f 4f       	sbci	r19, 0xFF	; 255
     8cc:	dc 01       	movw	r26, r24
     8ce:	4d 91       	ld	r20, X+
     8d0:	cd 01       	movw	r24, r26
     8d2:	41 93       	st	Z+, r20
     8d4:	a2 17       	cp	r26, r18
     8d6:	b3 07       	cpc	r27, r19
     8d8:	c9 f7       	brne	.-14     	; 0x8cc <_Z17what_is_your_namePKhhP9CAN_Frame+0x12>
     8da:	08 95       	ret

000008dc <_Z7hex2dech>:
     8dc:	98 2f       	mov	r25, r24
     8de:	92 95       	swap	r25
     8e0:	9f 70       	andi	r25, 0x0F	; 15
     8e2:	8f 70       	andi	r24, 0x0F	; 15
     8e4:	2a e0       	ldi	r18, 0x0A	; 10
     8e6:	92 9f       	mul	r25, r18
     8e8:	80 0d       	add	r24, r0
     8ea:	11 24       	eor	r1, r1
     8ec:	08 95       	ret

000008ee <_Z11generateUIDmP12deviceparams>:
     8ee:	cf 92       	push	r12
     8f0:	df 92       	push	r13
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	fa 01       	movw	r30, r20
     8f8:	20 81       	ld	r18, Z
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	a9 01       	movw	r20, r18
     8fe:	40 53       	subi	r20, 0x30	; 48
     900:	51 09       	sbc	r21, r1
     902:	21 81       	ldd	r18, Z+1	; 0x01
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	20 53       	subi	r18, 0x30	; 48
     908:	31 09       	sbc	r19, r1
     90a:	d9 01       	movw	r26, r18
     90c:	aa 0f       	add	r26, r26
     90e:	bb 1f       	adc	r27, r27
     910:	2a 0f       	add	r18, r26
     912:	3b 1f       	adc	r19, r27
     914:	24 0f       	add	r18, r20
     916:	35 1f       	adc	r19, r21
     918:	69 01       	movw	r12, r18
     91a:	33 0f       	add	r19, r19
     91c:	ee 08       	sbc	r14, r14
     91e:	ff 08       	sbc	r15, r15
     920:	6c 0d       	add	r22, r12
     922:	7d 1d       	adc	r23, r13
     924:	8e 1d       	adc	r24, r14
     926:	9f 1d       	adc	r25, r15
     928:	93 83       	std	Z+3, r25	; 0x03
     92a:	84 83       	std	Z+4, r24	; 0x04
     92c:	75 83       	std	Z+5, r23	; 0x05
     92e:	66 83       	std	Z+6, r22	; 0x06
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	08 95       	ret

0000093a <_Z12generateHashm>:
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	8c 01       	movw	r16, r24
     940:	22 27       	eor	r18, r18
     942:	33 27       	eor	r19, r19
     944:	60 27       	eor	r22, r16
     946:	71 27       	eor	r23, r17
     948:	cb 01       	movw	r24, r22
     94a:	8f 77       	andi	r24, 0x7F	; 127
     94c:	93 60       	ori	r25, 0x03	; 3
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <_Z16goIntoBootloaderv>:
     954:	e8 e2       	ldi	r30, 0x28	; 40
     956:	f1 e0       	ldi	r31, 0x01	; 1
     958:	83 e0       	ldi	r24, 0x03	; 3
     95a:	84 8f       	std	Z+28, r24	; 0x1c
     95c:	85 81       	ldd	r24, Z+5	; 0x05
     95e:	85 8f       	std	Z+29, r24	; 0x1d
     960:	86 81       	ldd	r24, Z+6	; 0x06
     962:	86 8f       	std	Z+30, r24	; 0x1e
     964:	63 e0       	ldi	r22, 0x03	; 3
     966:	cf 01       	movw	r24, r30
     968:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN15CAN_MCP2515plus10can_answerEh>
     96c:	2f ef       	ldi	r18, 0xFF	; 255
     96e:	84 e3       	ldi	r24, 0x34	; 52
     970:	9c e0       	ldi	r25, 0x0C	; 12
     972:	21 50       	subi	r18, 0x01	; 1
     974:	80 40       	sbci	r24, 0x00	; 0
     976:	90 40       	sbci	r25, 0x00	; 0
     978:	e1 f7       	brne	.-8      	; 0x972 <_Z16goIntoBootloaderv+0x1e>
     97a:	00 c0       	rjmp	.+0      	; 0x97c <_Z16goIntoBootloaderv+0x28>
     97c:	00 00       	nop
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	0e 94 c2 08 	call	0x1184	; 0x1184 <detachInterrupt>
     984:	2f e7       	ldi	r18, 0x7F	; 127
     986:	8f e4       	ldi	r24, 0x4F	; 79
     988:	92 e1       	ldi	r25, 0x12	; 18
     98a:	21 50       	subi	r18, 0x01	; 1
     98c:	80 40       	sbci	r24, 0x00	; 0
     98e:	90 40       	sbci	r25, 0x00	; 0
     990:	e1 f7       	brne	.-8      	; 0x98a <_Z16goIntoBootloaderv+0x36>
     992:	00 c0       	rjmp	.+0      	; 0x994 <_Z16goIntoBootloaderv+0x40>
     994:	00 00       	nop
     996:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <__data_load_end+0x21ea>

0000099a <_Z12sendCanFrame9CAN_Frame>:
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	8d 85       	ldd	r24, Y+13	; 0x0d
     9a4:	84 60       	ori	r24, 0x04	; 4
     9a6:	8d 87       	std	Y+13, r24	; 0x0d
     9a8:	89 85       	ldd	r24, Y+9	; 0x09
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	21 e1       	ldi	r18, 0x11	; 17
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	aa 1f       	adc	r26, r26
     9b8:	bb 1f       	adc	r27, r27
     9ba:	2a 95       	dec	r18
     9bc:	d1 f7       	brne	.-12     	; 0x9b2 <_Z12sendCanFrame9CAN_Frame+0x18>
     9be:	4a 85       	ldd	r20, Y+10	; 0x0a
     9c0:	5b 85       	ldd	r21, Y+11	; 0x0b
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	84 2b       	or	r24, r20
     9c8:	95 2b       	or	r25, r21
     9ca:	a6 2b       	or	r26, r22
     9cc:	b7 2b       	or	r27, r23
     9ce:	28 85       	ldd	r18, Y+8	; 0x08
     9d0:	3c 85       	ldd	r19, Y+12	; 0x0c
     9d2:	20 7e       	andi	r18, 0xE0	; 224
     9d4:	33 23       	and	r19, r19
     9d6:	11 f0       	breq	.+4      	; 0x9dc <_Z12sendCanFrame9CAN_Frame+0x42>
     9d8:	a1 60       	ori	r26, 0x01	; 1
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <_Z12sendCanFrame9CAN_Frame+0x46>
     9dc:	ae 7f       	andi	r26, 0xFE	; 254
     9de:	bf 71       	andi	r27, 0x1F	; 31
     9e0:	8d 83       	std	Y+5, r24	; 0x05
     9e2:	9e 83       	std	Y+6, r25	; 0x06
     9e4:	af 83       	std	Y+7, r26	; 0x07
     9e6:	8b 2f       	mov	r24, r27
     9e8:	8f 71       	andi	r24, 0x1F	; 31
     9ea:	28 2b       	or	r18, r24
     9ec:	28 87       	std	Y+8, r18	; 0x08
     9ee:	be 01       	movw	r22, r28
     9f0:	6b 5f       	subi	r22, 0xFB	; 251
     9f2:	7f 4f       	sbci	r23, 0xFF	; 255
     9f4:	84 e6       	ldi	r24, 0x64	; 100
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_ZN11CAN_MCP25155writeERK9CAN_Frame>
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <_Z11getCanFramev>:
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	ec 01       	movw	r28, r24
     a08:	64 e6       	ldi	r22, 0x64	; 100
     a0a:	71 e0       	ldi	r23, 0x01	; 1
     a0c:	0e 94 2a 01 	call	0x254	; 0x254 <_ZN11CAN_MCP25154readEv>
     a10:	88 81       	ld	r24, Y
     a12:	99 81       	ldd	r25, Y+1	; 0x01
     a14:	aa 81       	ldd	r26, Y+2	; 0x02
     a16:	2b 81       	ldd	r18, Y+3	; 0x03
     a18:	b2 2f       	mov	r27, r18
     a1a:	bf 71       	andi	r27, 0x1F	; 31
     a1c:	ac 01       	movw	r20, r24
     a1e:	bd 01       	movw	r22, r26
     a20:	81 e1       	ldi	r24, 0x11	; 17
     a22:	76 95       	lsr	r23
     a24:	67 95       	ror	r22
     a26:	57 95       	ror	r21
     a28:	47 95       	ror	r20
     a2a:	8a 95       	dec	r24
     a2c:	d1 f7       	brne	.-12     	; 0xa22 <_Z11getCanFramev+0x20>
     a2e:	4c 83       	std	Y+4, r20	; 0x04
     a30:	8a 2f       	mov	r24, r26
     a32:	81 70       	andi	r24, 0x01	; 1
     a34:	8f 83       	std	Y+7, r24	; 0x07
     a36:	ce 01       	movw	r24, r28
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <_ZN8SPIClass5beginEv>:
     a3e:	cf 93       	push	r28
     a40:	cf b7       	in	r28, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_ZN8SPIClass11initializedE>
     a48:	81 11       	cpse	r24, r1
     a4a:	27 c0       	rjmp	.+78     	; 0xa9a <_ZN8SPIClass5beginEv+0x5c>
     a4c:	ea e9       	ldi	r30, 0x9A	; 154
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	84 91       	lpm	r24, Z
     a52:	e6 e8       	ldi	r30, 0x86	; 134
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	94 91       	lpm	r25, Z
     a58:	e8 2f       	mov	r30, r24
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	e2 55       	subi	r30, 0x52	; 82
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	a5 91       	lpm	r26, Z+
     a66:	b4 91       	lpm	r27, Z
     a68:	ec 91       	ld	r30, X
     a6a:	e9 23       	and	r30, r25
     a6c:	21 f4       	brne	.+8      	; 0xa76 <_ZN8SPIClass5beginEv+0x38>
     a6e:	61 e0       	ldi	r22, 0x01	; 1
     a70:	8a e0       	ldi	r24, 0x0A	; 10
     a72:	0e 94 66 0a 	call	0x14cc	; 0x14cc <digitalWrite>
     a76:	61 e0       	ldi	r22, 0x01	; 1
     a78:	8a e0       	ldi	r24, 0x0A	; 10
     a7a:	0e 94 2d 0a 	call	0x145a	; 0x145a <pinMode>
     a7e:	8c b5       	in	r24, 0x2c	; 44
     a80:	80 61       	ori	r24, 0x10	; 16
     a82:	8c bd       	out	0x2c, r24	; 44
     a84:	8c b5       	in	r24, 0x2c	; 44
     a86:	80 64       	ori	r24, 0x40	; 64
     a88:	8c bd       	out	0x2c, r24	; 44
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	8d e0       	ldi	r24, 0x0D	; 13
     a8e:	0e 94 2d 0a 	call	0x145a	; 0x145a <pinMode>
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	8b e0       	ldi	r24, 0x0B	; 11
     a96:	0e 94 2d 0a 	call	0x145a	; 0x145a <pinMode>
     a9a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_ZN8SPIClass11initializedE>
     a9e:	8f 5f       	subi	r24, 0xFF	; 255
     aa0:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <_ZN8SPIClass11initializedE>
     aa4:	cf bf       	out	0x3f, r28	; 63
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <_ZN8SPIClass3endEv>:
     aaa:	9f b7       	in	r25, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_ZN8SPIClass11initializedE>
     ab2:	88 23       	and	r24, r24
     ab4:	19 f0       	breq	.+6      	; 0xabc <_ZN8SPIClass3endEv+0x12>
     ab6:	81 50       	subi	r24, 0x01	; 1
     ab8:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <_ZN8SPIClass11initializedE>
     abc:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_ZN8SPIClass11initializedE>
     ac0:	81 11       	cpse	r24, r1
     ac2:	05 c0       	rjmp	.+10     	; 0xace <_ZN8SPIClass3endEv+0x24>
     ac4:	8c b5       	in	r24, 0x2c	; 44
     ac6:	8f 7b       	andi	r24, 0xBF	; 191
     ac8:	8c bd       	out	0x2c, r24	; 44
     aca:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <_ZN8SPIClass13interruptModeE>
     ace:	9f bf       	out	0x3f, r25	; 63
     ad0:	08 95       	ret

00000ad2 <setup>:
     ad2:	cf 93       	push	r28
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <eeprom_read_byte>
     adc:	87 34       	cpi	r24, 0x47	; 71
     ade:	79 f0       	breq	.+30     	; 0xafe <setup+0x2c>
     ae0:	60 e3       	ldi	r22, 0x30	; 48
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <eeprom_update_byte>
     aea:	60 e3       	ldi	r22, 0x30	; 48
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <eeprom_update_byte>
     af4:	67 e4       	ldi	r22, 0x47	; 71
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <eeprom_update_byte>
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <eeprom_read_byte>
     b06:	c8 2f       	mov	r28, r24
     b08:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <__data_end+0x5>
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <eeprom_read_byte>
     b14:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end+0x6>
     b18:	80 53       	subi	r24, 0x30	; 48
     b1a:	cc 0f       	add	r28, r28
     b1c:	c0 56       	subi	r28, 0x60	; 96
     b1e:	9c 2f       	mov	r25, r28
     b20:	99 0f       	add	r25, r25
     b22:	99 0f       	add	r25, r25
     b24:	c9 0f       	add	r28, r25
     b26:	c8 0f       	add	r28, r24
     b28:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <__data_end+0x7>
     b2c:	4d e2       	ldi	r20, 0x2D	; 45
     b2e:	51 e0       	ldi	r21, 0x01	; 1
     b30:	60 ef       	ldi	r22, 0xF0	; 240
     b32:	79 e1       	ldi	r23, 0x19	; 25
     b34:	89 e0       	ldi	r24, 0x09	; 9
     b36:	90 e5       	ldi	r25, 0x50	; 80
     b38:	0e 94 77 04 	call	0x8ee	; 0x8ee <_Z11generateUIDmP12deviceparams>
     b3c:	60 93 69 01 	sts	0x0169, r22	; 0x800169 <UID>
     b40:	70 93 6a 01 	sts	0x016A, r23	; 0x80016a <UID+0x1>
     b44:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <UID+0x2>
     b48:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <UID+0x3>
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	40 e9       	ldi	r20, 0x90	; 144
     b50:	50 ed       	ldi	r21, 0xD0	; 208
     b52:	63 e0       	ldi	r22, 0x03	; 3
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	88 e2       	ldi	r24, 0x28	; 40
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN11CAN_MCP25155beginEmh>
     b5e:	2f ef       	ldi	r18, 0xFF	; 255
     b60:	84 e3       	ldi	r24, 0x34	; 52
     b62:	9c e0       	ldi	r25, 0x0C	; 12
     b64:	21 50       	subi	r18, 0x01	; 1
     b66:	80 40       	sbci	r24, 0x00	; 0
     b68:	90 40       	sbci	r25, 0x00	; 0
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <setup+0x92>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <setup+0x9c>
     b6e:	00 00       	nop
     b70:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <UID>
     b74:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <UID+0x1>
     b78:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <UID+0x2>
     b7c:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <UID+0x3>
     b80:	0e 94 9d 04 	call	0x93a	; 0x93a <_Z12generateHashm>
     b84:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <__data_end+0x4>
     b88:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <__data_end+0x3>
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	62 ee       	ldi	r22, 0xE2	; 226
     b92:	75 e0       	ldi	r23, 0x05	; 5
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	cf 91       	pop	r28
     b98:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <attachInterrupt>

00000b9c <_Z14boardnumAnswerv>:
     b9c:	e8 e2       	ldi	r30, 0x28	; 40
     b9e:	f1 e0       	ldi	r31, 0x01	; 1
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	84 8f       	std	Z+28, r24	; 0x1c
     ba4:	85 81       	ldd	r24, Z+5	; 0x05
     ba6:	85 8f       	std	Z+29, r24	; 0x1d
     ba8:	86 81       	ldd	r24, Z+6	; 0x06
     baa:	86 8f       	std	Z+30, r24	; 0x1e
     bac:	44 e3       	ldi	r20, 0x34	; 52
     bae:	51 e0       	ldi	r21, 0x01	; 1
     bb0:	63 e0       	ldi	r22, 0x03	; 3
     bb2:	84 e2       	ldi	r24, 0x24	; 36
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_Z17what_is_your_namePKhhP9CAN_Frame>
     bba:	66 e0       	ldi	r22, 0x06	; 6
     bbc:	88 e2       	ldi	r24, 0x28	; 40
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_ZN15CAN_MCP2515plus10can_answerEh>

00000bc4 <_Z14processRXFramev>:
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	68 97       	sbiw	r28, 0x18	; 24
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	ce 01       	movw	r24, r28
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	0e 94 01 05 	call	0xa02	; 0xa02 <_Z11getCanFramev>
     be0:	88 e1       	ldi	r24, 0x18	; 24
     be2:	fe 01       	movw	r30, r28
     be4:	31 96       	adiw	r30, 0x01	; 1
     be6:	ac e4       	ldi	r26, 0x4C	; 76
     be8:	b1 e0       	ldi	r27, 0x01	; 1
     bea:	01 90       	ld	r0, Z+
     bec:	0d 92       	st	X+, r0
     bee:	8a 95       	dec	r24
     bf0:	e1 f7       	brne	.-8      	; 0xbea <_Z14processRXFramev+0x26>
     bf2:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <__data_end+0x2b>
     bf6:	81 11       	cpse	r24, r1
     bf8:	5a c1       	rjmp	.+692    	; 0xeae <_Z14processRXFramev+0x2ea>
     bfa:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end+0x28>
     bfe:	88 31       	cpi	r24, 0x18	; 24
     c00:	09 f4       	brne	.+2      	; 0xc04 <_Z14processRXFramev+0x40>
     c02:	9b c0       	rjmp	.+310    	; 0xd3a <_Z14processRXFramev+0x176>
     c04:	30 f4       	brcc	.+12     	; 0xc12 <_Z14processRXFramev+0x4e>
     c06:	81 11       	cpse	r24, r1
     c08:	52 c1       	rjmp	.+676    	; 0xeae <_Z14processRXFramev+0x2ea>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	14 c0       	rjmp	.+40     	; 0xc3a <_Z14processRXFramev+0x76>
     c12:	8d 31       	cpi	r24, 0x1D	; 29
     c14:	09 f4       	brne	.+2      	; 0xc18 <_Z14processRXFramev+0x54>
     c16:	ba c0       	rjmp	.+372    	; 0xd8c <_Z14processRXFramev+0x1c8>
     c18:	82 35       	cpi	r24, 0x52	; 82
     c1a:	09 f4       	brne	.+2      	; 0xc1e <_Z14processRXFramev+0x5a>
     c1c:	d9 c0       	rjmp	.+434    	; 0xdd0 <_Z14processRXFramev+0x20c>
     c1e:	47 c1       	rjmp	.+654    	; 0xeae <_Z14processRXFramev+0x2ea>
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	f9 01       	movw	r30, r18
     c24:	e8 5d       	subi	r30, 0xD8	; 216
     c26:	fe 4f       	sbci	r31, 0xFE	; 254
     c28:	40 85       	ldd	r20, Z+8	; 0x08
     c2a:	94 a9       	ldd	r25, Z+52	; 0x34
     c2c:	49 13       	cpse	r20, r25
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	2f 5f       	subi	r18, 0xFF	; 255
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	24 30       	cpi	r18, 0x04	; 4
     c36:	31 05       	cpc	r19, r1
     c38:	19 f0       	breq	.+6      	; 0xc40 <_Z14processRXFramev+0x7c>
     c3a:	88 23       	and	r24, r24
     c3c:	c9 f3       	breq	.-14     	; 0xc30 <_Z14processRXFramev+0x6c>
     c3e:	f0 cf       	rjmp	.-32     	; 0xc20 <_Z14processRXFramev+0x5c>
     c40:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <uid_request>
     c44:	88 23       	and	r24, r24
     c46:	09 f4       	brne	.+2      	; 0xc4a <_Z14processRXFramev+0x86>
     c48:	32 c1       	rjmp	.+612    	; 0xeae <_Z14processRXFramev+0x2ea>
     c4a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end+0x38>
     c4e:	8b 30       	cpi	r24, 0x0B	; 11
     c50:	09 f0       	breq	.+2      	; 0xc54 <_Z14processRXFramev+0x90>
     c52:	2d c1       	rjmp	.+602    	; 0xeae <_Z14processRXFramev+0x2ea>
     c54:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <__data_end+0x39>
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	19 f0       	breq	.+6      	; 0xc62 <_Z14processRXFramev+0x9e>
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	e9 f0       	breq	.+58     	; 0xc9a <_Z14processRXFramev+0xd6>
     c60:	5e c0       	rjmp	.+188    	; 0xd1e <_Z14processRXFramev+0x15a>
     c62:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <__data_end+0x3a>
     c66:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <__data_end+0x3b>
     c6a:	98 2f       	mov	r25, r24
     c6c:	20 e1       	ldi	r18, 0x10	; 16
     c6e:	62 9f       	mul	r22, r18
     c70:	90 0d       	add	r25, r0
     c72:	11 24       	eor	r1, r1
     c74:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x7>
     c78:	80 5d       	subi	r24, 0xD0	; 208
     c7a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end+0x6>
     c7e:	60 5d       	subi	r22, 0xD0	; 208
     c80:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <__data_end+0x5>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <eeprom_update_byte>
     c8c:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <__data_end+0x6>
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <eeprom_update_byte>
     c98:	42 c0       	rjmp	.+132    	; 0xd1e <_Z14processRXFramev+0x15a>
     c9a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <__data_end+0x3b>
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	19 f1       	breq	.+70     	; 0xce8 <_Z14processRXFramev+0x124>
     ca2:	82 30       	cpi	r24, 0x02	; 2
     ca4:	e1 f5       	brne	.+120    	; 0xd1e <_Z14processRXFramev+0x15a>
     ca6:	88 e1       	ldi	r24, 0x18	; 24
     ca8:	ec e4       	ldi	r30, 0x4C	; 76
     caa:	f1 e0       	ldi	r31, 0x01	; 1
     cac:	a4 e3       	ldi	r26, 0x34	; 52
     cae:	b1 e0       	ldi	r27, 0x01	; 1
     cb0:	01 90       	ld	r0, Z+
     cb2:	0d 92       	st	X+, r0
     cb4:	8a 95       	dec	r24
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <_Z14processRXFramev+0xec>
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end+0x22>
     cbe:	67 e0       	ldi	r22, 0x07	; 7
     cc0:	88 e2       	ldi	r24, 0x28	; 40
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN15CAN_MCP2515plus10can_answerEh>
     cc8:	8f e7       	ldi	r24, 0x7F	; 127
     cca:	9f e4       	ldi	r25, 0x4F	; 79
     ccc:	22 e1       	ldi	r18, 0x12	; 18
     cce:	81 50       	subi	r24, 0x01	; 1
     cd0:	90 40       	sbci	r25, 0x00	; 0
     cd2:	20 40       	sbci	r18, 0x00	; 0
     cd4:	e1 f7       	brne	.-8      	; 0xcce <_Z14processRXFramev+0x10a>
     cd6:	00 c0       	rjmp	.+0      	; 0xcd8 <_Z14processRXFramev+0x114>
     cd8:	00 00       	nop
     cda:	6f ef       	ldi	r22, 0xFF	; 255
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <eeprom_update_byte>
     ce4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     ce8:	98 e1       	ldi	r25, 0x18	; 24
     cea:	ec e4       	ldi	r30, 0x4C	; 76
     cec:	f1 e0       	ldi	r31, 0x01	; 1
     cee:	a4 e3       	ldi	r26, 0x34	; 52
     cf0:	b1 e0       	ldi	r27, 0x01	; 1
     cf2:	01 90       	ld	r0, Z+
     cf4:	0d 92       	st	X+, r0
     cf6:	9a 95       	dec	r25
     cf8:	e1 f7       	brne	.-8      	; 0xcf2 <_Z14processRXFramev+0x12e>
     cfa:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end+0x22>
     cfe:	67 e0       	ldi	r22, 0x07	; 7
     d00:	88 e2       	ldi	r24, 0x28	; 40
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN15CAN_MCP2515plus10can_answerEh>
     d08:	8f e7       	ldi	r24, 0x7F	; 127
     d0a:	9f e4       	ldi	r25, 0x4F	; 79
     d0c:	22 e1       	ldi	r18, 0x12	; 18
     d0e:	81 50       	subi	r24, 0x01	; 1
     d10:	90 40       	sbci	r25, 0x00	; 0
     d12:	20 40       	sbci	r18, 0x00	; 0
     d14:	e1 f7       	brne	.-8      	; 0xd0e <_Z14processRXFramev+0x14a>
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <_Z14processRXFramev+0x154>
     d18:	00 00       	nop
     d1a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     d1e:	88 e1       	ldi	r24, 0x18	; 24
     d20:	ec e4       	ldi	r30, 0x4C	; 76
     d22:	f1 e0       	ldi	r31, 0x01	; 1
     d24:	a4 e3       	ldi	r26, 0x34	; 52
     d26:	b1 e0       	ldi	r27, 0x01	; 1
     d28:	01 90       	ld	r0, Z+
     d2a:	0d 92       	st	X+, r0
     d2c:	8a 95       	dec	r24
     d2e:	e1 f7       	brne	.-8      	; 0xd28 <_Z14processRXFramev+0x164>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end+0x22>
     d36:	67 e0       	ldi	r22, 0x07	; 7
     d38:	1d c0       	rjmp	.+58     	; 0xd74 <_Z14processRXFramev+0x1b0>
     d3a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end+0x10>
     d3e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end+0x8>
     d42:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end+0x1c>
     d46:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__data_end+0x9>
     d4a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <__data_end+0x1d>
     d4e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end+0xa>
     d52:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end+0x1e>
     d56:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <__data_end+0xb>
     d5a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__data_end+0x1f>
     d5e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end+0x20>
     d62:	83 e0       	ldi	r24, 0x03	; 3
     d64:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <__data_end+0x21>
     d68:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end+0x22>
     d6c:	80 e5       	ldi	r24, 0x50	; 80
     d6e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <__data_end+0x23>
     d72:	68 e0       	ldi	r22, 0x08	; 8
     d74:	88 e2       	ldi	r24, 0x28	; 40
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	68 96       	adiw	r28, 0x18	; 24
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_ZN15CAN_MCP2515plus10can_answerEh>
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	88 23       	and	r24, r24
     d94:	41 f0       	breq	.+16     	; 0xda6 <_Z14processRXFramev+0x1e2>
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	f9 01       	movw	r30, r18
     d9a:	e8 5d       	subi	r30, 0xD8	; 216
     d9c:	fe 4f       	sbci	r31, 0xFE	; 254
     d9e:	40 85       	ldd	r20, Z+8	; 0x08
     da0:	94 a9       	ldd	r25, Z+52	; 0x34
     da2:	49 13       	cpse	r20, r25
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	2f 5f       	subi	r18, 0xFF	; 255
     da8:	3f 4f       	sbci	r19, 0xFF	; 255
     daa:	24 30       	cpi	r18, 0x04	; 4
     dac:	31 05       	cpc	r19, r1
     dae:	89 f7       	brne	.-30     	; 0xd92 <_Z14processRXFramev+0x1ce>
     db0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <uid_request>
     db4:	88 23       	and	r24, r24
     db6:	09 f4       	brne	.+2      	; 0xdba <_Z14processRXFramev+0x1f6>
     db8:	7a c0       	rjmp	.+244    	; 0xeae <_Z14processRXFramev+0x2ea>
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <config_request>
     dc0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end+0x38>
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <config_index+0x1>
     dca:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <config_index>
     dce:	6f c0       	rjmp	.+222    	; 0xeae <_Z14processRXFramev+0x2ea>
     dd0:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x35>
     dd4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <__data_end+0x5>
     dd8:	98 13       	cpse	r25, r24
     dda:	69 c0       	rjmp	.+210    	; 0xeae <_Z14processRXFramev+0x2ea>
     ddc:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <__data_end+0x36>
     de0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end+0x6>
     de4:	98 13       	cpse	r25, r24
     de6:	63 c0       	rjmp	.+198    	; 0xeae <_Z14processRXFramev+0x2ea>
     de8:	83 e5       	ldi	r24, 0x53	; 83
     dea:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end+0x10>
     dee:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end+0x34>
     df2:	82 30       	cpi	r24, 0x02	; 2
     df4:	e9 f0       	breq	.+58     	; 0xe30 <_Z14processRXFramev+0x26c>
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	61 f0       	breq	.+24     	; 0xe12 <_Z14processRXFramev+0x24e>
     dfa:	81 11       	cpse	r24, r1
     dfc:	58 c0       	rjmp	.+176    	; 0xeae <_Z14processRXFramev+0x2ea>
     dfe:	68 96       	adiw	r28, 0x18	; 24
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <_Z14boardnumAnswerv>
     e12:	6f ef       	ldi	r22, 0xFF	; 255
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <eeprom_update_byte>
     e1c:	68 96       	adiw	r28, 0x18	; 24
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	0c 94 aa 04 	jmp	0x954	; 0x954 <_Z16goIntoBootloaderv>
     e30:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_Z14boardnumAnswerv>
     e34:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <__data_end+0x37>
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <eeprom_update_byte>
     e40:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <__data_end+0x38>
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <eeprom_update_byte>
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <eeprom_read_byte>
     e54:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <__data_end+0x5>
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <eeprom_read_byte>
     e60:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end+0x6>
     e64:	4d e2       	ldi	r20, 0x2D	; 45
     e66:	51 e0       	ldi	r21, 0x01	; 1
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	79 e1       	ldi	r23, 0x19	; 25
     e6c:	89 e0       	ldi	r24, 0x09	; 9
     e6e:	90 e5       	ldi	r25, 0x50	; 80
     e70:	0e 94 77 04 	call	0x8ee	; 0x8ee <_Z11generateUIDmP12deviceparams>
     e74:	60 93 69 01 	sts	0x0169, r22	; 0x800169 <UID>
     e78:	70 93 6a 01 	sts	0x016A, r23	; 0x80016a <UID+0x1>
     e7c:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <UID+0x2>
     e80:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <UID+0x3>
     e84:	0e 94 9d 04 	call	0x93a	; 0x93a <_Z12generateHashm>
     e88:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <__data_end+0x4>
     e8c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <__data_end+0x3>
     e90:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end+0x6>
     e94:	20 ed       	ldi	r18, 0xD0	; 208
     e96:	28 0f       	add	r18, r24
     e98:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <__data_end+0x5>
     e9c:	88 0f       	add	r24, r24
     e9e:	80 56       	subi	r24, 0x60	; 96
     ea0:	98 2f       	mov	r25, r24
     ea2:	99 0f       	add	r25, r25
     ea4:	99 0f       	add	r25, r25
     ea6:	89 0f       	add	r24, r25
     ea8:	82 0f       	add	r24, r18
     eaa:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <__data_end+0x7>
     eae:	68 96       	adiw	r28, 0x18	; 24
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <_Z10sendConfigi>:
     ec0:	6f 92       	push	r6
     ec2:	7f 92       	push	r7
     ec4:	8f 92       	push	r8
     ec6:	9f 92       	push	r9
     ec8:	af 92       	push	r10
     eca:	bf 92       	push	r11
     ecc:	cf 92       	push	r12
     ece:	df 92       	push	r13
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	c3 56       	subi	r28, 0x63	; 99
     ee2:	d1 09       	sbc	r29, r1
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	5c 01       	movw	r10, r24
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	a2 96       	adiw	r28, 0x22	; 34
     ef4:	8f af       	std	Y+63, r24	; 0x3f
     ef6:	a2 97       	sbiw	r28, 0x22	; 34
     ef8:	a3 96       	adiw	r28, 0x23	; 35
     efa:	8f af       	std	Y+63, r24	; 0x3f
     efc:	a3 97       	sbiw	r28, 0x23	; 35
     efe:	a4 96       	adiw	r28, 0x24	; 36
     f00:	8f af       	std	Y+63, r24	; 0x3f
     f02:	a4 97       	sbiw	r28, 0x24	; 36
     f04:	ce 01       	movw	r24, r28
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	6c 01       	movw	r12, r24
     f0a:	80 e6       	ldi	r24, 0x60	; 96
     f0c:	f6 01       	movw	r30, r12
     f0e:	11 92       	st	Z+, r1
     f10:	8a 95       	dec	r24
     f12:	e9 f7       	brne	.-6      	; 0xf0e <_Z10sendConfigi+0x4e>
     f14:	62 e0       	ldi	r22, 0x02	; 2
     f16:	6a 83       	std	Y+2, r22	; 0x02
     f18:	83 e4       	ldi	r24, 0x43	; 67
     f1a:	89 8b       	std	Y+17, r24	; 0x11
     f1c:	a1 e4       	ldi	r26, 0x41	; 65
     f1e:	aa 8b       	std	Y+18, r26	; 0x12
     f20:	5e e4       	ldi	r21, 0x4E	; 78
     f22:	5b 8b       	std	Y+19, r21	; 0x13
     f24:	87 e6       	ldi	r24, 0x67	; 103
     f26:	8c 8b       	std	Y+20, r24	; 0x14
     f28:	45 e7       	ldi	r20, 0x75	; 117
     f2a:	4d 8b       	std	Y+21, r20	; 0x15
     f2c:	22 e7       	ldi	r18, 0x72	; 114
     f2e:	2e 8b       	std	Y+22, r18	; 0x16
     f30:	4f 8b       	std	Y+23, r20	; 0x17
     f32:	80 e2       	ldi	r24, 0x20	; 32
     f34:	88 8f       	std	Y+24, r24	; 0x18
     f36:	82 e4       	ldi	r24, 0x42	; 66
     f38:	89 8f       	std	Y+25, r24	; 0x19
     f3a:	91 e6       	ldi	r25, 0x61	; 97
     f3c:	9a 8f       	std	Y+26, r25	; 0x1a
     f3e:	83 e7       	ldi	r24, 0x73	; 115
     f40:	8b 8f       	std	Y+27, r24	; 0x1b
     f42:	35 e6       	ldi	r19, 0x65	; 101
     f44:	3c 8f       	std	Y+28, r19	; 0x1c
     f46:	f1 e0       	ldi	r31, 0x01	; 1
     f48:	f9 a3       	std	Y+33, r31	; 0x21
     f4a:	6a a3       	std	Y+34, r22	; 0x22
     f4c:	74 e1       	ldi	r23, 0x14	; 20
     f4e:	7e a3       	std	Y+38, r23	; 0x26
     f50:	7d e4       	ldi	r23, 0x4D	; 77
     f52:	79 a7       	std	Y+41, r23	; 0x29
     f54:	7f e6       	ldi	r23, 0x6F	; 111
     f56:	7a a7       	std	Y+42, r23	; 0x2a
     f58:	74 e6       	ldi	r23, 0x64	; 100
     f5a:	7b a7       	std	Y+43, r23	; 0x2b
     f5c:	4c a7       	std	Y+44, r20	; 0x2c
     f5e:	ec e6       	ldi	r30, 0x6C	; 108
     f60:	ed a7       	std	Y+45, r30	; 0x2d
     f62:	9e a7       	std	Y+46, r25	; 0x2e
     f64:	7f a7       	std	Y+47, r23	; 0x2f
     f66:	28 ab       	std	Y+48, r18	; 0x30
     f68:	39 ab       	std	Y+49, r19	; 0x31
     f6a:	8a ab       	std	Y+50, r24	; 0x32
     f6c:	8b ab       	std	Y+51, r24	; 0x33
     f6e:	3c ab       	std	Y+52, r19	; 0x34
     f70:	b0 e3       	ldi	r27, 0x30	; 48
     f72:	be ab       	std	Y+54, r27	; 0x36
     f74:	12 e3       	ldi	r17, 0x32	; 50
     f76:	18 af       	std	Y+56, r17	; 0x38
     f78:	b9 af       	std	Y+57, r27	; 0x39
     f7a:	ab af       	std	Y+59, r26	; 0x3b
     f7c:	7c af       	std	Y+60, r23	; 0x3c
     f7e:	2d af       	std	Y+61, r18	; 0x3d
     f80:	22 96       	adiw	r28, 0x02	; 2
     f82:	6f af       	std	Y+63, r22	; 0x3f
     f84:	22 97       	sbiw	r28, 0x02	; 2
     f86:	23 96       	adiw	r28, 0x03	; 3
     f88:	ff af       	std	Y+63, r31	; 0x3f
     f8a:	23 97       	sbiw	r28, 0x03	; 3
     f8c:	63 e0       	ldi	r22, 0x03	; 3
     f8e:	24 96       	adiw	r28, 0x04	; 4
     f90:	6f af       	std	Y+63, r22	; 0x3f
     f92:	24 97       	sbiw	r28, 0x04	; 4
     f94:	2a 96       	adiw	r28, 0x0a	; 10
     f96:	5f af       	std	Y+63, r21	; 0x3f
     f98:	2a 97       	sbiw	r28, 0x0a	; 10
     f9a:	2b 96       	adiw	r28, 0x0b	; 11
     f9c:	3f af       	std	Y+63, r19	; 0x3f
     f9e:	2b 97       	sbiw	r28, 0x0b	; 11
     fa0:	2c 96       	adiw	r28, 0x0c	; 12
     fa2:	4f af       	std	Y+63, r20	; 0x3f
     fa4:	2c 97       	sbiw	r28, 0x0c	; 12
     fa6:	2d 96       	adiw	r28, 0x0d	; 13
     fa8:	8f af       	std	Y+63, r24	; 0x3f
     faa:	2d 97       	sbiw	r28, 0x0d	; 13
     fac:	84 e7       	ldi	r24, 0x74	; 116
     fae:	2e 96       	adiw	r28, 0x0e	; 14
     fb0:	8f af       	std	Y+63, r24	; 0x3f
     fb2:	2e 97       	sbiw	r28, 0x0e	; 14
     fb4:	2f 96       	adiw	r28, 0x0f	; 15
     fb6:	9f af       	std	Y+63, r25	; 0x3f
     fb8:	2f 97       	sbiw	r28, 0x0f	; 15
     fba:	60 96       	adiw	r28, 0x10	; 16
     fbc:	2f af       	std	Y+63, r18	; 0x3f
     fbe:	60 97       	sbiw	r28, 0x10	; 16
     fc0:	61 96       	adiw	r28, 0x11	; 17
     fc2:	8f af       	std	Y+63, r24	; 0x3f
     fc4:	61 97       	sbiw	r28, 0x11	; 17
     fc6:	63 96       	adiw	r28, 0x13	; 19
     fc8:	5f af       	std	Y+63, r21	; 0x3f
     fca:	63 97       	sbiw	r28, 0x13	; 19
     fcc:	64 96       	adiw	r28, 0x14	; 20
     fce:	3f af       	std	Y+63, r19	; 0x3f
     fd0:	64 97       	sbiw	r28, 0x14	; 20
     fd2:	39 e6       	ldi	r19, 0x69	; 105
     fd4:	65 96       	adiw	r28, 0x15	; 21
     fd6:	3f af       	std	Y+63, r19	; 0x3f
     fd8:	65 97       	sbiw	r28, 0x15	; 21
     fda:	3e e6       	ldi	r19, 0x6E	; 110
     fdc:	66 96       	adiw	r28, 0x16	; 22
     fde:	3f af       	std	Y+63, r19	; 0x3f
     fe0:	66 97       	sbiw	r28, 0x16	; 22
     fe2:	37 e5       	ldi	r19, 0x57	; 87
     fe4:	68 96       	adiw	r28, 0x18	; 24
     fe6:	3f af       	std	Y+63, r19	; 0x3f
     fe8:	68 97       	sbiw	r28, 0x18	; 24
     fea:	69 96       	adiw	r28, 0x19	; 25
     fec:	9f af       	std	Y+63, r25	; 0x3f
     fee:	69 97       	sbiw	r28, 0x19	; 25
     ff0:	6a 96       	adiw	r28, 0x1a	; 26
     ff2:	2f af       	std	Y+63, r18	; 0x3f
     ff4:	6a 97       	sbiw	r28, 0x1a	; 26
     ff6:	2d e6       	ldi	r18, 0x6D	; 109
     ff8:	6b 96       	adiw	r28, 0x1b	; 27
     ffa:	2f af       	std	Y+63, r18	; 0x3f
     ffc:	6b 97       	sbiw	r28, 0x1b	; 27
     ffe:	2b e4       	ldi	r18, 0x4B	; 75
    1000:	6d 96       	adiw	r28, 0x1d	; 29
    1002:	2f af       	std	Y+63, r18	; 0x3f
    1004:	6d 97       	sbiw	r28, 0x1d	; 29
    1006:	6e 96       	adiw	r28, 0x1e	; 30
    1008:	9f af       	std	Y+63, r25	; 0x3f
    100a:	6e 97       	sbiw	r28, 0x1e	; 30
    100c:	6f 96       	adiw	r28, 0x1f	; 31
    100e:	ef af       	std	Y+63, r30	; 0x3f
    1010:	6f 97       	sbiw	r28, 0x1f	; 31
    1012:	a0 96       	adiw	r28, 0x20	; 32
    1014:	8f af       	std	Y+63, r24	; 0x3f
    1016:	a0 97       	sbiw	r28, 0x20	; 32
    1018:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <__data_end+0x7>
    101c:	88 87       	std	Y+8, r24	; 0x08
    101e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end+0x8>
    1022:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z7hex2dech>
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_Z13highbyte2chari>
    102c:	89 87       	std	Y+9, r24	; 0x09
    102e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end+0x8>
    1032:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z7hex2dech>
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 57 04 	call	0x8ae	; 0x8ae <_Z12lowbyte2chari>
    103c:	8a 87       	std	Y+10, r24	; 0x0a
    103e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__data_end+0x9>
    1042:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z7hex2dech>
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_Z13highbyte2chari>
    104c:	8b 87       	std	Y+11, r24	; 0x0b
    104e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__data_end+0x9>
    1052:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z7hex2dech>
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 57 04 	call	0x8ae	; 0x8ae <_Z12lowbyte2chari>
    105c:	8c 87       	std	Y+12, r24	; 0x0c
    105e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end+0xa>
    1062:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z7hex2dech>
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_Z13highbyte2chari>
    106c:	8d 87       	std	Y+13, r24	; 0x0d
    106e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end+0xa>
    1072:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z7hex2dech>
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 57 04 	call	0x8ae	; 0x8ae <_Z12lowbyte2chari>
    107c:	8e 87       	std	Y+14, r24	; 0x0e
    107e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <__data_end+0xb>
    1082:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z7hex2dech>
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_Z13highbyte2chari>
    108c:	8f 87       	std	Y+15, r24	; 0x0f
    108e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <__data_end+0xb>
    1092:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z7hex2dech>
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 57 04 	call	0x8ae	; 0x8ae <_Z12lowbyte2chari>
    109c:	88 8b       	std	Y+16, r24	; 0x10
    109e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <__data_end+0x7>
    10a2:	88 a7       	std	Y+40, r24	; 0x28
    10a4:	35 01       	movw	r6, r10
    10a6:	85 e0       	ldi	r24, 0x05	; 5
    10a8:	66 0c       	add	r6, r6
    10aa:	77 1c       	adc	r7, r7
    10ac:	8a 95       	dec	r24
    10ae:	e1 f7       	brne	.-8      	; 0x10a8 <_Z10sendConfigi+0x1e8>
    10b0:	81 2c       	mov	r8, r1
    10b2:	91 2c       	mov	r9, r1
    10b4:	e1 2c       	mov	r14, r1
    10b6:	f1 2c       	mov	r15, r1
    10b8:	01 e6       	ldi	r16, 0x61	; 97
    10ba:	10 e0       	ldi	r17, 0x00	; 0
    10bc:	0c 0f       	add	r16, r28
    10be:	1d 1f       	adc	r17, r29
    10c0:	0a 0d       	add	r16, r10
    10c2:	1b 1d       	adc	r17, r11
    10c4:	f8 01       	movw	r30, r16
    10c6:	40 81       	ld	r20, Z
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	e4 16       	cp	r14, r20
    10cc:	f5 06       	cpc	r15, r21
    10ce:	8c f4       	brge	.+34     	; 0x10f2 <_Z10sendConfigi+0x232>
    10d0:	b4 01       	movw	r22, r8
    10d2:	66 0d       	add	r22, r6
    10d4:	77 1d       	adc	r23, r7
    10d6:	6c 0d       	add	r22, r12
    10d8:	7d 1d       	adc	r23, r13
    10da:	a7 01       	movw	r20, r14
    10dc:	88 e2       	ldi	r24, 0x28	; 40
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	0e 94 0a 04 	call	0x814	; 0x814 <_ZN15CAN_MCP2515plus15configDataFrameEPhi>
    10e4:	ff ef       	ldi	r31, 0xFF	; 255
    10e6:	ef 1a       	sub	r14, r31
    10e8:	ff 0a       	sbc	r15, r31
    10ea:	88 e0       	ldi	r24, 0x08	; 8
    10ec:	88 0e       	add	r8, r24
    10ee:	91 1c       	adc	r9, r1
    10f0:	e9 cf       	rjmp	.-46     	; 0x10c4 <_Z10sendConfigi+0x204>
    10f2:	b5 01       	movw	r22, r10
    10f4:	88 e2       	ldi	r24, 0x28	; 40
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN15CAN_MCP2515plus16configTerminatorEii>
    10fc:	cd 59       	subi	r28, 0x9D	; 157
    10fe:	df 4f       	sbci	r29, 0xFF	; 255
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	bf 90       	pop	r11
    111c:	af 90       	pop	r10
    111e:	9f 90       	pop	r9
    1120:	8f 90       	pop	r8
    1122:	7f 90       	pop	r7
    1124:	6f 90       	pop	r6
    1126:	08 95       	ret

00001128 <loop>:
    1128:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <config_request>
    112c:	88 23       	and	r24, r24
    112e:	41 f0       	breq	.+16     	; 0x1140 <loop+0x18>
    1130:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <config_request>
    1134:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <config_index>
    1138:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <config_index+0x1>
    113c:	0c 94 60 07 	jmp	0xec0	; 0xec0 <_Z10sendConfigi>
    1140:	08 95       	ret

00001142 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    1142:	08 95       	ret

00001144 <attachInterrupt>:
#endif
};
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1144:	82 30       	cpi	r24, 0x02	; 2
    1146:	e8 f4       	brcc	.+58     	; 0x1182 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    1148:	e8 2f       	mov	r30, r24
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	e0 50       	subi	r30, 0x00	; 0
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	71 83       	std	Z+1, r23	; 0x01
    1156:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	41 f0       	breq	.+16     	; 0x116c <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    115c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1160:	8c 7f       	andi	r24, 0xFC	; 252
    1162:	84 2b       	or	r24, r20
    1164:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT0);
    1168:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    116a:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    116c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1170:	44 0f       	add	r20, r20
    1172:	55 1f       	adc	r21, r21
    1174:	44 0f       	add	r20, r20
    1176:	55 1f       	adc	r21, r21
    1178:	83 7f       	andi	r24, 0xF3	; 243
    117a:	84 2b       	or	r24, r20
    117c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT1);
    1180:	e9 9a       	sbi	0x1d, 1	; 29
    1182:	08 95       	ret

00001184 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1184:	82 30       	cpi	r24, 0x02	; 2
    1186:	78 f4       	brcc	.+30     	; 0x11a6 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	11 f0       	breq	.+4      	; 0x1190 <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    118c:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    1190:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    1192:	e8 2f       	mov	r30, r24
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	ee 0f       	add	r30, r30
    1198:	ff 1f       	adc	r31, r31
    119a:	e0 50       	subi	r30, 0x00	; 0
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	81 ea       	ldi	r24, 0xA1	; 161
    11a0:	98 e0       	ldi	r25, 0x08	; 8
    11a2:	91 83       	std	Z+1, r25	; 0x01
    11a4:	80 83       	st	Z, r24
    11a6:	08 95       	ret

000011a8 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    11a8:	1f 92       	push	r1
    11aa:	0f 92       	push	r0
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	0f 92       	push	r0
    11b0:	11 24       	eor	r1, r1
    11b2:	2f 93       	push	r18
    11b4:	3f 93       	push	r19
    11b6:	4f 93       	push	r20
    11b8:	5f 93       	push	r21
    11ba:	6f 93       	push	r22
    11bc:	7f 93       	push	r23
    11be:	8f 93       	push	r24
    11c0:	9f 93       	push	r25
    11c2:	af 93       	push	r26
    11c4:	bf 93       	push	r27
    11c6:	ef 93       	push	r30
    11c8:	ff 93       	push	r31
    11ca:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    11ce:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    11d2:	09 95       	icall
    11d4:	ff 91       	pop	r31
    11d6:	ef 91       	pop	r30
    11d8:	bf 91       	pop	r27
    11da:	af 91       	pop	r26
    11dc:	9f 91       	pop	r25
    11de:	8f 91       	pop	r24
    11e0:	7f 91       	pop	r23
    11e2:	6f 91       	pop	r22
    11e4:	5f 91       	pop	r21
    11e6:	4f 91       	pop	r20
    11e8:	3f 91       	pop	r19
    11ea:	2f 91       	pop	r18
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	0f 90       	pop	r0
    11f2:	1f 90       	pop	r1
    11f4:	18 95       	reti

000011f6 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    11f6:	1f 92       	push	r1
    11f8:	0f 92       	push	r0
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	0f 92       	push	r0
    11fe:	11 24       	eor	r1, r1
    1200:	2f 93       	push	r18
    1202:	3f 93       	push	r19
    1204:	4f 93       	push	r20
    1206:	5f 93       	push	r21
    1208:	6f 93       	push	r22
    120a:	7f 93       	push	r23
    120c:	8f 93       	push	r24
    120e:	9f 93       	push	r25
    1210:	af 93       	push	r26
    1212:	bf 93       	push	r27
    1214:	ef 93       	push	r30
    1216:	ff 93       	push	r31
    1218:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
    121c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_start+0x3>
    1220:	09 95       	icall
    1222:	ff 91       	pop	r31
    1224:	ef 91       	pop	r30
    1226:	bf 91       	pop	r27
    1228:	af 91       	pop	r26
    122a:	9f 91       	pop	r25
    122c:	8f 91       	pop	r24
    122e:	7f 91       	pop	r23
    1230:	6f 91       	pop	r22
    1232:	5f 91       	pop	r21
    1234:	4f 91       	pop	r20
    1236:	3f 91       	pop	r19
    1238:	2f 91       	pop	r18
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	0f 90       	pop	r0
    1240:	1f 90       	pop	r1
    1242:	18 95       	reti

00001244 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1244:	1f 92       	push	r1
    1246:	0f 92       	push	r0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	0f 92       	push	r0
    124c:	11 24       	eor	r1, r1
    124e:	2f 93       	push	r18
    1250:	3f 93       	push	r19
    1252:	8f 93       	push	r24
    1254:	9f 93       	push	r25
    1256:	af 93       	push	r26
    1258:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    125a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <timer0_millis>
    125e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <timer0_millis+0x1>
    1262:	a0 91 74 01 	lds	r26, 0x0174	; 0x800174 <timer0_millis+0x2>
    1266:	b0 91 75 01 	lds	r27, 0x0175	; 0x800175 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    126a:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    126e:	23 e0       	ldi	r18, 0x03	; 3
    1270:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1272:	2d 37       	cpi	r18, 0x7D	; 125
    1274:	20 f4       	brcc	.+8      	; 0x127e <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	a1 1d       	adc	r26, r1
    127a:	b1 1d       	adc	r27, r1
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    127e:	26 e8       	ldi	r18, 0x86	; 134
    1280:	23 0f       	add	r18, r19
		m += 1;
    1282:	02 96       	adiw	r24, 0x02	; 2
    1284:	a1 1d       	adc	r26, r1
    1286:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1288:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <timer0_fract>
	timer0_millis = m;
    128c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <timer0_millis>
    1290:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <timer0_millis+0x1>
    1294:	a0 93 74 01 	sts	0x0174, r26	; 0x800174 <timer0_millis+0x2>
    1298:	b0 93 75 01 	sts	0x0175, r27	; 0x800175 <timer0_millis+0x3>
	timer0_overflow_count++;
    129c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <timer0_overflow_count>
    12a0:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <timer0_overflow_count+0x1>
    12a4:	a0 91 78 01 	lds	r26, 0x0178	; 0x800178 <timer0_overflow_count+0x2>
    12a8:	b0 91 79 01 	lds	r27, 0x0179	; 0x800179 <timer0_overflow_count+0x3>
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	a1 1d       	adc	r26, r1
    12b0:	b1 1d       	adc	r27, r1
    12b2:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <timer0_overflow_count>
    12b6:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <timer0_overflow_count+0x1>
    12ba:	a0 93 78 01 	sts	0x0178, r26	; 0x800178 <timer0_overflow_count+0x2>
    12be:	b0 93 79 01 	sts	0x0179, r27	; 0x800179 <timer0_overflow_count+0x3>
}
    12c2:	bf 91       	pop	r27
    12c4:	af 91       	pop	r26
    12c6:	9f 91       	pop	r25
    12c8:	8f 91       	pop	r24
    12ca:	3f 91       	pop	r19
    12cc:	2f 91       	pop	r18
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f 90       	pop	r0
    12d4:	1f 90       	pop	r1
    12d6:	18 95       	reti

000012d8 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    12d8:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    12da:	f8 94       	cli
	m = timer0_overflow_count;
    12dc:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <timer0_overflow_count>
    12e0:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <timer0_overflow_count+0x1>
    12e4:	a0 91 78 01 	lds	r26, 0x0178	; 0x800178 <timer0_overflow_count+0x2>
    12e8:	b0 91 79 01 	lds	r27, 0x0179	; 0x800179 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    12ec:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    12ee:	a8 9b       	sbis	0x15, 0	; 21
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <micros+0x24>
    12f2:	2f 3f       	cpi	r18, 0xFF	; 255
    12f4:	19 f0       	breq	.+6      	; 0x12fc <micros+0x24>
		m++;
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	a1 1d       	adc	r26, r1
    12fa:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    12fc:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    12fe:	66 27       	eor	r22, r22
    1300:	78 2f       	mov	r23, r24
    1302:	89 2f       	mov	r24, r25
    1304:	9a 2f       	mov	r25, r26
    1306:	62 0f       	add	r22, r18
    1308:	71 1d       	adc	r23, r1
    130a:	81 1d       	adc	r24, r1
    130c:	91 1d       	adc	r25, r1
    130e:	42 e0       	ldi	r20, 0x02	; 2
    1310:	66 0f       	add	r22, r22
    1312:	77 1f       	adc	r23, r23
    1314:	88 1f       	adc	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	4a 95       	dec	r20
    131a:	d1 f7       	brne	.-12     	; 0x1310 <micros+0x38>
}
    131c:	08 95       	ret

0000131e <delay>:

void delay(unsigned long ms)
{
    131e:	8f 92       	push	r8
    1320:	9f 92       	push	r9
    1322:	af 92       	push	r10
    1324:	bf 92       	push	r11
    1326:	cf 92       	push	r12
    1328:	df 92       	push	r13
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	6b 01       	movw	r12, r22
    1330:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1332:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <micros>
    1336:	4b 01       	movw	r8, r22
    1338:	5c 01       	movw	r10, r24

	while (ms > 0) {
    133a:	c1 14       	cp	r12, r1
    133c:	d1 04       	cpc	r13, r1
    133e:	e1 04       	cpc	r14, r1
    1340:	f1 04       	cpc	r15, r1
    1342:	f1 f0       	breq	.+60     	; 0x1380 <delay+0x62>
		yield();
    1344:	0e 94 ac 0a 	call	0x1558	; 0x1558 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1348:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <micros>
    134c:	68 19       	sub	r22, r8
    134e:	79 09       	sbc	r23, r9
    1350:	8a 09       	sbc	r24, r10
    1352:	9b 09       	sbc	r25, r11
    1354:	68 3e       	cpi	r22, 0xE8	; 232
    1356:	73 40       	sbci	r23, 0x03	; 3
    1358:	81 05       	cpc	r24, r1
    135a:	91 05       	cpc	r25, r1
    135c:	70 f3       	brcs	.-36     	; 0x133a <delay+0x1c>
			ms--;
    135e:	21 e0       	ldi	r18, 0x01	; 1
    1360:	c2 1a       	sub	r12, r18
    1362:	d1 08       	sbc	r13, r1
    1364:	e1 08       	sbc	r14, r1
    1366:	f1 08       	sbc	r15, r1
			start += 1000;
    1368:	88 ee       	ldi	r24, 0xE8	; 232
    136a:	88 0e       	add	r8, r24
    136c:	83 e0       	ldi	r24, 0x03	; 3
    136e:	98 1e       	adc	r9, r24
    1370:	a1 1c       	adc	r10, r1
    1372:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1374:	c1 14       	cp	r12, r1
    1376:	d1 04       	cpc	r13, r1
    1378:	e1 04       	cpc	r14, r1
    137a:	f1 04       	cpc	r15, r1
    137c:	29 f7       	brne	.-54     	; 0x1348 <delay+0x2a>
    137e:	dd cf       	rjmp	.-70     	; 0x133a <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1380:	ff 90       	pop	r15
    1382:	ef 90       	pop	r14
    1384:	df 90       	pop	r13
    1386:	cf 90       	pop	r12
    1388:	bf 90       	pop	r11
    138a:	af 90       	pop	r10
    138c:	9f 90       	pop	r9
    138e:	8f 90       	pop	r8
    1390:	08 95       	ret

00001392 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1392:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1394:	84 b5       	in	r24, 0x24	; 36
    1396:	82 60       	ori	r24, 0x02	; 2
    1398:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    139a:	84 b5       	in	r24, 0x24	; 36
    139c:	81 60       	ori	r24, 0x01	; 1
    139e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    13a0:	85 b5       	in	r24, 0x25	; 37
    13a2:	82 60       	ori	r24, 0x02	; 2
    13a4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    13a6:	85 b5       	in	r24, 0x25	; 37
    13a8:	81 60       	ori	r24, 0x01	; 1
    13aa:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    13ac:	ee e6       	ldi	r30, 0x6E	; 110
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	81 60       	ori	r24, 0x01	; 1
    13b4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    13b6:	e1 e8       	ldi	r30, 0x81	; 129
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    13bc:	80 81       	ld	r24, Z
    13be:	82 60       	ori	r24, 0x02	; 2
    13c0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    13c2:	80 81       	ld	r24, Z
    13c4:	81 60       	ori	r24, 0x01	; 1
    13c6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    13c8:	e0 e8       	ldi	r30, 0x80	; 128
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	81 60       	ori	r24, 0x01	; 1
    13d0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    13d2:	e1 eb       	ldi	r30, 0xB1	; 177
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	84 60       	ori	r24, 0x04	; 4
    13da:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    13dc:	e0 eb       	ldi	r30, 0xB0	; 176
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	81 60       	ori	r24, 0x01	; 1
    13e4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    13e6:	ea e7       	ldi	r30, 0x7A	; 122
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	84 60       	ori	r24, 0x04	; 4
    13ee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    13f0:	80 81       	ld	r24, Z
    13f2:	82 60       	ori	r24, 0x02	; 2
    13f4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    13f6:	80 81       	ld	r24, Z
    13f8:	81 60       	ori	r24, 0x01	; 1
    13fa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    13fc:	80 81       	ld	r24, Z
    13fe:	80 68       	ori	r24, 0x80	; 128
    1400:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1402:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1406:	08 95       	ret

00001408 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	81 f0       	breq	.+32     	; 0x142c <turnOffPWM+0x24>
    140c:	28 f4       	brcc	.+10     	; 0x1418 <turnOffPWM+0x10>
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	99 f0       	breq	.+38     	; 0x1438 <turnOffPWM+0x30>
    1412:	82 30       	cpi	r24, 0x02	; 2
    1414:	a1 f0       	breq	.+40     	; 0x143e <turnOffPWM+0x36>
    1416:	08 95       	ret
    1418:	87 30       	cpi	r24, 0x07	; 7
    141a:	a9 f0       	breq	.+42     	; 0x1446 <turnOffPWM+0x3e>
    141c:	88 30       	cpi	r24, 0x08	; 8
    141e:	b9 f0       	breq	.+46     	; 0x144e <turnOffPWM+0x46>
    1420:	84 30       	cpi	r24, 0x04	; 4
    1422:	d1 f4       	brne	.+52     	; 0x1458 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1424:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1428:	8f 7d       	andi	r24, 0xDF	; 223
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    142c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1430:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1432:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1436:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1438:	84 b5       	in	r24, 0x24	; 36
    143a:	8f 77       	andi	r24, 0x7F	; 127
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    143e:	84 b5       	in	r24, 0x24	; 36
    1440:	8f 7d       	andi	r24, 0xDF	; 223
    1442:	84 bd       	out	0x24, r24	; 36
    1444:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1446:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    144a:	8f 77       	andi	r24, 0x7F	; 127
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    144e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1452:	8f 7d       	andi	r24, 0xDF	; 223
    1454:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1458:	08 95       	ret

0000145a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	fc 01       	movw	r30, r24
    1462:	e4 58       	subi	r30, 0x84	; 132
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1468:	fc 01       	movw	r30, r24
    146a:	e0 57       	subi	r30, 0x70	; 112
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1470:	88 23       	and	r24, r24
    1472:	49 f1       	breq	.+82     	; 0x14c6 <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	fc 01       	movw	r30, r24
    147c:	e2 55       	subi	r30, 0x52	; 82
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	a5 91       	lpm	r26, Z+
    1482:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    1484:	8c 55       	subi	r24, 0x5C	; 92
    1486:	9f 4f       	sbci	r25, 0xFF	; 255
    1488:	fc 01       	movw	r30, r24
    148a:	c5 91       	lpm	r28, Z+
    148c:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    148e:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
    1490:	61 11       	cpse	r22, r1
    1492:	08 c0       	rjmp	.+16     	; 0x14a4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
    1494:	f8 94       	cli
		*reg &= ~bit;
    1496:	8c 91       	ld	r24, X
    1498:	20 95       	com	r18
    149a:	82 23       	and	r24, r18
    149c:	8c 93       	st	X, r24
		*out &= ~bit;
    149e:	88 81       	ld	r24, Y
    14a0:	82 23       	and	r24, r18
    14a2:	0a c0       	rjmp	.+20     	; 0x14b8 <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    14a4:	62 30       	cpi	r22, 0x02	; 2
    14a6:	51 f4       	brne	.+20     	; 0x14bc <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
    14a8:	f8 94       	cli
		*reg &= ~bit;
    14aa:	8c 91       	ld	r24, X
    14ac:	32 2f       	mov	r19, r18
    14ae:	30 95       	com	r19
    14b0:	83 23       	and	r24, r19
    14b2:	8c 93       	st	X, r24
		*out |= bit;
    14b4:	88 81       	ld	r24, Y
    14b6:	82 2b       	or	r24, r18
    14b8:	88 83       	st	Y, r24
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
    14bc:	f8 94       	cli
		*reg |= bit;
    14be:	8c 91       	ld	r24, X
    14c0:	82 2b       	or	r24, r18
    14c2:	8c 93       	st	X, r24
		SREG = oldSREG;
    14c4:	9f bf       	out	0x3f, r25	; 63
	}
}
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	1f 92       	push	r1
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	f9 01       	movw	r30, r18
    14e0:	e8 59       	subi	r30, 0x98	; 152
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    14e6:	f9 01       	movw	r30, r18
    14e8:	e4 58       	subi	r30, 0x84	; 132
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    14ee:	f9 01       	movw	r30, r18
    14f0:	e0 57       	subi	r30, 0x70	; 112
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    14f6:	00 23       	and	r16, r16
    14f8:	c9 f0       	breq	.+50     	; 0x152c <digitalWrite+0x60>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    14fa:	88 23       	and	r24, r24
    14fc:	21 f0       	breq	.+8      	; 0x1506 <digitalWrite+0x3a>
    14fe:	69 83       	std	Y+1, r22	; 0x01
    1500:	0e 94 04 0a 	call	0x1408	; 0x1408 <turnOffPWM>
    1504:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    1506:	e0 2f       	mov	r30, r16
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	ee 0f       	add	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	ec 55       	subi	r30, 0x5C	; 92
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	a5 91       	lpm	r26, Z+
    1514:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1516:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1518:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    151a:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    151c:	61 11       	cpse	r22, r1
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <digitalWrite+0x5a>
		*out &= ~bit;
    1520:	10 95       	com	r17
    1522:	81 23       	and	r24, r17
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <digitalWrite+0x5c>
	} else {
		*out |= bit;
    1526:	81 2b       	or	r24, r17
    1528:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    152a:	9f bf       	out	0x3f, r25	; 63
}
    152c:	0f 90       	pop	r0
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	08 95       	ret

00001538 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1538:	08 95       	ret

0000153a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    153a:	0e 94 c9 09 	call	0x1392	; 0x1392 <init>

	initVariant();
    153e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1542:	0e 94 69 05 	call	0xad2	; 0xad2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1546:	c0 e0       	ldi	r28, 0x00	; 0
    1548:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    154a:	0e 94 94 08 	call	0x1128	; 0x1128 <loop>
		if (serialEventRun) serialEventRun();
    154e:	20 97       	sbiw	r28, 0x00	; 0
    1550:	e1 f3       	breq	.-8      	; 0x154a <main+0x10>
    1552:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1556:	f9 cf       	rjmp	.-14     	; 0x154a <main+0x10>

00001558 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1558:	08 95       	ret

0000155a <__divmodhi4>:
    155a:	97 fb       	bst	r25, 7
    155c:	07 2e       	mov	r0, r23
    155e:	16 f4       	brtc	.+4      	; 0x1564 <__divmodhi4+0xa>
    1560:	00 94       	com	r0
    1562:	07 d0       	rcall	.+14     	; 0x1572 <__divmodhi4_neg1>
    1564:	77 fd       	sbrc	r23, 7
    1566:	09 d0       	rcall	.+18     	; 0x157a <__divmodhi4_neg2>
    1568:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__udivmodhi4>
    156c:	07 fc       	sbrc	r0, 7
    156e:	05 d0       	rcall	.+10     	; 0x157a <__divmodhi4_neg2>
    1570:	3e f4       	brtc	.+14     	; 0x1580 <__divmodhi4_exit>

00001572 <__divmodhi4_neg1>:
    1572:	90 95       	com	r25
    1574:	81 95       	neg	r24
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	08 95       	ret

0000157a <__divmodhi4_neg2>:
    157a:	70 95       	com	r23
    157c:	61 95       	neg	r22
    157e:	7f 4f       	sbci	r23, 0xFF	; 255

00001580 <__divmodhi4_exit>:
    1580:	08 95       	ret

00001582 <__udivmodhi4>:
    1582:	aa 1b       	sub	r26, r26
    1584:	bb 1b       	sub	r27, r27
    1586:	51 e1       	ldi	r21, 0x11	; 17
    1588:	07 c0       	rjmp	.+14     	; 0x1598 <__udivmodhi4_ep>

0000158a <__udivmodhi4_loop>:
    158a:	aa 1f       	adc	r26, r26
    158c:	bb 1f       	adc	r27, r27
    158e:	a6 17       	cp	r26, r22
    1590:	b7 07       	cpc	r27, r23
    1592:	10 f0       	brcs	.+4      	; 0x1598 <__udivmodhi4_ep>
    1594:	a6 1b       	sub	r26, r22
    1596:	b7 0b       	sbc	r27, r23

00001598 <__udivmodhi4_ep>:
    1598:	88 1f       	adc	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	5a 95       	dec	r21
    159e:	a9 f7       	brne	.-22     	; 0x158a <__udivmodhi4_loop>
    15a0:	80 95       	com	r24
    15a2:	90 95       	com	r25
    15a4:	bc 01       	movw	r22, r24
    15a6:	cd 01       	movw	r24, r26
    15a8:	08 95       	ret

000015aa <__tablejump2__>:
    15aa:	ee 0f       	add	r30, r30
    15ac:	ff 1f       	adc	r31, r31
    15ae:	05 90       	lpm	r0, Z+
    15b0:	f4 91       	lpm	r31, Z
    15b2:	e0 2d       	mov	r30, r0
    15b4:	09 94       	ijmp

000015b6 <eeprom_read_byte>:
    15b6:	f9 99       	sbic	0x1f, 1	; 31
    15b8:	fe cf       	rjmp	.-4      	; 0x15b6 <eeprom_read_byte>
    15ba:	92 bd       	out	0x22, r25	; 34
    15bc:	81 bd       	out	0x21, r24	; 33
    15be:	f8 9a       	sbi	0x1f, 0	; 31
    15c0:	99 27       	eor	r25, r25
    15c2:	80 b5       	in	r24, 0x20	; 32
    15c4:	08 95       	ret

000015c6 <eeprom_update_byte>:
    15c6:	26 2f       	mov	r18, r22

000015c8 <eeprom_update_r18>:
    15c8:	f9 99       	sbic	0x1f, 1	; 31
    15ca:	fe cf       	rjmp	.-4      	; 0x15c8 <eeprom_update_r18>
    15cc:	92 bd       	out	0x22, r25	; 34
    15ce:	81 bd       	out	0x21, r24	; 33
    15d0:	f8 9a       	sbi	0x1f, 0	; 31
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	00 b4       	in	r0, 0x20	; 32
    15d6:	02 16       	cp	r0, r18
    15d8:	39 f0       	breq	.+14     	; 0x15e8 <eeprom_update_r18+0x20>
    15da:	1f ba       	out	0x1f, r1	; 31
    15dc:	20 bd       	out	0x20, r18	; 32
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	fa 9a       	sbi	0x1f, 2	; 31
    15e4:	f9 9a       	sbi	0x1f, 1	; 31
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	08 95       	ret

000015ea <_exit>:
    15ea:	f8 94       	cli

000015ec <__stop_program>:
    15ec:	ff cf       	rjmp	.-2      	; 0x15ec <__stop_program>
